function FileData_Pairs(x)
{
x.t("enabling","weighted");
x.t("example","claim\u2019s");
x.t("example","default");
x.t("example","new");
x.t("example","add");
x.t("example","creating");
x.t("example","override");
x.t("example","service");
x.t("example","using");
x.t("example","log");
x.t("four","basic");
x.t("included","workload");
x.t("included","exposures");
x.t("included","examples");
x.t("claimweightedworkloadmethodsimpl","add");
x.t("claimweightedworkloadmethodsimpl","follows");
x.t("claimweightedworkloadmethodsimpl","implementation");
x.t("claimweightedworkloadmethodsimpl","extends");
x.t("extensions","entity");
x.t("extensions","typelist");
x.t("label","displaykey.web.admin.workload.workloadclassification.colorconditionfilter.color");
x.t("label","displaykey.web.admin.workload.workloadclassification.claimflagstatus");
x.t("label","displaykey.web.admin.workload.workloadclassification.allcolors");
x.t("active","classification");
x.t("gw.api.assignment.workload.classifications.conditions.conditionmethods","impl=");
x.t("satisfied","condition.includeall");
x.t("satisfied","assignable's");
x.t("ignore","didn't");
x.t("cond.removefromconditionfilters","(filter)");
x.t("parameter","weightedassignmentglobaldefaultweight");
x.t("workloadproxy","descendant");
x.t("method","custom");
x.t("method","corresponding");
x.t("method","used");
x.t("doaction","claim");
x.t("below","necessary");
x.t("below","public");
x.t("below","name");
x.t("below","allclaimpolicytype");
x.t("below","claimpolicytype");
x.t("isworkloadaffected","method");
x.t("isworkloadaffected","boolean");
x.t("properties","below");
x.t("properties","create");
x.t("properties","name");
x.t("properties","colorconditionslv");
x.t("properties","match");
x.t("properties","tab");
x.t("construct","filterset");
x.t("exist","return");
x.t("lcf","lcf.color");
x.t("else","result");
x.t("globally","configuration");
x.t("proxy","claimworkloadproxy");
x.t("protected","override");
x.t("workloaddelegate","entity");
x.t("claim","workload");
x.t("claim","nothing");
x.t("claim","flag");
x.t("claim","line");
x.t("claim","entity.claim");
x.t("claim","public");
x.t("claim","color");
x.t("claim","assignment");
x.t("claim","assume");
x.t("claim","check");
x.t("claim","classification");
x.t("claim","segments");
x.t("claim","step");
x.t("claim","loss");
x.t("claim","assigned");
x.t("claim","return");
x.t("claim","classifications");
x.t("claim","requisite");
x.t("claim","policy");
x.t("claim","entity");
x.t("claim","flagged");
x.t("claim\u2019s","flag");
x.t("claim\u2019s","color");
x.t("claim\u2019s","flagged");
x.t("gold","customers");
x.t("defines","filters");
x.t("workload","proxy");
x.t("workload","needs");
x.t("workload","user");
x.t("workload","weight");
x.t("workload","open");
x.t("workload","details");
x.t("workload","assignment");
x.t("workload","group");
x.t("workload","classification");
x.t("workload","weight-aware");
x.t("workload","select");
x.t("workload","return");
x.t("workload","click");
x.t("workload","classifications");
x.t("workload","strategy");
x.t("workload","values");
x.t("workload","strategies");
x.t("workload","entity");
x.t("workload","system");
x.t("workload","conditions");
x.t("workload","dgc00500");
x.t("half","overall");
x.t("needs","up");
x.t("needs","recalculated");
x.t("computation","following");
x.t("gw.rules.action","start00rule");
x.t("shown","below");
x.t("shown","click");
x.t("gsrc","gw");
x.t("query.compare","claim");
x.t("owner.isfieldchanged","claim");
x.t("meet","condition");
x.t("applied","new");
x.t("implement","conditionmethods");
x.t("retired","false");
x.t("nothing","default");
x.t("elementname","color");
x.t("def","colorconditionslv");
x.t("result.addtoconditions","new");
x.t("create","new");
x.t("create","custom");
x.t("create","colorconditionfilter");
x.t("create","customize");
x.t("create","colorcondition");
x.t("currently","half");
x.t("includesubgroups:boolean","withingroup:group");
x.t("static","function");
x.t("business","claim");
x.t("business","settings");
x.t("studio","command");
x.t("studio","navigate");
x.t("weighted","workload");
x.t("fetchworkload","groupuser");
x.t("user's","workload");
x.t("ismatch","buildquery");
x.t("ismatch","entity");
x.t("workloadclassificationdv","claimworkloadclassification");
x.t("required","variables");
x.t("required","true");
x.t("required","name");
x.t("required","criteria");
x.t("green","blue");
x.t("instance","classificationcondition");
x.t("always","present");
x.t("always","match");
x.t("variables","tab");
x.t("10","navigate");
x.t("components","weighted");
x.t("equivalence","however");
x.t("equivalence","checks");
x.t("foreign","keys");
x.t("flag","status");
x.t("flag","attribute");
x.t("buildquery","methods");
x.t("buildquery","query");
x.t("editable","classification.colorcondition.includeall");
x.t("editable","false");
x.t("editable","true");
x.t("editable","select");
x.t("ability","create");
x.t("name=","color");
x.t("name=","classificationconditionid");
x.t("name=","conditionfilters");
x.t("name=","clr_cond_index_1");
x.t("hidecheckboxesifreadonly","true");
x.t("valuerange","typekey.color.gettypekeys");
x.t("11","select");
x.t("topic","enabling");
x.t("topic","includes");
x.t("user","user's");
x.t("user","interface");
x.t("user","su");
x.t("user","appropriate");
x.t("user","member");
x.t("version=","1.0");
x.t("listviewinput","widget");
x.t("12","save");
x.t("weight","workload");
x.t("weight","computation");
x.t("weight","weighted");
x.t("weight","property");
x.t("weight","classification");
x.t("weight","assigned");
x.t("weight","code");
x.t("weight","constant");
x.t("weight","class");
x.t("weight","claims");
x.t("weight","specify");
x.t("uses","user\u2019s");
x.t("groupuser","groupuser");
x.t("groupuser","int");
x.t("owner.assignuserdynamically","new");
x.t("line","business");
x.t("field","claim\u2019s");
x.t("field","shown");
x.t("field","editable");
x.t("field","displays");
x.t("field","check");
x.t("field","changed");
x.t("field","step");
x.t("field","enter");
x.t("http://guidewire.com/datamodel","desc=");
x.t("claim's","color");
x.t("text_val.select","link");
x.t("descendant","class");
x.t("abstractworkloadproxy","final");
x.t("abstractworkloadproxy","class");
x.t("modified","static");
x.t("entity.claim","actions");
x.t("illustrated","next");
x.t("interface","add");
x.t("interface","step");
x.t("interface","order");
x.t("interface","modify");
x.t("look","intrinsic");
x.t("necessary","start");
x.t("icon","select");
x.t("displays","message");
x.t("displays","value");
x.t("informing","need");
x.t("filterset.conditionfilters.isempty","result");
x.t("showaddconfirmmessage","true");
x.t("change","workloadproxy");
x.t("15","global");
x.t("15","note");
x.t("15","modify");
x.t("basic","assignment");
x.t("basic","criteria");
x.t("classify","incoming");
x.t("type","claim");
x.t("type","add");
x.t("type","menu");
x.t("type","workloadclassification");
x.t("open","claimweightedworkloadmethodsimpl");
x.t("open","workloadclassificationdv");
x.t("open","editing");
x.t("open","claimworkloadclassificationmethodsimpl");
x.t("open","claimworkloadclassification");
x.t("open","classificationcondition");
x.t("open","newworkloadclassificationpopup");
x.t("open","claims");
x.t("eti","follows");
x.t("eti","click");
x.t("batch","process");
x.t("public","construct");
x.t("public","override");
x.t("public","class");
x.t("delete","workload");
x.t("xmlns=","http://guidewire.com/datamodel");
x.t("priority=","supertype=");
x.t("query.and","andexp");
x.t("(filter)","private");
x.t("filterset.conditionfilters.hasmatch","lcf");
x.t("classification.colorcondition.includeall","add");
x.t("classification.colorcondition.includeall","navigate");
x.t("classification.colorcondition.includeall","visible");
x.t("multiple","components");
x.t("multiple","condition");
x.t("extend","gw");
x.t("total","system");
x.t("however","criteria");
x.t("editing","add");
x.t("editing","existing");
x.t("widget","below");
x.t("widget","inside");
x.t("widget","add");
x.t("widget","colorconditionslv");
x.t("widget","define");
x.t("widget","added");
x.t("widget","enter");
x.t("widget","created");
x.t("shut","down");
x.t("down","claimcenter");
x.t("unique=","true");
x.t("inside","colorconditions");
x.t("inside","toolbar");
x.t("inside","following");
x.t("guidewire","studio");
x.t("guidewire","claimcenter");
x.t("default","workload");
x.t("default","weight");
x.t("default","group");
x.t("default","value");
x.t("default","//");
x.t("property","example");
x.t("property","hasfilters");
x.t("property","defined");
x.t("property","defaultweight");
x.t("entities","base");
x.t("entities","considered");
x.t("customization","example");
x.t("checks","flag");
x.t("checks","range");
x.t("checks","sql");
x.t("scalability","performance");
x.t("filters","example");
x.t("filters","unique=");
x.t("filters","navigate");
x.t("filters","restrict");
x.t("filters","condition");
x.t("filters","attached");
x.t("filters","defined");
x.t("link","directly");
x.t("objects","during");
x.t("objects","first");
x.t("objects","match");
x.t("details","setting");
x.t("retrieved","stored");
x.t("customworkloadassignmentstrategy","withingroup");
x.t("customworkloadassignmentstrategy","consider");
x.t("customworkloadassignmentstrategy","extends");
x.t("assignuserbyworkload","claimweightedworkloadmethodsimpl");
x.t("assignuserbyworkload","includesubgroups:boolean");
x.t("new","claim");
x.t("new","weighted");
x.t("new","flag");
x.t("new","field");
x.t("new","customworkloadassignmentstrategy");
x.t("new","booleanradioinput");
x.t("new","assignment");
x.t("new","filter");
x.t("new","classification");
x.t("new","input");
x.t("new","display");
x.t("new","pcf");
x.t("new","classifications");
x.t("new","condition");
x.t("new","subtype");
x.t("new","entity");
x.t("new","class");
x.t("new","colorcondition");
x.t("new","criterion");
x.t("start","guidewire");
x.t("single","condition");
x.t("==","color");
x.t("includes","examples");
x.t("designed","workload");
x.t("command","prompt");
x.t("choice","list");
x.t("workloadclassificationmethods","delegate");
x.t("claimworkloadclassificationmethodsimpl","modify");
x.t("color","name=");
x.t("color","field");
x.t("color","color");
x.t("color","status");
x.t("color","specified");
x.t("color","classification");
x.t("color","boolean");
x.t("color","toadd");
x.t("color","selection");
x.t("color","colors");
x.t("color","index");
x.t("color","added");
x.t("color","keyposition=");
x.t("color","matches");
x.t("color","nullok=");
x.t("color","drop-down");
x.t("color","condition");
x.t("color","priority");
x.t("color","entity=");
x.t("color","//");
x.t("colorcondition.conditionfilters.haselements","var");
x.t("booleanradioinput","widget");
x.t("falselabel","displaykey.web.admin.workload.workloadclassification.restrictedto");
x.t("messsage","claimcenter");
x.t("need","change");
x.t("need","run");
x.t("withingroup","includesubgroups");
x.t("status","claim");
x.t("status","studio");
x.t("status","field");
x.t("status","added");
x.t("status","criterion");
x.t("list","enter");
x.t("list","click");
x.t("list","view");
x.t("list","criteria");
x.t("ttx","click");
x.t("colorconditionmethodsimpl","extends");
x.t("colorcondition.conditionfilters.map","cause");
x.t("file","type");
x.t("file","file");
x.t("file","name");
x.t("(false)","open");
x.t("(entitytype)","case");
x.t("assignment","method");
x.t("assignment","workload");
x.t("assignment","add");
x.t("assignment","api");
x.t("assignment","custom");
x.t("assignment","rule");
x.t("assignment","made");
x.t("assignment","strategy");
x.t("assignment","strategies");
x.t("assignable","entities");
x.t("assignable","objects");
x.t("assignable","object\u2019s");
x.t("assignable","entity");
x.t("assignable","class");
x.t("candidate","assignees");
x.t("group","claim");
x.t("group","assignment");
x.t("group","//");
x.t("actions","gw.rules.action");
x.t("during","assignment");
x.t("add","claim");
x.t("add","flag");
x.t("add","listviewinput");
x.t("add","field");
x.t("add","delete");
x.t("add","checks");
x.t("add","new");
x.t("add","color");
x.t("add","custom");
x.t("add","classification");
x.t("add","array");
x.t("add","rangecell");
x.t("add","row");
x.t("add","additional");
x.t("add","toolbar");
x.t("add","choose");
x.t("add","rowiterator");
x.t("add","following");
x.t("add","iteratorbuttons");
x.t("menu","weighted");
x.t("menu","select");
x.t("menu","click");
x.t("id","colorconditions");
x.t("id","colorconditionfilter");
x.t("id","allclaimflagstatus");
x.t("id","allcolors");
x.t("id","claimflagstatus");
x.t("assignmentclassification","claimworkloadclassification");
x.t("typecode","drop-down");
x.t("guide","guidewire");
x.t("guide","base");
x.t("guide","customize");
x.t("guide","criteria");
x.t("api","topic");
x.t("api","assignment");
x.t("simple","criteria");
x.t("check","claim\u2019s");
x.t("check","claim");
x.t("check","claim's");
x.t("check","stored");
x.t("claim.flagged","workloadclassification");
x.t("filter","gold");
x.t("filter","claim");
x.t("filter","create");
x.t("filter","color");
x.t("filter","cond.conditionfilters");
x.t("filter","classification");
x.t("filter","step");
x.t("filter","specific");
x.t("filter","condition");
x.t("filter","subtype");
x.t("filter","case");
x.t("assume","custom");
x.t("filterset","condition");
x.t("filterset","colorcondition");
x.t("requested","condition.includeall");
x.t("go","condition");
x.t("iterator","colorconditions.colorconditionslv");
x.t("colorconditions.colorconditionslv","showaddconfirmmessage");
x.t("configuring","weighted");
x.t("configuring","default");
x.t("recommended","custom");
x.t("subentities","pointed");
x.t("navigate","claimcenter");
x.t("navigate","configuration");
x.t("navigate","administration");
x.t("workloadclassification","claimworkloadclassification");
x.t("workloadclassification","exposes");
x.t("false","protected");
x.t("false","priority=");
x.t("false","id");
x.t("false","typelist=");
x.t("false","step");
x.t("false","//");
x.t("/subtype","add");
x.t("/subtype","note");
x.t("duplicate","condition");
x.t("directly","page");
x.t("test","changes");
x.t("claimflagged","next");
x.t("claimflagged","claimworkloadclassification");
x.t("claimflagged","typelist");
x.t("true","elementname");
x.t("true","10");
x.t("true","hidecheckboxesifreadonly");
x.t("true","editable");
x.t("true","public");
x.t("true","falselabel");
x.t("true","id");
x.t("true","add");
x.t("true","step");
x.t("true","truelabel");
x.t("true","return");
x.t("true","value");
x.t("true","desc");
x.t("true","indexcol");
x.t("true","/array");
x.t("true","showremoveconfirmmessage");
x.t("claimworkloadclassificationmethodimpl","implementation");
x.t("su","password");
x.t("specified","//");
x.t("text_val.focus","text_val.select");
x.t("stored","workload");
x.t("stored","abstractworkloadproxy");
x.t("creating","customworkloadassignmentstrategy");
x.t("creating","custom");
x.t("overall","total");
x.t("range","checks");
x.t("name","field");
x.t("name","color");
x.t("name","claimflagged");
x.t("name","classification");
x.t("name","value");
x.t("settings","weighted");
x.t("colorconditions","required");
x.t("colorconditions","widget");
x.t("colorconditions","file");
x.t("colorconditions","labelabove");
x.t("follows","public");
x.t("follows","navigate");
x.t("follows","xml");
x.t("follows","subtype");
x.t("overridden","default");
x.t("assignees","weighted");
x.t("performance","example");
x.t("changed","owner.isfieldchanged");
x.t("edit","claim");
x.t("edit","classifications");
x.t("cond.conditionfilters","cond.removefromconditionfilters");
x.t("custom","workload");
x.t("custom","weighted");
x.t("custom","assignment");
x.t("custom","configuration");
x.t("custom","condition");
x.t("custom","strategy");
x.t("custom","typelist");
x.t("custom","conditions");
x.t("base","configuration");
x.t("base","implementation");
x.t("base","class");
x.t("abstractworkloadassignmentstrategy","protected");
x.t("abstractworkloadassignmentstrategy","class");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("classification","example");
x.t("classification","create");
x.t("classification","instance");
x.t("classification","15");
x.t("classification","type");
x.t("classification","default");
x.t("classification","list");
x.t("classification","add");
x.t("classification","claim.flagged");
x.t("classification","important");
x.t("classification","enter");
x.t("classification","condition");
x.t("classification","following");
x.t("classification","criterion");
x.t("classification","conditions");
x.t("boolean","switch");
x.t("boolean","return");
x.t("boolean","result");
x.t("boolean","//");
x.t("boolean","var");
x.t("rule","weighted");
x.t("rule","assignable");
x.t("plus","icon");
x.t("methods","include");
x.t("provides","ability");
x.t("cond","condition");
x.t("toadd","classification.colorcondition.addtoconditionfilters");
x.t("classification.colorcondition.removefromconditionfilters","(color)");
x.t("up","two");
x.t("up","either");
x.t("restart","log");
x.t("arrayentity=","colorconditionfilter");
x.t("abstractconditionmethodsimpl","class");
x.t("abstractconditionmethodsimpl","//");
x.t("gw","assignment");
x.t("gw","api");
x.t("gw","navigate");
x.t("final","public");
x.t("system-level","workload");
x.t("groupuser.user.totalworkload","override");
x.t("assignmentsuccess","claim.assignuserdynamically");
x.t("double-click","workloadclassificationcommoninputset");
x.t("exposures","claim");
x.t("exposures","click");
x.t("segments","claim");
x.t("supertype=","classificationcondition");
x.t("supertype=","conditionfilter");
x.t("map","filtered");
x.t("typeis","claimworkloadclassification");
x.t("selection","verify");
x.t("claimcenter","user");
x.t("claimcenter","displays");
x.t("claimcenter","provides");
x.t("claimcenter","configuration");
x.t("claimcenter","bin");
x.t("claimcenter","running");
x.t("int","return");
x.t("int","//");
x.t("weights","assignable");
x.t("array","new");
x.t("array","arrayentity=");
x.t("attribute","claimworkloadclassificationmethodimpl");
x.t("attribute","note");
x.t("input","widget");
x.t("permissions","view");
x.t("non-restrictive","criteria");
x.t("desc=","color");
x.t("desc=","classification");
x.t("desc=","prevents");
x.t("colorconditionfilter","label");
x.t("colorconditionfilter","name=");
x.t("colorconditionfilter","eti");
x.t("colorconditionfilter","widget");
x.t("colorconditionfilter","new");
x.t("colorconditionfilter","final=");
x.t("color.color","valuerange");
x.t("typekey.color.gettypekeys","(false)");
x.t("weight-aware","assignable");
x.t("allclaimpolicytype","widget");
x.t("selected","always");
x.t("selected","go");
x.t("selected","classification");
x.t("selected","step");
x.t("present","public");
x.t("toremove","classification.colorcondition.removefromconditionfilters");
x.t("error","occurred");
x.t("config","extensions");
x.t("config","gsrc");
x.t("config","xml");
x.t("config","page");
x.t("prompt","navigate");
x.t("display","keys");
x.t("configured","filter");
x.t("colors","field");
x.t("colors","public");
x.t("colors","colorcondition.conditionfilters.map");
x.t("lcf.color","==");
x.t("non-negative","integer");
x.t("groupuser.assignmentweightedworkload","groupuser.user.totalworkload");
x.t("next","example");
x.t("next","step");
x.t("delegate","claim");
x.t("red","goal");
x.t("1.0","subtype");
x.t("typelist=","color");
x.t("(entity.color)","//");
x.t("colorconditionslv","add");
x.t("colorconditionslv","id");
x.t("colorconditionslv","name");
x.t("first","need");
x.t("mostly","look");
x.t("select","active");
x.t("select","new");
x.t("select","list");
x.t("select","typecode");
x.t("select","add");
x.t("select","typekey");
x.t("select","code");
x.t("select","value");
x.t("weightedworkloadmethods","claim");
x.t("classificationconditionid","keyposition=");
x.t("cascadedelete=","true");
x.t("displaykey.web.admin.workload.workloadclassification.colorconditionfilter.color","required");
x.t("guidewire_selectall","var");
x.t("computed","weights");
x.t("recalculated","public");
x.t("iface=","gw.api.assignment.workload.classifications.conditions.conditionmethods");
x.t("cause","cause.color");
x.t("rangecell","widget");
x.t("function","doaction");
x.t("function","isworkloadaffected");
x.t("function","fetchworkload");
x.t("function","ismatch");
x.t("function","buildquery");
x.t("function","assignuserbyworkload");
x.t("function","guidewire_selectall");
x.t("function","filterquery");
x.t("function","matchescolor");
x.t("function","clearfilters");
x.t(".claimflagged","add");
x.t(".claimflagged","step");
x.t(".claimflagged","return");
x.t("classification.colorcondition.addtoconditionfilters","(color)");
x.t("customize","workload");
x.t("customize","multiple");
x.t("customize","non-restrictive");
x.t("determination","candidate");
x.t("different","ways");
x.t("withingroup:group","boolean");
x.t("tiers","add");
x.t("tiers","condition");
x.t("cannot","used");
x.t("colorcondition.workloadclassification","typeis");
x.t("private","function");
x.t("define","properties");
x.t("ways","override");
x.t("step","add");
x.t("step","test");
x.t("step","override");
x.t("step","array\u2019s");
x.t("step","adding");
x.t("step","modify");
x.t("flaggedtype","nullok");
x.t("index","name=");
x.t("delegation","always");
x.t("truelabel","displaykey.web.admin.workload.workloadclassification.all");
x.t("row","widget");
x.t("match","else");
x.t("match","assignable");
x.t("match","match");
x.t("match","existing");
x.t("match","condition");
x.t("match","criteria");
x.t("xml","version=");
x.t("xml","retrieved");
x.t("loss","type");
x.t("loss","causes");
x.t("changes","example");
x.t("changes","shut");
x.t("changes","test");
x.t("changes","base");
x.t("changes","step");
x.t("restricted","specific");
x.t("restricted","attributes");
x.t("claimworkloadclassification","result.addtoconditions");
x.t("claimworkloadclassification","eti");
x.t("claimworkloadclassification","claimflagged");
x.t("claimworkloadclassification",".claimflagged");
x.t("claimworkloadclassification","pcf");
x.t("claimworkloadclassification","return");
x.t("claimworkloadclassification","entity");
x.t("directory","enter");
x.t("pcf","11");
x.t("pcf","file");
x.t("pcf","add");
x.t("pcf","double-click");
x.t("pcf","admin");
x.t("pcf","allcolors");
x.t("admin","workload");
x.t("allclaimflagstatus","label");
x.t("section","claim");
x.t("section","colors");
x.t("customers","assignable");
x.t("verify","claim");
x.t("assigned","assignable");
x.t("assigned","correct");
x.t("added","claim");
x.t("added","weighted");
x.t("added","step");
x.t("displaykey.web.admin.workload.workloadclassification.claimflagstatus","required");
x.t("important","custom");
x.t("works","claim");
x.t("query.comparein","color");
x.t("switch","(entitytype)");
x.t("switch","typeof");
x.t("code","default");
x.t("code","described");
x.t("code","colorcondition");
x.t("code","tab");
x.t("steps","create");
x.t("steps","step");
x.t("intrinsic","attributes");
x.t("typekey","desc=");
x.t("typekey","drop-down");
x.t("classificationcondition","necessary");
x.t("classificationcondition","new");
x.t("classificationcondition","ttx");
x.t("classificationcondition","implementsinterface");
x.t("classificationcondition","typelist");
x.t("keyposition=","indexcol");
x.t("keyposition=","/index");
x.t("allcolors","label");
x.t("allcolors","widget");
x.t("valuetype","colorconditionfilter");
x.t("override","claimweightedworkloadmethodsimpl");
x.t("override","workload");
x.t("override","property");
x.t("override","assignuserbyworkload");
x.t("override","assignment");
x.t("override","function");
x.t("override","global");
x.t("return","15");
x.t("return","false");
x.t("return","true");
x.t("return","groupuser.assignmentweightedworkload");
x.t("return","matchescolor");
x.t("return","condition");
x.t("return","result");
x.t("return","//");
x.t("groups","create");
x.t("restrict","condition");
x.t("restrict","following");
x.t("affect","scalability");
x.t("nullok","true");
x.t("matches","query.compare");
x.t("matches","meet");
x.t("matches","color");
x.t("matches","predefined");
x.t("message","informing");
x.t("displaykey.web.admin.workload.workloadclassification.allcolors","required");
x.t("canpick","true");
x.t("incorporate","new");
x.t("enter","colorconditions");
x.t("enter","following");
x.t("enter","general");
x.t("enter","gwcc");
x.t("click","add");
x.t("click","edit");
x.t("click","plus");
x.t("click","restrict");
x.t("click","ok");
x.t("click","update");
x.t("bean","boolean");
x.t("nullok=","false");
x.t("occurred","messsage");
x.t("classifications","example");
x.t("classifications","claim");
x.t("classifications","applied");
x.t("classifications","weighted");
x.t("classifications","open");
x.t("classifications","editing");
x.t("classifications","configuring");
x.t("classifications","classification");
x.t("classifications","colorcondition.workloadclassification");
x.t("classifications","application");
x.t("classifications","based");
x.t("classifications","using");
x.t("classifications","adding");
x.t("classifications","specify");
x.t("existing","weighted");
x.t("existing","open");
x.t("existing","classifications");
x.t("claimworkloadproxy","extends");
x.t("claimworkloadproxy","class");
x.t("made","dynamic");
x.t("consider","claimcenter");
x.t("pointed","foreign");
x.t("(filterset)","public");
x.t("typeof","entity");
x.t("configuration","four");
x.t("configuration","parameter");
x.t("configuration","guide");
x.t("configuration","configuring");
x.t("configuration","custom");
x.t("configuration","config");
x.t("configuration","function");
x.t("configuration","customize");
x.t("configuration","pcf");
x.t("configuration","code");
x.t("configuration","following");
x.t("weightedassignmentglobaldefaultweight","configuration");
x.t("specifically","designed");
x.t("keys","required");
x.t("keys","criteria");
x.t("include","equivalence");
x.t("include","new");
x.t("include","selected");
x.t("filterquery","query");
x.t("matchescolor","color");
x.t("matchescolor","(entity.color)");
x.t("value","properties");
x.t("value","def");
x.t("value","editable");
x.t("value","classification.colorcondition.includeall");
x.t("value","default");
x.t("value","assignmentclassification");
x.t("value","iterator");
x.t("value","name");
x.t("value","overridden");
x.t("value","color.color");
x.t("value","selected");
x.t("value","code");
x.t("value","drop-down");
x.t("value","classification.colorcondition.conditionfilters");
x.t("value","defined");
x.t("additional","criteria");
x.t("bin","directory");
x.t("running","restart");
x.t("hasfilters","boolean");
x.t("right-click","select");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("constant","non-negative");
x.t("several","groups");
x.t("implementation","workloadclassificationmethods");
x.t("implementation","simple");
x.t("implementation","weightedworkloadmethods");
x.t("implementation","classes");
x.t("drop-down","choice");
x.t("drop-down","list");
x.t("drop-down","menu");
x.t("specific","claim");
x.t("specific","condition");
x.t("condition.includeall","colorcondition.conditionfilters.haselements");
x.t("condition.includeall","var");
x.t("classification.colorcondition.conditionfilters","canpick");
x.t("extends","abstractworkloadproxy");
x.t("extends","abstractworkloadassignmentstrategy");
x.t("extends","abstractconditionmethodsimpl");
x.t("extends","abstractweightedworkloadmethodsbaseimpl");
x.t("view","add");
x.t("view","edit");
x.t("process","update");
x.t("condition","satisfied");
x.t("condition","claim");
x.t("condition","create");
x.t("condition","weighted");
x.t("condition","illustrated");
x.t("condition","multiple");
x.t("condition","filters");
x.t("condition","single");
x.t("condition","filter");
x.t("condition","array");
x.t("condition","selected");
x.t("condition","configured");
x.t("condition","step");
x.t("condition","match");
x.t("condition","works");
x.t("condition","switch");
x.t("condition","implementation");
x.t("condition","subtype");
x.t("condition","considered");
x.t("condition","desc");
x.t("condition","created");
x.t("condition","entity=");
x.t("condition","colorcondition");
x.t(".conditionfilters.isempty","public");
x.t("exposes","tab");
x.t("requisite","color");
x.t("expression","attribute");
x.t("claimpolicytype","widget");
x.t("considered","satisfied");
x.t("considered","matches");
x.t("subtype","xmlns=");
x.t("subtype","colorconditionfilter");
x.t("subtype","classificationcondition");
x.t("subtype","conditionfilter");
x.t("subtype","colorcondition");
x.t("conditionfilters","cascadedelete=");
x.t("page","error");
x.t("page","configuration");
x.t("dynamic","assignment");
x.t("newworkloadclassificationpopup","pcf");
x.t("group-level","system-level");
x.t("query","query");
x.t("query","//");
x.t("query","var");
x.t("data","model");
x.t("attached","//");
x.t("information","required");
x.t("correct","weight");
x.t("examples","weighted");
x.t("examples","configuring");
x.t("defined","globally");
x.t("defined","classification");
x.t("defined","config");
x.t("strategy","create");
x.t("strategy","uses");
x.t("strategy","customization");
x.t("strategy","default");
x.t("strategy","recommended");
x.t("strategy","created");
x.t("strategy","class");
x.t("result","owner.assignuserdynamically");
x.t("result","filterset.conditionfilters.hasmatch");
x.t("result","false");
x.t("result","true");
x.t("result","boolean");
x.t("result","step");
x.t("result","alternately");
x.t("desc","flag");
x.t("desc","classification");
x.t("equals","workloadclassification");
x.t("appropriate","permissions");
x.t("goal","create");
x.t("implementsinterface","iface=");
x.t("gw.assignment.workload.classifications.conditions.colorconditionmethodsimpl","/subtype");
x.t("array\u2019s","values");
x.t("displaykey.web.admin.workload.workloadclassification.all","value");
x.t("toolbar","widget");
x.t("toolbar","following");
x.t("save","changes");
x.t("values","green");
x.t("values","name");
x.t("values","custom");
x.t("values","map");
x.t("values","following");
x.t("application","guide");
x.t("policy","type");
x.t("workloadclassificationcommoninputset","open");
x.t("blue","red");
x.t("case","claim");
x.t("case","claimworkloadclassification");
x.t("clearfilters","var");
x.t("described","topic");
x.t("global","default");
x.t("abstractweightedworkloadmethodsbaseimpl","claim");
x.t("called","conditions");
x.t("labelabove","true");
x.t("choose","color");
x.t("note","new");
x.t("note","value");
x.t("note","complexity");
x.t("integer","creating");
x.t("two","different");
x.t("start00rule","var");
x.t("administration","business");
x.t("administration","menu");
x.t("classes","create");
x.t("classes","add");
x.t("classes","step");
x.t("predefined","workload");
x.t("predefined","values");
x.t("ok","claim");
x.t("ok","create");
x.t("priority","retired");
x.t("indexcol","name=");
x.t("/array","step");
x.t("didn't","exist");
x.t("rowiterator","following");
x.t("strategies","included");
x.t("strategies","create");
x.t("strategies","abstractworkloadassignmentstrategy");
x.t("strategies","determination");
x.t("strategies","classifications");
x.t("strategies","leverage");
x.t("leverage","computed");
x.t("object\u2019s","attributes");
x.t("itself","using");
x.t("based","color");
x.t("work","weighted");
x.t("clr_cond_index_1","desc=");
x.t("prevents","duplicate");
x.t("created","assignable");
x.t("created","step");
x.t("created","system");
x.t("incoming","assignable");
x.t("claimflagstatus","label");
x.t("causes","requested");
x.t("causes","service");
x.t("order","work");
x.t("following","example");
x.t("following","properties");
x.t("following","basic");
x.t("following","select");
x.t("following","steps");
x.t("following","values");
x.t("following","conditions");
x.t("system","workload");
x.t("system","needs");
x.t("system","add");
x.t("corresponding","workloaddelegate");
x.t("entity","example");
x.t("entity","claim");
x.t("entity","workload");
x.t("entity","shown");
x.t("entity","studio");
x.t("entity","create");
x.t("entity","open");
x.t("entity","select");
x.t("entity","bean");
x.t("entity","subtype");
x.t("entity","predefined");
x.t("entity","itself");
x.t("entity","//");
x.t("alternately","incorporate");
x.t("used","classify");
x.t("used","check");
x.t("used","existing");
x.t("either","match");
x.t("run","batch");
x.t("model","classifications");
x.t("service","tiers");
x.t("conditionfilter","defines");
x.t("conditionfilter","typekey");
x.t("setting","matches");
x.t("setting","global");
x.t("class","claimweightedworkloadmethodsimpl");
x.t("class","workload");
x.t("class","shown");
x.t("class","public");
x.t("class","extend");
x.t("class","customworkloadassignmentstrategy");
x.t("class","colorconditionmethodsimpl");
x.t("class","assignable");
x.t("class","follows");
x.t("class","base");
x.t("class","override");
x.t("class","claimworkloadproxy");
x.t("class","specifically");
x.t("class","value");
x.t("//","ignore");
x.t("//","claim");
x.t("//","currently");
x.t("//","weighted");
x.t("//","add");
x.t("//","check");
x.t("//","filter");
x.t("//","classification");
x.t("//","delegation");
x.t("//","include");
x.t("//","condition");
x.t("//","entity");
x.t("includesubgroups","return");
x.t("includesubgroups","adding");
x.t("using","equivalence");
x.t("using","administration");
x.t("using","following");
x.t("typelist","open");
x.t("typelist","color");
x.t("typelist","follows");
x.t("typelist","flaggedtype");
x.t("flagged","field");
x.t("flagged","return");
x.t("flagged","matches");
x.t("flagged","equals");
x.t("flagged","setting");
x.t("colorcondition","implement");
x.t("colorcondition","12");
x.t("colorcondition","filterset.conditionfilters.isempty");
x.t("colorcondition","eti");
x.t("colorcondition","filter");
x.t("colorcondition","name");
x.t("colorcondition","condition");
x.t("colorcondition",".conditionfilters.isempty");
x.t("colorcondition","created");
x.t("colorcondition","//");
x.t("colorcondition","final=");
x.t("colorcondition","super");
x.t("entity=","colorconditionfilter");
x.t("entity=","colorcondition");
x.t("displaykey.web.admin.workload.workloadclassification.restrictedto","id");
x.t("general","information");
x.t("adding","workload");
x.t("adding","classifications");
x.t("adding","additional");
x.t("adding","criteria");
x.t("criteria","included");
x.t("criteria","workload");
x.t("criteria","illustrated");
x.t("criteria","subentities");
x.t("criteria","up");
x.t("criteria","mostly");
x.t("criteria","restricted");
x.t("criteria","section");
x.t("criteria","affect");
x.t("criteria","include");
x.t("criteria","condition");
x.t("criteria","called");
x.t("criteria","used");
x.t("criteria","adding");
x.t("criterion","isworkloadaffected");
x.t("criterion","add");
x.t("criterion","claimflagged");
x.t("criterion","follows");
x.t("criterion","step");
x.t("criterion","implementation");
x.t("password","gw");
x.t("impl=","gw.assignment.workload.classifications.conditions.colorconditionmethodsimpl");
x.t("conditionmethods","interface");
x.t("tab","id");
x.t("tab","add");
x.t("tab","name");
x.t("tab","valuetype");
x.t("modify","ismatch");
x.t("modify","gw");
x.t("modify","claimcenter");
x.t("without","matching");
x.t("member","several");
x.t("sql","expression");
x.t("gwcc","studio");
x.t("andexp","query.comparein");
x.t("(color)","toremove");
x.t("(color)","value");
x.t("var","filterset");
x.t("var","text_val=eval");
x.t("var","cond");
x.t("var","assignmentsuccess");
x.t("var","colors");
x.t("var","result");
x.t("var","colorcondition");
x.t("claims","15");
x.t("claims","exposures");
x.t("claims","without");
x.t("defaultweight","int");
x.t("iteratorbuttons","widget");
x.t("complexity","criteria");
x.t("log","user");
x.t("log","claimcenter");
x.t("conditions","included");
x.t("conditions","claimcenter");
x.t("conditions","cannot");
x.t("conditions","restricted");
x.t("conditions","right-click");
x.t("conditions","data");
x.t("cause.color","query.and");
x.t("visible","classification.colorcondition.includeall");
x.t("showremoveconfirmmessage","true");
x.t("specify","default");
x.t("specify","criteria");
x.t("matching","workload");
x.t("user\u2019s","group-level");
x.t("dgc00500","modified");
x.t("claim.assignuserdynamically","new");
x.t("attributes","assignable");
x.t("attributes","base");
x.t("attributes","criteria");
x.t("update","claimcenter");
x.t("update","existing");
x.t("update","ok");
x.t("final=","false");
x.t("assignable's","properties");
x.t("/index","/subtype");
x.t("filtered","values");
x.t("super","(filterset)");
}
