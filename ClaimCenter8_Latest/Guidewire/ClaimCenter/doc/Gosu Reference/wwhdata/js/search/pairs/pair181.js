function FileData_Pairs(x)
{
x.t("root","node");
x.t("example","create");
x.t("example","various");
x.t("example","uses");
x.t("example","trivial");
x.t("example","attribute");
x.t("example","suppose");
x.t("example","var");
x.t("method","root");
x.t("method","indicates");
x.t("method","parse");
x.t("properties","find");
x.t("properties","treat");
x.t("properties","using");
x.t("just","generate");
x.t("(myxmlstring)","once");
x.t("implement","ixmlnode");
x.t("studio","code");
x.t("tree","related");
x.t("tree","essentially");
x.t("\\x","x.id");
x.t("\\x","x.elementname");
x.t("create","list");
x.t("once","reference");
x.t("various","property");
x.t("related","discussion");
x.t("completion","features");
x.t("gw.xml.xmlnode","//");
x.t("discussed","legacy");
x.t("line","previous");
x.t("line","//");
x.t("uses","gw.xml.xmlnode");
x.t("text_val.select","link");
x.t("interface","untyped");
x.t("essentially","untyped");
x.t("node.findfirst","\\x");
x.t("errors","var");
x.t("fairly","simple");
x.t("getter","methods");
x.t("parsing","(importing)");
x.t("however","strongly");
x.t("apis","structured");
x.t("apis","collection-like");
x.t("apis","manipulating");
x.t("structured","xml");
x.t("property","accessors");
x.t("validates","xml");
x.t("limitations","just");
x.t("link","directly");
x.t("access","coercing");
x.t("access","freely");
x.t("access","strongly-typed");
x.t("access","number");
x.t("access","node");
x.t("access","child");
x.t("node.test1.color","however");
x.t("coercing","nodes");
x.t("want","find");
x.t("want","var");
x.t("element","number");
x.t("==","test4");
x.t("==","//");
x.t("intermixing","two");
x.t("new","xsd.test.root");
x.t("document","root");
x.t("color","node.test1.color");
x.t("color","test1");
x.t("color","n2.test1.color");
x.t("utf_xml","new");
x.t("utf_xml","true");
x.t("messsage","gosu");
x.t("ixmlnode","interface");
x.t("list","ids");
x.t("list","names");
x.t("indicates","whether");
x.t("during","import");
x.t("guide","gosu");
x.t("simple","parse");
x.t("validate","xml");
x.t("validate","incoming");
x.t("parse","method");
x.t("parse","xml");
x.t("parse","pass");
x.t("features","color");
x.t("features","ways");
x.t("features","including");
x.t("freely","intermixing");
x.t("throws","exception");
x.t("fails","example");
x.t("directly","page");
x.t("imported","xsd");
x.t("true","gosu");
x.t("newnode","new");
x.t("strongly-typed","getter");
x.t("strongly-typed","xml");
x.t("strongly-typed","code");
x.t("strongly-typed","data");
x.t("strongly-typed","values");
x.t("strongly-typed","operations");
x.t("text_val.focus","text_val.select");
x.t("test1","node");
x.t("x.attributes","number");
x.t("no","limitations");
x.t("gosu","validates");
x.t("gosu","in-memory");
x.t("gosu","xml");
x.t("gosu","reference");
x.t("(importing)","incoming");
x.t("typed","node");
x.t("typed","code");
x.t("typed","nodes");
x.t("collection-like","enhancements");
x.t("test2","nodes");
x.t("n1","node.findfirst");
x.t("n1","xsd.test.testtype");
x.t("argument","parse");
x.t("trivial","xsd");
x.t("bytes","var");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("methods","access");
x.t("assisted","studio");
x.t("test4","x.attributes");
x.t("test4","child");
x.t("n2","n1");
x.t("boolean","parse");
x.t("boolean","argument");
x.t("continue","strongly");
x.t("find","test4");
x.t("find","nodes");
x.t("combine","features");
x.t(".parse","utf_xml");
x.t("accessors","instead");
x.t("attribute","x.attributes");
x.t("attribute","code");
x.t("attribute","work");
x.t("legacy","xml");
x.t("in-memory","graph");
x.t("error","occurred");
x.t("documents","fairly");
x.t("strongly","typed");
x.t("somehow","reference");
x.t("suppose","want");
x.t("validation","during");
x.t("collection","enhancements");
x.t("n2.test1.color","combine");
x.t("importing","strongly-typed");
x.t("guidewire_selectall","var");
x.t("number","==");
x.t("number","attribute");
x.t("number","similarly");
x.t("node.children.map","\\x");
x.t("function","guidewire_selectall");
x.t("dom-like","tree");
x.t("elementnames","node.children.map");
x.t("represents","xml");
x.t("straightforward","strongly-typed");
x.t("against","xsd");
x.t("whether","//");
x.t("instead","assisted");
x.t("ways","example");
x.t("xml","parsing");
x.t("xml","apis");
x.t("xml","validate");
x.t("xml","gosu");
x.t("xml","bytes");
x.t("xml","legacy");
x.t("xml","documents");
x.t("xml","importing");
x.t("xml","function");
x.t("xml","against");
x.t("xml","import");
x.t("xml","call");
x.t("xml","untyped");
x.t("xml","using");
x.t("xml","pass");
x.t("coerce","specific");
x.t("compile","list");
x.t("types","operations");
x.t("node","example");
x.t("node","root");
x.t("node","access");
x.t("node","features");
x.t("node","strongly-typed");
x.t("node","strongly");
x.t("node","straightforward");
x.t("node","class");
x.t("node","xsd.test.simpletest.parse");
x.t("node","var");
x.t("node","subelements");
x.t("reference","root");
x.t("reference","guide");
x.t("reference","xml");
x.t("code","completion");
x.t("code","code");
x.t("code","similar");
x.t("code","//");
x.t("code","var");
x.t("x.id","xsd");
x.t("ids","test2");
x.t("ids","node.test2s.map");
x.t("fully","using");
x.t("xsd.test.testtype","//");
x.t("previous","line");
x.t("occurred","messsage");
x.t("discussion","legacy");
x.t("manipulating","xml");
x.t("similar","following");
x.t("node.test2s.map","\\x");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("specific","node");
x.t("import","example");
x.t("import","xml");
x.t("import","import");
x.t("exception","errors");
x.t("exception","fails");
x.t("generate","xml");
x.t("page","error");
x.t("nodes","example");
x.t("nodes","implement");
x.t("nodes","want");
x.t("nodes","appropriate");
x.t("nodes","var");
x.t("x.elementname","==");
x.t("x.elementname","compile");
x.t("graph","represents");
x.t("mirrors","incoming");
x.t("data","access");
x.t("optional","boolean");
x.t("optional","validation");
x.t("appropriate","node");
x.t("practice","coercion");
x.t("treat","tree");
x.t("values","var");
x.t("children","root");
x.t("children","properties");
x.t("children","attributes");
x.t("enhancements","discussed");
x.t("enhancements","continue");
x.t("enhancements","xml");
x.t("two","types");
x.t("work","node");
x.t("incoming","document");
x.t("incoming","xml");
x.t("call","parse");
x.t(".asutfstring","//");
x.t("elements","example");
x.t("elements","children");
x.t("untyped","properties");
x.t("untyped","access");
x.t("untyped","dom-like");
x.t("untyped","node");
x.t("untyped","nodes");
x.t("untyped","children");
x.t("untyped","attributes");
x.t("following","//");
x.t("using","optional");
x.t("using","untyped");
x.t("using","xsds");
x.t("xsds","importing");
x.t("class","example");
x.t("class","imported");
x.t("class","mirrors");
x.t("xsd.test.simpletest.parse","(myxmlstring)");
x.t("//","access");
x.t("//","validate");
x.t("//","parse");
x.t("//","no");
x.t("//","somehow");
x.t("//","coerce");
x.t("//","practice");
x.t("//","untyped");
x.t("similarly","enhancements");
x.t("coercion","typename");
x.t("xsd","throws");
x.t("xsd","strongly-typed");
x.t("xsd","fully");
x.t("xsd","//");
x.t("xsd","var");
x.t("pass","true");
x.t("pass","optional");
x.t("xsd.test.root",".parse");
x.t("xsd.test.root",".asutfstring");
x.t("child","element");
x.t("child","elements");
x.t("names","elements");
x.t("operations","optional");
x.t("operations","untyped");
x.t("var","color");
x.t("var","utf_xml");
x.t("var","newnode");
x.t("var","n1");
x.t("var","text_val=eval");
x.t("var","n2");
x.t("var","elementnames");
x.t("var","node");
x.t("var","ids");
x.t("including","collection");
x.t("attributes","properties");
x.t("attributes","strongly-typed");
x.t("attributes","children");
x.t("typename","line");
x.t("subelements","attributes");
}
