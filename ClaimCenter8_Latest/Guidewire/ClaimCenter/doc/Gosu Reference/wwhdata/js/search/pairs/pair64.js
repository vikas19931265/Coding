function FileData_Pairs(x)
{
x.t("coding","patterns");
x.t("example","defines");
x.t("example","later");
x.t("example","colorsequenceinterval");
x.t("example","color");
x.t("example","iterator");
x.t("example","demonstrates");
x.t("example","iterate");
x.t("example","skip");
x.t("example","suppose");
x.t("example","step");
x.t("example","integer");
x.t("particularly","important");
x.t("gw.lang.reflect.interval.sequenceableinterval","colorsequencable.red");
x.t("readable","create");
x.t("four","separate");
x.t("complex","methods");
x.t("properties","interval");
x.t("possible","color");
x.t("iindex","previousinsequence");
x.t("iindex","int");
x.t("iindex","syntax");
x.t("iindex","override");
x.t("iindex","actually");
x.t("iterableinterval","color");
x.t("iterableinterval","class");
x.t("method","100");
x.t("method","without");
x.t("library","although");
x.t("construct","left");
x.t("construct","startat");
x.t("construct","throw");
x.t("coloriterator","construct");
x.t("coloriterator","implements");
x.t("coloriterator","(startat)");
x.t("right","color");
x.t("right","endpoint");
x.t("right","endpoints");
x.t("right","stp");
x.t("defines","enumeration");
x.t("defines","next");
x.t("fetch","next");
x.t("rightendpoint.ordinal","rightclosed");
x.t("rightendpoint.ordinal","leftclosed");
x.t("rightendpoint.ordinal","//");
x.t("protected","var");
x.t("implement","required");
x.t("implement","java.lang.comparable");
x.t("implement","interface");
x.t("implement","necessary");
x.t("implement","java.lang.iterable");
x.t("implement","comparable");
x.t("implement","iterable");
x.t("implement","methods");
x.t("implement","java");
x.t("implement","isequenceable");
x.t("implement","main");
x.t("implement","correctly");
x.t("implement","class");
x.t("previousnthinsequence","step");
x.t("previousnthinsequence","stp");
x.t("every","item");
x.t("needs","capability");
x.t("create","new");
x.t("create","custom");
x.t("create","interval");
x.t("create","non-iterable");
x.t("create","subclass");
x.t("example.pl.gs.int.color","uses");
x.t("_currentindex--","return");
x.t("enum","color");
x.t("enum","colorsequencable");
x.t("green","custom");
x.t("green","wanted");
x.t("green","blue");
x.t("instance","interval");
x.t("instance","dateunit.days");
x.t("bidirectional","gosu");
x.t("having","visit");
x.t("required","start");
x.t("required","methods");
x.t("manually-written","iterators");
x.t("manually-written","iterator");
x.t("normal","order");
x.t("java.lang.comparable","create");
x.t("java.lang.comparable","interface");
x.t("java.lang.comparable","interval");
x.t("enumerations","enumerations");
x.t("enumerations","automatically");
x.t("enumerations","gosu");
x.t("(sequenceable)","element");
x.t("void","colorinterval");
x.t("_currentindex","_currentindex--");
x.t("_currentindex","_currentindex");
x.t("_currentindex","startat");
x.t("_currentindex","int");
x.t("_currentindex","return");
x.t("topic","class");
x.t("discussed","custom");
x.t("later","topic");
x.t("uses","example.pl.gs.int.color");
x.t("uses","java.lang.integer");
x.t("uses","gw.lang.reflect.interval.iterableinterval");
x.t("uses","java.util.iterator");
x.t("uses","example.pl.gs.int.colorinterval");
x.t("(left)","endpoint");
x.t("text_val.select","link");
x.t("interface","complex");
x.t("interface","defines");
x.t("interface","fetch");
x.t("interface","implement");
x.t("interface","java.lang.comparable");
x.t("interface","interface");
x.t("interface","look");
x.t("interface","public");
x.t("interface","requirement");
x.t("interface","custom");
x.t("interface","methods");
x.t("interface","determine");
x.t("interface","cannot");
x.t("interface","important");
x.t("interface","override");
x.t("interface","isequenceable");
x.t("interface","java");
x.t("interface","non-iterable");
x.t("interface","sequenceableinterval");
x.t("look","unusual");
x.t("look","even");
x.t("mode","gosu");
x.t("necessary","methods");
x.t("iteratefromleft","iterator");
x.t("support","removing");
x.t("type","particularly");
x.t("type","iterableinterval");
x.t("type","create");
x.t("type","(sequenceable)");
x.t("type","items");
x.t("type","element");
x.t("type","add");
x.t("type","units");
x.t("type","writing");
x.t("type","custom");
x.t("type","function");
x.t("type","implements");
x.t("type","step");
x.t("type","value");
x.t("type","plan");
x.t("type","dateunit");
x.t("type","itself");
x.t("type","using");
x.t("type","java.lang.void");
x.t("type","contains");
x.t("basic","properties");
x.t("basic","types");
x.t("infinite","numbers");
x.t("open","interval");
x.t("open","(excluded)");
x.t("times","next");
x.t("left","right");
x.t("left","color");
x.t("lot","common");
x.t("public","interface");
x.t("(normally)","iterating");
x.t("operates","reverse");
x.t("leftendpoint.ordinal","leftclosed");
x.t("leftendpoint.ordinal","//");
x.t("however","circumstances");
x.t("however","gosu");
x.t("java.lang.iterable","interface");
x.t("yellow","green");
x.t("extend","abstractinterval");
x.t("automatically","implement");
x.t("requirement","intervals");
x.t("previousinsequence","step");
x.t("previousinsequence","stp");
x.t("really","means");
x.t("scratchpad","print");
x.t("colorsequenceinterval","custom");
x.t("iterators","items");
x.t("iterators","iterating");
x.t("iterators","easiest");
x.t("iterators","cases");
x.t("property","elements");
x.t("link","directly");
x.t("loop","declarations");
x.t("want","create");
x.t("want","iterate");
x.t("want","encapsulate");
x.t("items","implement");
x.t("items","interval");
x.t("items","sequenceable");
x.t("items","sequence");
x.t("items","following");
x.t("new","gw.lang.reflect.interval.sequenceableinterval");
x.t("new","coloriterator");
x.t("new","iterable");
x.t("new","reversecoloriterator");
x.t("new","colorinterval");
x.t("new","intervals");
x.t("new","class");
x.t("comparable","interface");
x.t("comparable","endpoint");
x.t("comparable","finally");
x.t("element","type");
x.t("element","index");
x.t("element","interval");
x.t("access","java");
x.t("single","step");
x.t("objects","optimize");
x.t("objects","mark");
x.t("java.lang.integer","enum");
x.t("java.lang.integer","uses");
x.t("start","--");
x.t("includes","theoretically");
x.t("color","right");
x.t("color","protected");
x.t("color","red");
x.t("color","return");
x.t("color","value");
x.t("color","interval");
x.t("color","stp");
x.t("color","values");
x.t("color","integer");
x.t("color","names");
x.t("color","var");
x.t("getfromleft","int");
x.t("messsage","gosu");
x.t("need","create");
x.t("need","override");
x.t("need","call");
x.t("list","predefined");
x.t("generics","implement");
x.t("generics","really");
x.t("generics","gosu");
x.t("generics","notice");
x.t("generics","syntax");
x.t("generics","class");
x.t("generics","across");
x.t("colorrange","new");
x.t("colorrange","print");
x.t("self-referential","methods");
x.t("able","return");
x.t("add","custom");
x.t("endpoint","closed");
x.t("endpoint","override");
x.t("endpoint","interval");
x.t("endpoint","sequenceable");
x.t("optimize","method");
x.t("beginning","(left)");
x.t("guide","intervals");
x.t("indigo","violet");
x.t("iterator","color");
x.t("iterator","next");
x.t("iterator","override");
x.t("iterator","classes");
x.t("iterator","reverse");
x.t("iterator","class");
x.t("remove","throw");
x.t("nextinsequence","method");
x.t("nextinsequence","step");
x.t("nextinsequence","stp");
x.t("units","interval");
x.t("false","colorrange");
x.t("false","false");
x.t("false","colorrangeopen");
x.t("writing","interval");
x.t("directly","implement");
x.t("directly","page");
x.t("iterable","interface");
x.t("iterable","simplify");
x.t("iterable","interval");
x.t("iterable","intervals");
x.t("circumstances","want");
x.t("circumstances","range");
x.t("requires","comparable");
x.t("requires","class");
x.t("declare","class");
x.t("handle","navigation");
x.t("true","false");
x.t("true","true");
x.t("text_val.focus","text_val.select");
x.t("common","coding");
x.t("common","concept");
x.t("range","real");
x.t("range","numbers");
x.t("creating","enumerations");
x.t("creating","custom");
x.t("creating","non-iterable");
x.t("demonstrates","creating");
x.t("forward","(normally)");
x.t("abstractinterval","myclass");
x.t("abstractinterval","parameterized");
x.t("gosu","needs");
x.t("gosu","enumerations");
x.t("gosu","scratchpad");
x.t("gosu","generics");
x.t("gosu","need");
x.t("gosu","requires");
x.t("gosu","reference");
x.t("gosu","java");
x.t("gosu","shortcuts");
x.t("iterate","across");
x.t("inclusive","range");
x.t("inclusive","theoretically");
x.t("follows","implement");
x.t("follows","type");
x.t("closed","interval");
x.t("closed","(included)");
x.t("manual","iterators");
x.t("constructor","construct");
x.t("constructor","args");
x.t("getfromright","int");
x.t("custom","iterable");
x.t("custom","interval");
x.t("custom","non-iterable");
x.t("iterating","forward");
x.t("iterating","reverse");
x.t("iterating","across");
x.t("enumeration","values");
x.t("enumeration","containing");
x.t("enumeration","class");
x.t("skip","every");
x.t("visit","elements");
x.t("startat","rightendpoint.ordinal");
x.t("startat","leftendpoint.ordinal");
x.t("startat","int");
x.t("startat","return");
x.t("startat","override");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("useful","iterable");
x.t("methods","example");
x.t("methods","implement");
x.t("methods","create");
x.t("methods","declare");
x.t("methods","iterable");
x.t("methods","define");
x.t("methods","return");
x.t("methods","isequenceable");
x.t("methods","iiterableinterval");
x.t("methods","interval");
x.t("methods","sequenceable");
x.t("inner","classes");
x.t("inner","class");
x.t("boolean","return");
x.t("boolean","rightopen");
x.t("boolean","rev");
x.t("boolean","super");
x.t("declarations","uses");
x.t("declarations","types");
x.t("declarations","called");
x.t("determine","iterable");
x.t("find","next");
x.t("standard","iterator");
x.t("reversecoloriterator","(startat)");
x.t("reversecoloriterator","extends");
x.t("descends","class");
x.t("colorrangeopen","new");
x.t("colorrangeopen","print");
x.t("confirm","type");
x.t("easiest","implement");
x.t("int","iindex");
x.t("int","construct");
x.t("int","_currentindex");
x.t("int","color");
x.t("int","colorsequencable");
x.t("int","super");
x.t("wanted","code");
x.t("concept","granularity");
x.t("three","dimensions");
x.t("colorinterval","construct");
x.t("colorinterval","constructor");
x.t("colorinterval","next");
x.t("colorinterval","extends");
x.t("colorinterval","information");
x.t("colorinterval","color.red");
x.t("colorinterval","class");
x.t("prints","red");
x.t("(backward)","implement");
x.t("simplify","common");
x.t("error","occurred");
x.t("notice","interface");
x.t("colors","--");
x.t("suppose","want");
x.t("next","implement");
x.t("next","create");
x.t("next","color");
x.t("next","methods");
x.t("next","previous");
x.t("next","value");
x.t("red","orange");
x.t("red","blue");
x.t("syntax","interface");
x.t("syntax","enforces");
x.t("especially","using");
x.t("know","jump");
x.t("finally","new");
x.t("means","class");
x.t("means","parameterized");
x.t("unit","previousnthinsequence");
x.t("unit","int");
x.t("unit","nextnthinsequence");
x.t("unit","java.lang.void");
x.t("unit","weeks");
x.t("jump","element");
x.t("throw","required");
x.t("throw","support");
x.t("guidewire_selectall","var");
x.t("written","manual");
x.t("iterates","example");
x.t("function","previousnthinsequence");
x.t("function","iteratefromleft");
x.t("function","previousinsequence");
x.t("function","getfromleft");
x.t("function","remove");
x.t("function","nextinsequence");
x.t("function","getfromright");
x.t("function","next");
x.t("function","guidewire_selectall");
x.t("function","nextnthinsequence");
x.t("function","iteratefromright");
x.t("function","hasnext");
x.t("implements","interface");
x.t("implements","iterator");
x.t("implements","isequenceable");
x.t("implements","gw.lang.reflect.interval.isequenceable");
x.t("define","iterator");
x.t("define","enumeration");
x.t("define","inner");
x.t("carefully","note");
x.t("different","types");
x.t("may","need");
x.t("cannot","gosu");
x.t("cannot","used");
x.t("cannot","modify");
x.t("gw.lang.reflect.interval.iterableinterval","uses");
x.t("starting","ending");
x.t("step","type");
x.t("step","methods");
x.t("step","unit");
x.t("step","amount");
x.t("step","value");
x.t("step","integer");
x.t("capitalization","type");
x.t("index","series");
x.t("colorsequencable.red","colorsequencable.blue");
x.t("(startat)","override");
x.t("(startat)","//");
x.t("types","iteration");
x.t("types","basic");
x.t("types","lot");
x.t("types","iterators");
x.t("types","circumstances");
x.t("types","especially");
x.t("types","intervals");
x.t("types","two");
x.t("leftopen","boolean");
x.t("leftopen","rightopen");
x.t("dimension","parameterization");
x.t("important","access");
x.t("important","note");
x.t("capability","handle");
x.t("java.util.iterator","class");
x.t("reference","guide");
x.t("code","implement");
x.t("code","look");
x.t("code","gosu");
x.t("code","intervals");
x.t("endpoints","includes");
x.t("endpoints","inclusive");
x.t("endpoints","starting");
x.t("1.001","iterating");
x.t("override","function");
x.t("override","hasnext");
x.t("return","instance");
x.t("return","iterators");
x.t("return","new");
x.t("return","standard");
x.t("return","colorsequencable.allvalues");
x.t("return","(_currentindex)");
x.t("return","two");
x.t("return","reverse");
x.t("return","color.allvalues");
x.t("rightclosed","override");
x.t("previous","items");
x.t("previous","elements");
x.t("100","times");
x.t("100","gosu");
x.t("java","interface");
x.t("java","types");
x.t("java","class");
x.t("java","java.lang.void");
x.t("isequenceable","interface");
x.t("isequenceable","nextinsequence");
x.t("isequenceable","follows");
x.t("isequenceable","extends");
x.t("isequenceable","package");
x.t("colorsequencable.allvalues","this.ordinal");
x.t("iiterableinterval","interface");
x.t("nth","item");
x.t("occurred","messsage");
x.t("null","example");
x.t("null","type");
x.t("null","false");
x.t("null","true");
x.t("null","leftopen");
x.t("shortcuts","discussed");
x.t("amount","example");
x.t("amount","type");
x.t("amount","optionally");
x.t("rightopen","boolean");
x.t("rightopen","rev");
x.t("interval","example");
x.t("interval","implement");
x.t("interval","interface");
x.t("interval","type");
x.t("interval","left");
x.t("interval","self-referential");
x.t("interval","endpoint");
x.t("interval","follows");
x.t("interval","iterate");
x.t("interval","red");
x.t("interval","suppose");
x.t("interval","written");
x.t("interval","cannot");
x.t("interval","types");
x.t("interval","mutually");
x.t("interval","orange");
x.t("interval","package");
x.t("interval","reverse");
x.t("interval","following");
x.t("interval","using");
x.t("interval","class");
x.t("interval","var");
x.t("interval","dynamically");
x.t("main","iterator");
x.t("main","colorinterval");
x.t("main","class");
x.t("main","difference");
x.t("value","define");
x.t("value","100");
x.t("value","null");
x.t("value","following");
x.t("unusual","gosu");
x.t("additional","methods");
x.t("colorsequencable.blue","null");
x.t("named","sequenceable");
x.t("startat--","return");
x.t("[i]","override");
x.t("[i]","note");
x.t("mutually","comparable");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("meaningless","create");
x.t("meaningless","information");
x.t("knows","find");
x.t("--","normal");
x.t("--","constructor");
x.t("--","reverse");
x.t("(excluded)","main");
x.t("extends","iterableinterval");
x.t("extends","coloriterator");
x.t("extends","type");
x.t("extends","isequenceable");
x.t("extends","main");
x.t("extends","subclass");
x.t("extends","following");
x.t("parameterization","carefully");
x.t("stp","iindex");
x.t("stp","override");
x.t("stp","null");
x.t("stp","integer");
x.t("stp","//print");
x.t("actually","class");
x.t("plan","example");
x.t("(_currentindex)","rightendpoint.ordinal");
x.t("orange","yellow");
x.t("takes","code");
x.t("third-party","library");
x.t("although","cannot");
x.t("page","error");
x.t("(included)","open");
x.t("sequenceable","type");
x.t("sequenceable","items");
x.t("sequenceable","objects");
x.t("sequenceable","iterable");
x.t("sequenceable","means");
x.t("sequenceable","interval");
x.t("sequenceable","sequenceable");
x.t("sequenceable","item");
x.t("sequence","sequenceable");
x.t("sequence","item");
x.t("nextnthinsequence","step");
x.t("nextnthinsequence","stp");
x.t("dimensions","type");
x.t("separate","dimensions");
x.t("rev","boolean");
x.t("rev","//print");
x.t("example.pl.gs.int.colorinterval","print");
x.t("typical","code");
x.t("typical","cases");
x.t("information","creating");
x.t("information","gosu");
x.t("information","inner");
x.t("granularity","terms");
x.t("violet","information");
x.t("violet","note");
x.t("violet","//");
x.t("removing","values");
x.t("intervals","implement");
x.t("intervals","however");
x.t("intervals","loop");
x.t("intervals","writing");
x.t("intervals","iterate");
x.t("intervals","custom");
x.t("intervals","useful");
x.t("intervals","next");
x.t("intervals","typical");
x.t("intervals","intervals");
x.t("intervals","non-iterable");
x.t("intervals","using");
x.t("non-iterable","example");
x.t("non-iterable","interval");
x.t("non-iterable","intervals");
x.t("values","red");
x.t("values","1.001");
x.t("values","interval");
x.t("values","//");
x.t("values","representing");
x.t("blue","open");
x.t("blue","indigo");
x.t("blue","closed");
x.t("blue","red");
x.t("gw.lang.reflect.interval.isequenceable","colorsequencable");
x.t("color.red","color.blue");
x.t("called","iterable");
x.t("encapsulate","inclusive");
x.t("ordered","color");
x.t("months","instance");
x.t("months","interface");
x.t("choose","integer");
x.t("print","red");
x.t("print","(i)");
x.t("args","construct");
x.t("args","//");
x.t("two","basic");
x.t("two","different");
x.t("two","endpoints");
x.t("predefined","ordered");
x.t("integer","void");
x.t("integer","type");
x.t("integer","unit");
x.t("integer","leftopen");
x.t("integer","typical");
x.t("integer","choose");
x.t("integer","date");
x.t("integer","java.lang.void");
x.t("integer","super");
x.t("date","interval");
x.t("dateunit","type");
x.t("note","example");
x.t("note","capitalization");
x.t("note","information");
x.t("note","parameterized");
x.t("classes","inner");
x.t("classes","confirm");
x.t("classes","main");
x.t("classes","class");
x.t("optionally","unit");
x.t("cases","pass");
x.t("cases","item");
x.t("example.pl.gs.int","uses");
x.t("itself","example");
x.t("correctly","methods");
x.t("//print","new");
x.t("mark","class");
x.t("real","numbers");
x.t("numbers","values");
x.t("numbers","non-iterable");
x.t("numbers","two");
x.t("numbers","even");
x.t("package","example.pl.gs.int");
x.t("package","example.pl.gosu.interval");
x.t("navigation","either");
x.t("reverse","mode");
x.t("reverse","iterator");
x.t("reverse","(backward)");
x.t("reverse","order");
x.t("reverse","class");
x.t("reverse","behavior");
x.t("call","nextinsequence");
x.t("subclass","iterableinterval");
x.t("subclass","sequenceableinterval");
x.t("order","iterator");
x.t("order","class");
x.t("iteratefromright","iterator");
x.t("loops","however");
x.t("theoretically","infinite");
x.t("ending","color");
x.t("ending","values");
x.t("following","example");
x.t("following","type");
x.t("following","code");
x.t("example.pl.gosu.interval","enum");
x.t("dateunit.days","units");
x.t("special","type");
x.t("elements","example");
x.t("elements","bidirectional");
x.t("elements","interval");
x.t("either","endpoint");
x.t("run","following");
x.t("leftclosed","startat");
x.t("leftclosed","override");
x.t("leftclosed","startat--");
x.t("used","loop");
x.t("using","manually-written");
x.t("using","gosu");
x.t("using","sequenceable");
x.t("class","coloriterator");
x.t("class","implement");
x.t("class","operates");
x.t("class","extend");
x.t("class","need");
x.t("class","able");
x.t("class","abstractinterval");
x.t("class","iterate");
x.t("class","reversecoloriterator");
x.t("class","descends");
x.t("class","colorinterval");
x.t("class","suppose");
x.t("class","know");
x.t("class","additional");
x.t("class","knows");
x.t("class","extends");
x.t("class","takes");
x.t("class","third-party");
x.t("class","information");
x.t("class","reverse");
x.t("class","package");
x.t("class","run");
x.t("class","parameterized");
x.t("class","object");
x.t("containing","possible");
x.t("//","required");
x.t("//","enumeration");
x.t("//","define");
x.t("//","return");
x.t("//","nth");
x.t("color.allvalues","rightendpoint.ordinal");
x.t("color.allvalues","leftendpoint.ordinal");
x.t("color.allvalues","[i]");
x.t("across","four");
x.t("across","implement");
x.t("across","loop");
x.t("across","list");
x.t("across","three");
x.t("across","colors");
x.t("across","iterates");
x.t("across","implements");
x.t("across","meaningless");
x.t("across","myclass");
x.t("terms","step");
x.t("pass","integer");
x.t("series","achieved");
x.t("this.ordinal","stp");
x.t("names","starting");
x.t("without","having");
x.t("behavior","may");
x.t("modify","directly");
x.t("myclass","objects");
x.t("myclass","class");
x.t("var","_currentindex");
x.t("var","colorrange");
x.t("var","startat");
x.t("var","text_val=eval");
x.t("var","colorrangeopen");
x.t("patterns","loops");
x.t("parameterized","element");
x.t("parameterized","using");
x.t("parameterized","across");
x.t("days","weeks");
x.t("achieved","single");
x.t("enforces","property");
x.t("color.blue","false");
x.t("color.blue","true");
x.t("sequenceableinterval","named");
x.t("sequenceableinterval","class");
x.t("representing","days");
x.t("java.lang.void","iindex");
x.t("java.lang.void","colorinterval");
x.t("java.lang.void","dimension");
x.t("java.lang.void","special");
x.t("java.lang.void","//");
x.t("java.lang.void","colorsequencable");
x.t("(i)","prints");
x.t("(i)","print");
x.t("even","readable");
x.t("even","values");
x.t("difference","iterable");
x.t("item","right");
x.t("item","type");
x.t("item","want");
x.t("item","beginning");
x.t("item","step");
x.t("dynamically","gosu");
x.t("weeks","months");
x.t("contains","values");
x.t("colorsequencable","implements");
x.t("colorsequencable","return");
x.t("colorsequencable","integer");
x.t("hasnext","boolean");
x.t("hasnext","next");
x.t("super","left");
x.t("super","(startat)");
x.t("object","across");
}
