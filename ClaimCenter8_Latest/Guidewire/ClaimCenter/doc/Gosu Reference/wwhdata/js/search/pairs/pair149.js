function FileData_Pairs(x)
{
x.t("example","demonstrates");
x.t("example","map");
x.t("example","suppose");
x.t("example","concise");
x.t("example","written");
x.t("example","sorts");
x.t("example","expression");
x.t("example","following");
x.t("example","var");
x.t("min","(proj)");
x.t("complex","gosu");
x.t("coding","style");
x.t("partitioning","collections");
x.t("four","keys");
x.t("method","example");
x.t("method","method");
x.t("method","available");
x.t("method","create");
x.t("method","always");
x.t("method","retained");
x.t("method","property");
x.t("method","default");
x.t("method","signature");
x.t("method","finds");
x.t("method","throws");
x.t("method","handle");
x.t("method","map");
x.t("method","empty");
x.t("method","especially");
x.t("method","collection");
x.t("method","instead");
x.t("method","powerful");
x.t("method","simply");
x.t("method","concatenates");
x.t("method","similar");
x.t("method","sorts");
x.t("method","generate");
x.t("method","takes");
x.t("method","used");
x.t("method","//");
x.t("method","returns");
x.t("method","unnecessary");
x.t("method","var");
x.t("method","generates");
x.t("available","collections");
x.t("available","methods");
x.t("flatmap","method");
x.t("flatmap","(proj)");
x.t("provide","block");
x.t("provide","gosu");
x.t("provide","note");
x.t("filterbykeys","(keyfilter)");
x.t("filterbyvalues","(valuefilter)");
x.t("properties","files");
x.t("properties","file");
x.t("properties","inner");
x.t("properties","format");
x.t("properties","terms");
x.t("(file)","writetopropertiesfile");
x.t("(file)","reads");
x.t("parameter","list.sortby");
x.t("integers","even");
x.t("notes","claim");
x.t("notes","property");
x.t("notes","exposures");
x.t("rather","new");
x.t("version","list");
x.t("version","following");
x.t("hashmap","object");
x.t("eachkey","(block)");
x.t("abcd","key");
x.t("abcd","abc");
x.t("abcd","tell");
x.t("abcd","mystrings.map");
x.t("abcd","words");
x.t("abcd","real-world");
x.t("abcd","ab");
x.t("abcd","similarly");
x.t("abcd","var");
x.t("strs.sort","str1");
x.t("taking","string");
x.t("claim","claim");
x.t("claim","generics");
x.t("claim","claim.publicid");
x.t("claim","publicid");
x.t("claim","//partition");
x.t("claim","var");
x.t("claim","object");
x.t("implement","iterable");
x.t("lists","available");
x.t("lists","map");
x.t("lists","arrays");
x.t("clear","mutation");
x.t("every","key");
x.t("every","key-value");
x.t("every","list");
x.t("every","value");
x.t("infers","return");
x.t("files","writetopropertiesfile");
x.t("nothing","second");
x.t("within","list");
x.t("//use","finder");
x.t("table","method");
x.t("table","lists");
x.t("description","count");
x.t("description","copy");
x.t("description","reverse");
x.t("description","allmatch");
x.t("description","general");
x.t("init","reducer");
x.t("create","new");
x.t("create","single");
x.t("create","block");
x.t("totypedarray","converts");
x.t("shuffles","list");
x.t("descending","order");
x.t("situation","code");
x.t("related","types");
x.t("hasmatch","(cond)");
x.t("(iter)","returns");
x.t("key","points");
x.t("key","filter");
x.t("key","map");
x.t("key","reduce");
x.t("key","return");
x.t("key","value");
x.t("key","case");
x.t("key","wrapped");
x.t("key","returns");
x.t("removewhere","removes");
x.t("freeze","returns");
x.t("always","single");
x.t("always","unique");
x.t("always","returns");
x.t("intensive","depending");
x.t("intensive","careful");
x.t("conciseness","good");
x.t("having","value");
x.t("instance","list");
x.t("java.lang.comparable","methods");
x.t("action","repeatedly");
x.t("arguments","key");
x.t("arguments","return");
x.t("abc","abcd");
x.t("abc","key");
x.t("abc","ab");
x.t("abc","expression");
x.t("abc","easily");
x.t("abc","var");
x.t("str1","str2");
x.t("improve","performance");
x.t("orderbydescending","(proj)");
x.t("creates","new");
x.t("creates","appropriate");
x.t("creates","copy");
x.t("current","map");
x.t("writetopropertiesfile","(file)");
x.t("writetopropertiesfile","file");
x.t("find-related","list");
x.t("str2","str1.length");
x.t("block\u2019s","argument");
x.t("easy-to-read","gosu");
x.t("converting","lists");
x.t("implemented","directly");
x.t("last","element");
x.t("last","returns");
x.t("last","item");
x.t("pair","map");
x.t("uses","type");
x.t("uses","collection");
x.t("strs","new");
x.t("line","gosu");
x.t("array.toset","convert");
x.t("text_val.select","link");
x.t("interface","java.lang.comparable");
x.t("interface","toautomap");
x.t("value.length","properties");
x.t("longerstrings","strs.where");
x.t("longerstrings","ab");
x.t("mystrings.sortby","str");
x.t("people","may");
x.t("points","list");
x.t("points","input");
x.t("tell","example");
x.t("necessary","types");
x.t("support","length");
x.t("errors","collections");
x.t("type","block\u2019s");
x.t("type","objects");
x.t("type","block");
x.t("type","name");
x.t("type","gosu");
x.t("type","map");
x.t("type","allow");
x.t("type","collection");
x.t("type","function");
x.t("type","omitted");
x.t("type","optional");
x.t("type","lengthsonly");
x.t("type","inference");
x.t("type","disjunction");
x.t("retainwherekeys","(keyfilter)");
x.t("evaluates","true");
x.t("thing","gosu");
x.t("satisfy","valuefilter");
x.t("satisfy","given");
x.t("satisfy","condition");
x.t("satisfy","keyfilter");
x.t("reverses","iterable");
x.t("reverses","collection");
x.t("orders","list");
x.t("key-value","pair");
x.t("remapping","retainwherekeys");
x.t("explicitly","type");
x.t("time","array");
x.t("time","statically");
x.t("calculation","during");
x.t("releases","following");
x.t("asiterable","returns");
x.t("retained","list");
x.t("sort","method");
x.t("sort","key");
x.t("sort","sort");
x.t("sort","string");
x.t("sort","sorts");
x.t("offending","elements");
x.t("ascending","order");
x.t("mystrings","however");
x.t("mystrings","new");
x.t("bb","abcd");
x.t("bb","abc");
x.t("bb","ab");
x.t("however","flatmap");
x.t("however","notice");
x.t("however","untyped");
x.t("interchangeably","no");
x.t("property","description");
x.t("property","array");
x.t("property","outer");
x.t("property","elements");
x.t("property","contains");
x.t("count","number");
x.t("count","returns");
x.t("default","collection");
x.t("default","value");
x.t("default","values");
x.t("removes","elements");
x.t("removes","entries");
x.t("original","list");
x.t("original","map");
x.t("original","value");
x.t("wraps","current");
x.t("apis","java.util.properties");
x.t("require","complex");
x.t("convert","lists");
x.t("convert","list");
x.t("convert","array");
x.t("link","directly");
x.t("objects","implement");
x.t("objects","last");
x.t("objects","objects");
x.t("objects","exposure");
x.t("objects","collection");
x.t("objects","previous");
x.t("objects","less");
x.t("objects","claim.exposures");
x.t("single","element");
x.t("single","items");
x.t("single","list");
x.t("single","given");
x.t("single","value");
x.t("single","intersect");
x.t("single","item");
x.t("element","always");
x.t("element","new");
x.t("element","list");
x.t("element","iterable");
x.t("element","collection");
x.t("element","maps");
x.t("element","comes");
x.t("thrown","sum");
x.t("thrown","tocollection");
x.t("new","list");
x.t("new","union");
x.t("new","map");
x.t("new","unmodifiable");
x.t("new","java.util.map");
x.t("new","collection");
x.t("new","value");
x.t("new","subtraction");
x.t("new","disjunction");
x.t("new","arraylist");
x.t("new","object");
x.t("comparable","value");
x.t("comparable","values");
x.t("comparable","object");
x.t("happening","place");
x.t("contents","map");
x.t("contents","print");
x.t("signature","takes");
x.t("items","lists");
x.t("items","list");
x.t("items","map");
x.t("items","produced");
x.t("items","array");
x.t("items","returns");
x.t("certain","criteria");
x.t("details","sorting");
x.t("want","gosu");
x.t("want","string");
x.t("want","return");
x.t("want","print");
x.t("among","list");
x.t("str1.length","str2.length");
x.t("relationship","types");
x.t("loop","using");
x.t("extracts","note");
x.t("block","provide");
x.t("block","flatmap");
x.t("block","every");
x.t("block","key");
x.t("block","asiterable");
x.t("block","extracts");
x.t("block","list");
x.t("block","simple");
x.t("block","exactly");
x.t("block","argument");
x.t("block","perform");
x.t("block","string");
x.t("block","input");
x.t("block","return");
x.t("block","takes");
x.t("block","meaning");
x.t("block","two");
x.t("block","based");
x.t("block","returns");
x.t("satisfies","condition");
x.t("sortby","method");
x.t("sortby","sortbydescending");
x.t("sortby","sorts");
x.t("delimiter","minby");
x.t("delimiter","join");
x.t("toset","converts");
x.t("printing","example");
x.t("size","properties");
x.t("size","mean");
x.t("messsage","gosu");
x.t("list","example");
x.t("list","method");
x.t("list","notes");
x.t("list","freeze");
x.t("list","key");
x.t("list","creates");
x.t("list","element");
x.t("list","want");
x.t("list","objects");
x.t("list","items");
x.t("list","single");
x.t("list","processor");
x.t("list","specified");
x.t("list","faster");
x.t("list","average");
x.t("list","argument");
x.t("list","methods");
x.t("list","place");
x.t("list","strings");
x.t("list","partition");
x.t("list","empty");
x.t("list","orderby");
x.t("list","string");
x.t("list","array");
x.t("list","input");
x.t("list","length");
x.t("list","advantage");
x.t("list","fold");
x.t("list","simply");
x.t("list","calling");
x.t("list","together");
x.t("list","similar");
x.t("list","already");
x.t("list","sorts");
x.t("list","expression");
x.t("list","singlewhere");
x.t("list","ordered");
x.t("list","two");
x.t("list","note");
x.t("list","copy");
x.t("list","based");
x.t("list","cases");
x.t("list","reverse");
x.t("list","elements");
x.t("list","following");
x.t("list","using");
x.t("list","calculated");
x.t("list","shuffle");
x.t("list","str.length");
x.t("list","claims");
x.t("list","var");
x.t("list","contains");
x.t("file","readfrompropertiesfile");
x.t("file","comments");
x.t("file","java");
x.t("need","find");
x.t("need","array");
x.t("finds","last");
x.t("finds","no");
x.t("found","warning");
x.t("generics","generics");
x.t("generics","allow");
x.t("generics","syntax");
x.t("generics","notation");
x.t("infer","argument");
x.t("again","equivalent");
x.t("array.tolist","join");
x.t("col.haselements","returns");
x.t("sum","(proj)");
x.t("sum","numeric");
x.t("eachwithindex","iterates");
x.t("clone","original");
x.t("(mapperblock)","returns");
x.t("strs.firstwhere","str");
x.t("resortedstrings.each","str");
x.t("actions","collections");
x.t("assign","return");
x.t("strlengths.each","len");
x.t("expansion","sizes");
x.t("expansion","feature");
x.t("during","flat");
x.t("guide","collections");
x.t("thenbydescending","(proj)");
x.t("filter","block");
x.t("filter","name");
x.t("subsections","describe");
x.t("testing","code");
x.t("simple","block");
x.t("simple","function");
x.t("simple","powerful");
x.t("simple","cases");
x.t("results","block");
x.t("results","unique");
x.t("results","note");
x.t("collections","related");
x.t("collections","conciseness");
x.t("collections","enhancement");
x.t("collections","arrays");
x.t("collections","strings");
x.t("collections","blocks");
x.t("collections","suppose");
x.t("collections","first");
x.t("collections","(cond)");
x.t("collections","probably");
x.t("throws","illegalstateexception");
x.t("throws","runtime");
x.t("tolist","collection");
x.t("false","filterbykeys");
x.t("false","filterbyvalues");
x.t("false","earlier");
x.t("false","mapvalues");
x.t("false","retainwherevalues");
x.t("false","return");
x.t("len","simple");
x.t("len","print");
x.t("len","//");
x.t("sure","output");
x.t("flat","mapping");
x.t("directly","collection");
x.t("directly","page");
x.t("iterable","satisfy");
x.t("iterable","objects");
x.t("iterable","single");
x.t("iterable","new");
x.t("iterable","iterable");
x.t("iterable","words");
x.t("iterable","additional");
x.t("iterable","value");
x.t("iterable","copy");
x.t("iterable","object");
x.t("true","need");
x.t("true","false");
x.t("true","map");
x.t("true","collection");
x.t("true","first");
x.t("true","firstwhere");
x.t("true","elements");
x.t("true","following");
x.t("built","java");
x.t("converts","collection");
x.t("processor","intensive");
x.t("handle","rest");
x.t("specified","list");
x.t("lengthstostringsmap","mystrings.partition");
x.t("lengthstostringsmap","mystrings.partitionuniquely");
x.t("lengthstostringsmap","contains");
x.t("commas","joinedstring");
x.t("e.notes","next");
x.t("e.notes","generates");
x.t("text_val.focus","text_val.select");
x.t("no","errors");
x.t("no","value");
x.t("no","elements");
x.t("no","matching");
x.t("union","two");
x.t("union","(col)");
x.t("name","create");
x.t("name","destructive");
x.t("name","explicit");
x.t("common","uses");
x.t("demonstrates","method");
x.t("demonstrates","find");
x.t("resulting","map");
x.t("faster","performance");
x.t("gosu","coding");
x.t("gosu","infers");
x.t("gosu","however");
x.t("gosu","loop");
x.t("gosu","block");
x.t("gosu","generics");
x.t("gosu","find");
x.t("gosu","simply");
x.t("gosu","reference");
x.t("gosu","code");
x.t("gosu","adds");
x.t("gosu","collection-related");
x.t("gosu","knows");
x.t("gosu","takes");
x.t("gosu","contains");
x.t("illegalstateexception","thrown");
x.t("illegalstateexception","element");
x.t("constructor","automap");
x.t("changed","result");
x.t("iterate","list");
x.t("returning","length");
x.t("typed","block");
x.t("typed","string");
x.t("typed","compile");
x.t("typed","using");
x.t("exactly","argument");
x.t("performance","sure");
x.t("performance","case");
x.t("allnotes","myclaim.exposures.flatmap");
x.t("average","(selector)");
x.t("average","numeric");
x.t("comparison","among");
x.t("comparison","methods");
x.t("argument","key");
x.t("argument","type");
x.t("argument","original");
x.t("argument","string");
x.t("argument","compile");
x.t("argument","value");
x.t("argument","called");
x.t("argument","implicit");
x.t("argument","returns");
x.t("perform","action");
x.t("perform","arbitrary");
x.t("perform","task");
x.t("frequently","need");
x.t("iterating","across");
x.t("methods","method");
x.t("methods","implemented");
x.t("methods","sort");
x.t("methods","block");
x.t("methods","list");
x.t("methods","filter");
x.t("methods","collections");
x.t("methods","iterable");
x.t("methods","built");
x.t("methods","gosu");
x.t("methods","methods");
x.t("methods","map");
x.t("methods","collection");
x.t("methods","function");
x.t("methods","finding");
x.t("methods","instead");
x.t("methods","simply");
x.t("methods","retain");
x.t("methods","java");
x.t("methods","sorting");
x.t("methods","described");
x.t("methods","cases");
x.t("methods","following");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("none","flatmap");
x.t("none","found");
x.t("subtract","returns");
x.t("provides","handling");
x.t("filtering","remapping");
x.t("useful","partition");
x.t("inner","collections");
x.t("inner","collection");
x.t("haselements","interacts");
x.t("haselements","returns");
x.t("place","rather");
x.t("place","descending");
x.t("place","sort");
x.t("place","ascending");
x.t("place","sortby");
x.t("place","return");
x.t("place","traditional");
x.t("place","note");
x.t("projection","comparable");
x.t("mutation","happening");
x.t("readfrompropertiesfile","(file)");
x.t("find","claim");
x.t("find","items");
x.t("find","list");
x.t("find","queries");
x.t("find","first");
x.t("find","number");
x.t("find","expressions");
x.t("find","easier");
x.t("find","query");
x.t("strs.where","str");
x.t("makes","result");
x.t("set.tolist","array.tolist");
x.t("enhancement","methods");
x.t("enhancement","reference");
x.t("map","example");
x.t("map","four");
x.t("map","method");
x.t("map","claim");
x.t("map","create");
x.t("map","interface");
x.t("map","bb");
x.t("map","block");
x.t("map","file");
x.t("map","clone");
x.t("map","changed");
x.t("map","provides");
x.t("map","string");
x.t("map","statically");
x.t("map","different");
x.t("map","variable");
x.t("map","keys");
x.t("map","(proj)");
x.t("map","values");
x.t("map","integer");
x.t("map","copy");
x.t("map","naturally");
x.t("map","following");
x.t("map","class");
x.t("map","containing");
x.t("map","modify");
x.t("map","without");
x.t("map","contains");
x.t("partition","method");
x.t("partition","map");
x.t("partition","(proj)");
x.t("partitionuniquely","method");
x.t("partitionuniquely","(proj)");
x.t("destructive","methods");
x.t("writes","contents");
x.t("matched","condition");
x.t("strings","find");
x.t("strings","map");
x.t("strings","equivalent");
x.t("strings","length");
x.t("strings","var");
x.t("rest","details");
x.t("resortedstrings","mystrings.sortby");
x.t("strlengths","again");
x.t("strlengths","mystrings.map");
x.t("produced","value");
x.t("arrays","flatmap");
x.t("arrays","single");
x.t("arrays","sets");
x.t("arrays","addition");
x.t("arrays","dynamically");
x.t("exposures","claim");
x.t("exposures","property");
x.t("exposures","exposure.notes");
x.t("empty","haselements");
x.t("empty","firstwhere");
x.t("empty","lastwhere");
x.t("orderby","method");
x.t("orderby","(proj)");
x.t("orderby","note");
x.t("string","abcd");
x.t("string","abc");
x.t("string","bb");
x.t("string","delimiter");
x.t("string","list");
x.t("string","returning");
x.t("string","gosu");
x.t("string","argument");
x.t("string","methods");
x.t("string","string");
x.t("string","ab");
x.t("string","value");
x.t("string","values");
x.t("string","maps");
x.t("string","classes");
x.t("string","using");
x.t("string","returns");
x.t("string","object");
x.t("sortbydescending","retained");
x.t("sortbydescending","methods");
x.t("sortbydescending","function");
x.t("sortbydescending","sorts");
x.t("array","integers");
x.t("array","property");
x.t("array","list");
x.t("array","expansion");
x.t("array","union");
x.t("array","exposure");
x.t("array","lengths");
x.t("array","collection");
x.t("array","calling");
x.t("array","together");
x.t("array","elements");
x.t("unmodifiable","version");
x.t("write","simple");
x.t("write","comments");
x.t("str2.length","although");
x.t("allow","methods");
x.t("allow","flexible");
x.t("int","result");
x.t("int","lengthsonly");
x.t("pairs","block");
x.t("sets","necessary");
x.t("sets","collection");
x.t("exposure","notes");
x.t("exposure","objects");
x.t("exposure","object");
x.t("countwhere","(cond)");
x.t("rely","comparison");
x.t("second","method");
x.t("second","otherwise");
x.t("characters","parameter");
x.t("characters","string");
x.t("earlier","sorting");
x.t("understand","sortby");
x.t("mystrings.map","str");
x.t("input","list");
x.t("input","string");
x.t("input","values");
x.t("indirection","having");
x.t("claim.publicid","value");
x.t("attribute","method");
x.t("addition","flatmap");
x.t("selected","collection");
x.t("selected","values");
x.t("functions","processor");
x.t("lengths","string");
x.t("lengths","even");
x.t("error","occurred");
x.t("mapvalues","(mapperblock)");
x.t("approaches","may");
x.t("queries","find");
x.t("blocks","create");
x.t("blocks","useful");
x.t("notice","explicitly");
x.t("equivalent","people");
x.t("equivalent","gosu");
x.t("java.util.map","key/value");
x.t("sizes","length");
x.t("mapped","new");
x.t("destructively","removes");
x.t("origmap","hello");
x.t("suppose","want");
x.t("suppose","array");
x.t("suppose","input");
x.t("suppose","collection");
x.t("suppose","data");
x.t("operators","cases");
x.t("transforms","value");
x.t("syntax","collection");
x.t("syntax","arraylist");
x.t("especially","true");
x.t("know","block");
x.t("outer","collection");
x.t("next","pass");
x.t("collection","min");
x.t("collection","method");
x.t("collection","provide");
x.t("collection","flatmap");
x.t("collection","totypedarray");
x.t("collection","satisfy");
x.t("collection","single");
x.t("collection","objects");
x.t("collection","satisfies");
x.t("collection","toset");
x.t("collection","list");
x.t("collection","eachwithindex");
x.t("collection","throws");
x.t("collection","methods");
x.t("collection","enhancement");
x.t("collection","map");
x.t("collection","partitionuniquely");
x.t("collection","exposures");
x.t("collection","empty");
x.t("collection","orderby");
x.t("collection","array");
x.t("collection","string");
x.t("collection","countwhere");
x.t("collection","mapped");
x.t("collection","suppose");
x.t("collection","collection");
x.t("collection","iterates");
x.t("collection","index");
x.t("collection","match");
x.t("collection","return");
x.t("collection","matches");
x.t("collection","keys");
x.t("collection","already");
x.t("collection","values");
x.t("collection","case");
x.t("collection","enhancements");
x.t("collection","based");
x.t("collection","created");
x.t("collection","elements");
x.t("collection","returns");
x.t("collection","pure");
x.t("collection","thenby");
x.t("collection","object");
x.t("first","element");
x.t("first","write");
x.t("first","elements");
x.t("first","returns");
x.t("first","item");
x.t("minimum","selected");
x.t("minimum","collection");
x.t("concise","easy-to-read");
x.t("concise","syntax");
x.t("concise","code");
x.t("concise","easier");
x.t("feature","gosu");
x.t("guidewire_selectall","var");
x.t("number","list");
x.t("number","characters");
x.t("number","keys");
x.t("number","elements");
x.t("seed","value");
x.t("iterates","element");
x.t("powerset","returns");
x.t("written","var");
x.t("sortedstrs","strs.sort");
x.t("function","taking");
x.t("function","int");
x.t("function","guidewire_selectall");
x.t("function","except");
x.t("(selector)","returns");
x.t("better","method");
x.t("better","assign");
x.t("better","testing");
x.t("better","null");
x.t("better","compute");
x.t("col","null");
x.t("max","(proj)");
x.t("maximum","selected");
x.t("maximum","collection");
x.t("implements","map");
x.t("eachvalue","(block)");
x.t("retainwherevalues","(valuefilter)");
x.t("comments","properties");
x.t("comments","writes");
x.t("length","line");
x.t("length","however");
x.t("length","size");
x.t("length","collections");
x.t("length","string");
x.t("length","var");
x.t("statically","typed");
x.t("str:string","str.length");
x.t("words","key");
x.t("words","list");
x.t("different","type");
x.t("different","sortby");
x.t("different","sortbydescending");
x.t("different","extracted");
x.t("different","values");
x.t("(type)","returns");
x.t("minby","returns");
x.t("cannot","chained");
x.t("automap","object");
x.t("reads","contents");
x.t("finding","data");
x.t("whether","approaches");
x.t("may","find");
x.t("may","better");
x.t("expressions","sorting");
x.t("straightforward","require");
x.t("define","relationship");
x.t("advantage","list");
x.t("unique","partitionuniquely");
x.t("unique","indirection");
x.t("reduce","init");
x.t("index","join");
x.t("aware","sortby");
x.t("instead","sort");
x.t("instead","following");
x.t("powerful","results");
x.t("powerful","types");
x.t("powerful","cases");
x.t("publicid","values");
x.t("extracted","arrays");
x.t("arbitrary","potentially-complex");
x.t("types","arguments");
x.t("types","convert");
x.t("types","collections");
x.t("types","enhancement");
x.t("types","repeated");
x.t("returned","collections");
x.t("returned","otherwise");
x.t("match","map");
x.t("match","given");
x.t("fold","accumulates");
x.t("handling","default");
x.t("format","using");
x.t("compile","time");
x.t("keyword","var");
x.t("real-world","situation");
x.t("list.toset","array.toset");
x.t("ordering","rely");
x.t("reducer","accumulates");
x.t("initial","seed");
x.t("simply","infer");
x.t("simply","iterate");
x.t("simply","return");
x.t("simply","called");
x.t("omitted","gosu");
x.t("explicit","code");
x.t("calling","set.tolist");
x.t("calling","list.toset");
x.t("reference","guide");
x.t("reference","collections");
x.t("retain","name");
x.t("valuefilter","expression");
x.t("code","//use");
x.t("code","type");
x.t("code","gosu");
x.t("code","array");
x.t("code","concise");
x.t("code","powerful");
x.t("code","safety");
x.t("code","specifying");
x.t("code","appropriate");
x.t("code","cases");
x.t("code","compare");
x.t("code","var");
x.t("ab","key");
x.t("ab","abc");
x.t("ab","first");
x.t("ab","ab");
x.t("ab","var");
x.t("end","code");
x.t("task","input");
x.t("return","creates");
x.t("return","type");
x.t("return","new");
x.t("return","comparable");
x.t("return","results");
x.t("return","true");
x.t("return","no");
x.t("return","first");
x.t("return","null");
x.t("return","value");
x.t("return","values");
x.t("return","otherwise");
x.t("return","entirely");
x.t("return","elements");
x.t("safety","statically-typed");
x.t("adds","enhancements");
x.t("previous","releases");
x.t("(cond)","element");
x.t("(cond)","returns");
x.t("given","type");
x.t("given","block");
x.t("given","initial");
x.t("given","value");
x.t("given","condition");
x.t("given","criteria");
x.t("matches","given");
x.t("matches","criteria");
x.t("produces","output");
x.t("claimsbyid","map");
x.t("claimsbyid","claims.partitionuniquely");
x.t("mean","thing");
x.t("java","properties");
x.t("java","interface");
x.t("java","collection-related");
x.t("sorting","example");
x.t("sorting","collections");
x.t("sorting","aware");
x.t("sorting","ordering");
x.t("together","delimiter");
x.t("together","string");
x.t("together","separated");
x.t("(defaultvalueblock)","returns");
x.t("whose","keys");
x.t("whose","values");
x.t("java.io.file","object");
x.t("greater","less");
x.t("variable","uses");
x.t("variable","lengthstostringsmap");
x.t("variable","call");
x.t("repeated","actions");
x.t("occurred","messsage");
x.t("null","list");
x.t("null","no");
x.t("null","none");
x.t("null","first");
x.t("null","collection");
x.t("null","values");
x.t("null","similarly");
x.t("firstwhere","method");
x.t("firstwhere","finds");
x.t("firstwhere","methods");
x.t("firstwhere","(cond)");
x.t("origmap.mapvalues","value");
x.t("consider","whether");
x.t("compared","greater");
x.t("less","operators");
x.t("less","straightforward");
x.t("keys","satisfy");
x.t("keys","original");
x.t("keys","list");
x.t("keys","results");
x.t("keys","map");
x.t("keys","collection");
x.t("keys","values");
x.t("keys","elements");
x.t("(keyfilter)","destructively");
x.t("(keyfilter)","returns");
x.t("include","integer");
x.t("mystrings.partition","str:string");
x.t("mystrings.partitionuniquely","str:string");
x.t("concatenates","elements");
x.t("additional","methods");
x.t("value","example");
x.t("value","eachkey");
x.t("value","abcd");
x.t("value","abc");
x.t("value","value.length");
x.t("value","longerstrings");
x.t("value","comparable");
x.t("value","block");
x.t("value","filter");
x.t("value","perform");
x.t("value","filtering");
x.t("value","makes");
x.t("value","map");
x.t("value","attribute");
x.t("value","suppose");
x.t("value","max");
x.t("value","eachvalue");
x.t("value","cannot");
x.t("value","returned");
x.t("value","return");
x.t("value","claimsbyid");
x.t("value","firstlongerstr");
x.t("value","appropriate");
x.t("value","lengthsonly");
x.t("value","values");
x.t("value","note");
x.t("value","based");
x.t("value","wrapped");
x.t("value","reverse");
x.t("value","mapping");
x.t("value","even");
x.t("similar","objects");
x.t("similar","array");
x.t("interacts","better");
x.t("usage","count");
x.t("power","freeze");
x.t("easier","understand");
x.t("easier","read");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("collection-related","types");
x.t("collection-related","code");
x.t("already","type");
x.t("already","list");
x.t("already","ordered");
x.t("eachkeyandvalue","(block)");
x.t("depending","context");
x.t("knows","block");
x.t("condition","hasmatch");
x.t("condition","haselements");
x.t("condition","returned");
x.t("condition","null");
x.t("condition","returns");
x.t("condition","wheretypeis");
x.t("sorts","original");
x.t("sorts","list");
x.t("sorts","place");
x.t("sorts","strings");
x.t("sorts","opposite");
x.t("repeatedly","eachkeyandvalue");
x.t(".each","len");
x.t("exception","converting");
x.t("generate","single");
x.t("process","array");
x.t("expression","key");
x.t("expression","col.haselements");
x.t("expression","transforms");
x.t("expression","col");
x.t("expression","return");
x.t("expression","returns");
x.t("expression","str.length");
x.t("takes","default");
x.t("takes","block");
x.t("takes","list");
x.t("takes","argument");
x.t("takes","map");
x.t("takes","string");
x.t("takes","java.io.file");
x.t("takes","two");
x.t("takes","elements");
x.t("takes","item");
x.t("runs","block");
x.t("hello","var");
x.t("newmap","origmap.mapvalues");
x.t("firstlongerstr","strs.firstwhere");
x.t("firstlongerstr","ab");
x.t("although","method");
x.t("read","partitioning");
x.t("represent","element");
x.t("notation","flatmap");
x.t("page","error");
x.t("singlewhere","(cond)");
x.t("str","produces");
x.t("str","print");
x.t("str","str.length");
x.t("context","code");
x.t("output","block");
x.t("output","ab");
x.t("specifying","type");
x.t("good","gosu");
x.t("good","bad");
x.t("subtraction","collection");
x.t("data","collections");
x.t("data","following");
x.t("query","may");
x.t("information","find");
x.t("optional","good");
x.t("claim.exposures","property");
x.t("potentially-complex","calculation");
x.t("accumulates","values");
x.t("lastwhere","method");
x.t("lastwhere","(cond)");
x.t("meaning","constructor");
x.t("appropriate","method");
x.t("appropriate","key");
x.t("appropriate","type");
x.t("result","type");
x.t("result","element");
x.t("result","block");
x.t("result","map");
x.t("result","call");
x.t("probably","frequently");
x.t("opposite","order");
x.t("lengthsonly","mystrings.map");
x.t("lengthsonly","statically");
x.t("lengthsonly","end");
x.t("lengthsonly","variable");
x.t("flexible","concise");
x.t("inference","improve");
x.t("inference","simple");
x.t("inference","statically");
x.t("traditional","gosu");
x.t("values","example");
x.t("values","method");
x.t("values","key");
x.t("values","type");
x.t("values","satisfy");
x.t("values","bb");
x.t("values","single");
x.t("values","iterable");
x.t("values","perform");
x.t("values","map");
x.t("values","selected");
x.t("values","collection");
x.t("values","length");
x.t("values","return");
x.t("values","compared");
x.t("values","include");
x.t("values","information");
x.t("values","based");
x.t("values","entirely");
x.t("values","following");
x.t("values","using");
x.t("values","flattens");
x.t("values","claims");
x.t("values","locale-sensitive");
x.t("non-true","value");
x.t("(proj)","maps");
x.t("(proj)","partitions");
x.t("(proj)","additionally");
x.t("(proj)","returns");
x.t("join","method");
x.t("join","items");
x.t("join","joins");
x.t("join","elements");
x.t("chained","series");
x.t("(valuefilter)","destructively");
x.t("(valuefilter)","returns");
x.t("case","array");
x.t("case","know");
x.t("case","number");
x.t("runtime","exception");
x.t("joinedstring","array.join");
x.t("described","following");
x.t("maps","key");
x.t("maps","default");
x.t("maps","element");
x.t("maps","new");
x.t("intersect","(iter)");
x.t("ordered","block");
x.t("ordered","orderby");
x.t("ordered","given");
x.t("partitions","collection");
x.t("maxby","returns");
x.t("java.util.properties","method");
x.t("print","contents");
x.t("print","resortedstrings.each");
x.t("print","len");
x.t("print","number");
x.t("print","str");
x.t("called","sort");
x.t("called","mystrings");
x.t("key/value","pairs");
x.t("claims.partitionuniquely","claim");
x.t("enhancements","convert");
x.t("enhancements","collection");
x.t("structure","claim");
x.t("otherwise","create");
x.t("otherwise","illegalstateexception");
x.t("otherwise","copy");
x.t("otherwise","returns");
x.t("two","arguments");
x.t("two","items");
x.t("two","collections");
x.t("two","collection");
x.t("two","values");
x.t("two","elements");
x.t("note","flatmap");
x.t("note","objects");
x.t("note","resulting");
x.t("note","collection");
x.t("note","different");
x.t("integer","string");
x.t("integer","integer");
x.t("integer","var");
x.t("classes","support");
x.t("copy","creates");
x.t("copy","list");
x.t("copy","map");
x.t("copy","collection");
x.t("copy","powerset");
x.t("copy","values");
x.t("copy","returns");
x.t("numeric","values");
x.t("joins","elements");
x.t("based","certain");
x.t("based","block");
x.t("based","projection");
x.t("based","return");
x.t("based","value");
x.t("wrapped","within");
x.t("wrapped","maps");
x.t("cases","comparison");
x.t("cases","iterating");
x.t("cases","functions");
x.t("cases","better");
x.t("cases","code");
x.t("cases","general");
x.t("easily","resort");
x.t("comes","second");
x.t("implicit","array");
x.t("reverse","reverses");
x.t("reverse","orders");
x.t("reverse","ordered");
x.t("created","offending");
x.t("order","methods");
x.t("order","note");
x.t("mapping","block");
x.t("mapping","process");
x.t("mapping","data");
x.t("mapping","series");
x.t("call","method");
x.t("call","value");
x.t("entirely","new");
x.t("entirely","different");
x.t("naturally","define");
x.t("following","example");
x.t("following","table");
x.t("following","subsections");
x.t("following","demonstrates");
x.t("following","gosu");
x.t("following","structure");
x.t("following","var");
x.t("elements","example");
x.t("elements","satisfy");
x.t("elements","block");
x.t("elements","iterable");
x.t("elements","inner");
x.t("elements","array");
x.t("elements","outer");
x.t("elements","collection");
x.t("elements","better");
x.t("elements","match");
x.t("elements","returned");
x.t("elements","given");
x.t("elements","together");
x.t("elements","returns");
x.t("elements","removed");
x.t("compute","values");
x.t("except","sorts");
x.t("untyped","argument");
x.t("statically-typed","code");
x.t("style","type");
x.t("used","place");
x.t("separated","commas");
x.t("array.join","flat");
x.t("allmatch","(cond)");
x.t("additionally","orders");
x.t("additionally","reverse");
x.t("disjunction","collection");
x.t("disjunction","returns");
x.t("general","sort");
x.t("general","usage");
x.t("class","implements");
x.t("toautomap","(defaultvalueblock)");
x.t("using","type");
x.t("using","apis");
x.t("using","generics");
x.t("using","gosu");
x.t("using","partition");
x.t("using","blocks");
x.t("using","keyword");
x.t("similarly","sortbydescending");
x.t("similarly","lastwhere");
x.t("warning","find-related");
x.t("//","join");
x.t("//","maybe");
x.t("maybe","strlengths");
x.t("containing","lengths");
x.t("calculated","value");
x.t("exposure.notes","properties");
x.t("returns","hashmap");
x.t("returns","nothing");
x.t("returns","instance");
x.t("returns","last");
x.t("returns","sort");
x.t("returns","default");
x.t("returns","new");
x.t("returns","list");
x.t("returns","sum");
x.t("returns","false");
x.t("returns","true");
x.t("returns","no");
x.t("returns","average");
x.t("returns","map");
x.t("returns","int");
x.t("returns","array");
x.t("returns","collection");
x.t("returns","first");
x.t("returns","minimum");
x.t("returns","number");
x.t("returns","maximum");
x.t("returns","automap");
x.t("returns","null");
x.t("returns","power");
x.t("returns","value");
x.t("returns","non-true");
x.t("returns","elements");
x.t("returns","intersection");
x.t("tocollection","iterable");
x.t("intersection","two");
x.t("(col)","returns");
x.t("criteria","method");
x.t("criteria","firstwhere");
x.t("criteria","var");
x.t("criteria","retainwhere");
x.t("series","clear");
x.t("series","collections");
x.t("arraylist","string");
x.t("resort","list");
x.t("compare","two");
x.t("across","collections");
x.t("bad","depending");
x.t("pass","block");
x.t("myclaim.exposures.flatmap","e.notes");
x.t("terms","interchangeably");
x.t("pure","iterable");
x.t("modify","original");
x.t("(block)","runs");
x.t("without","entries");
x.t("unnecessary","always");
x.t("finder","find");
x.t("//partition","list");
x.t("var","strs");
x.t("var","longerstrings");
x.t("var","mystrings");
x.t("var","lengthstostringsmap");
x.t("var","allnotes");
x.t("var","text_val=eval");
x.t("var","resortedstrings");
x.t("var","strlengths");
x.t("var","origmap");
x.t("var","sortedstrs");
x.t("var","claimsbyid");
x.t("var","newmap");
x.t("var","firstlongerstr");
x.t("var","lengthsonly");
x.t("var","claims");
x.t("flattens","single");
x.t("wheretypeis","(type)");
x.t("shuffle","shuffles");
x.t("describe","common");
x.t("str.length","evaluates");
x.t("str.length","want");
x.t("str.length","strlengths.each");
x.t("str.length","true");
x.t("str.length","variable");
x.t("str.length","value");
x.t("str.length",".each");
x.t("str.length","result");
x.t("list.sortby","method");
x.t("claims","find");
x.t("claims","represent");
x.t("claims","var");
x.t("even","type");
x.t("even","original");
x.t("even","printing");
x.t("even","expression");
x.t("thenby","(proj)");
x.t("retainwhere","removes");
x.t("removed","subtract");
x.t("entries","whose");
x.t("careful","consider");
x.t("generates","single");
x.t("generates","different");
x.t("contains","notes");
x.t("contains","list");
x.t("contains","enhancement");
x.t("contains","map");
x.t("contains","array");
x.t("contains","keys");
x.t("object","removewhere");
x.t("object","type");
x.t("object","wraps");
x.t("object","property");
x.t("object","block");
x.t("object","e.notes");
x.t("object","exposures");
x.t("object","write");
x.t("object","already");
x.t("object","maxby");
x.t("object","copy");
x.t("object","returns");
x.t("object","even");
x.t("locale-sensitive","orderbydescending");
x.t("locale-sensitive","thenbydescending");
x.t("locale-sensitive","tolist");
x.t("locale-sensitive","methods");
x.t("locale-sensitive","partition");
x.t("locale-sensitive","sortbydescending");
x.t("locale-sensitive","mapping");
x.t("keyfilter","expression");
x.t("item","every");
x.t("item","original");
x.t("item","matched");
x.t("item","matches");
x.t("matching","items");
x.t("dynamically","using");
}
