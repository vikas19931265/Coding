function FileData_Pairs(x)
{
x.t("equal","comparison");
x.t("equal","notequals");
x.t("equal","value");
x.t("equal","lessthan");
x.t("passed","compare");
x.t("example","query.comparenotin");
x.t("example","substring");
x.t("example","simple");
x.t("example","query.comparein");
x.t("example","query.contains");
x.t("example","following");
x.t("example","query.startswith");
x.t("example","var");
x.t("ignore","case");
x.t("supports","string");
x.t("included","result");
x.t("method","supports");
x.t("method","greaterthanorequals");
x.t("method","arguments");
x.t("method","greaterthan");
x.t("method","lessthanorequals");
x.t("method","used");
x.t("method","pass");
x.t("method","compare");
x.t("greaterthanorequals","matches");
x.t("jo","true");
x.t("jo","match");
x.t("dates","boolean");
x.t("dates","normalize");
x.t("parameter","regardless");
x.t("columns","query");
x.t("1234","query.compare");
x.t("version","method");
x.t("version","column");
x.t("defines","range");
x.t("defines","date");
x.t("day","following");
x.t("anything","date");
x.t("just","range");
x.t("lists","types");
x.t("query.compare","name");
x.t("query.compare","publicid");
x.t("query.compare","priority");
x.t("query.compare","dateofbirth");
x.t("implement","comparison");
x.t("implement","different");
x.t("applied","columns");
x.t("table","lists");
x.t("table","select");
x.t("description","compare");
x.t("uppercase","lowercase");
x.t("subclasses","implement");
x.t("subclasses","compare");
x.t("refer","following");
x.t("10","compareignorecase");
x.t("comparisons","valuerange");
x.t("comparisons","matches");
x.t("arguments","(type)");
x.t("abc","//");
x.t("valuerange","string");
x.t("valuerange","subclass");
x.t("valuerange","general");
x.t("valuerange","typename");
x.t("job","values");
x.t("tables","information");
x.t("subject","algebraic");
x.t("variations","example");
x.t("uses","denormalized");
x.t("text_val.select","link");
x.t("greaterthan","matches");
x.t("(boolean)","checks");
x.t("supportslinguisticsearch","attribute");
x.t("type","example");
x.t("type","relop");
x.t("type","number");
x.t("type","value");
x.t("type","several");
x.t("type","extends");
x.t("type","equals");
x.t("type","date");
x.t("type","pass");
x.t("type","ranges");
x.t("relop","enumeration");
x.t("relop","value");
x.t("numberrange","5,10");
x.t("numberrange","column");
x.t("numberrange","following");
x.t("evaluate","true");
x.t("evaluate","expression");
x.t("time","component");
x.t("time","appropriate");
x.t("1990","january");
x.t("however","data");
x.t("regardless","null");
x.t("apis","restricting");
x.t("entities","keys");
x.t("lowercase","variations");
x.t("checks","whether");
x.t("text","values");
x.t("link","directly");
x.t("prefix","abc");
x.t("prefix","recordnumber");
x.t("acme","startswith");
x.t("acme","following");
x.t("differences","comparison");
x.t("new","valuerange");
x.t("new","numberrange");
x.t("new","datetime");
x.t("new","dbdaterange");
x.t("abc:99","specify");
x.t("start","value");
x.t("objects","specify");
x.t("john","joke");
x.t("query.comparenotin","publicid");
x.t("block","contains");
x.t("satisfies","predicate");
x.t("messsage","gosu");
x.t("list","objects");
x.t("list","range");
x.t("list","predicate");
x.t("list","values");
x.t("upper","end");
x.t("generics","notation");
x.t("around","names");
x.t("startswith","column");
x.t("substring","example");
x.t("substring","jo");
x.t("substring","value");
x.t("jar","pass");
x.t("guide","query");
x.t("lessthanorequals","matches");
x.t("lessthanorequals","compare");
x.t("simple","less");
x.t("simple","equals");
x.t("denormalized","version");
x.t("5,10","specify");
x.t("directly","page");
x.t("row\u2019s","value");
x.t("recordnumber","1234");
x.t("recordnumber","combine");
x.t("true","ignore");
x.t("true","gosu");
x.t("true","boolean");
x.t("true","final");
x.t("true","specify");
x.t("true","item");
x.t("specified","range");
x.t("unbounded","range");
x.t("text_val.focus","text_val.select");
x.t("name","string");
x.t("name","equals");
x.t("operation","type");
x.t("symbols","around");
x.t("definition","column");
x.t("range","version");
x.t("range","subclasses");
x.t("range","numberrange");
x.t("range","text");
x.t("range","range");
x.t("range","argument");
x.t("range","string");
x.t("range","lower");
x.t("range","january");
x.t("range","dbdaterange");
x.t("range","subclass");
x.t("range","numbers");
x.t("range","class");
x.t("range","including");
x.t("gosu","uses");
x.t("gosu","block");
x.t("gosu","reference");
x.t("gosu","ignores");
x.t("gosu","generates");
x.t("restricting","queries");
x.t("typekeys","string");
x.t("constructor","first");
x.t("90,0,1","new");
x.t("query.between","publicid");
x.t("subselect","using");
x.t("enumeration","value");
x.t("comparison","example");
x.t("comparison","query.compare");
x.t("comparison","case-sensitive");
x.t("comparison","predicate");
x.t("comparison","succeeds");
x.t("compareignorecase","column");
x.t("argument","method");
x.t("argument","regardless");
x.t("argument","gosu");
x.t("argument","third");
x.t("argument","pass");
x.t("component","midnight");
x.t("perform","join");
x.t("methods","applied");
x.t("methods","evaluate");
x.t("methods","reference");
x.t("methods","query");
x.t("methods","compare");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("notequals","matches");
x.t("boolean","argument");
x.t("boolean","value");
x.t("none","query");
x.t("combine","column");
x.t("normalize","dates");
x.t("normalize","date");
x.t("algebraic","functions");
x.t("final","argument");
x.t("exclusion","predicates");
x.t("fields","predicate");
x.t("string","ignore");
x.t("string","comparisons");
x.t("string","start");
x.t("string","list");
x.t("string","substring");
x.t("string","operation");
x.t("string","types");
x.t("string","abc:1");
x.t("string","variable");
x.t("string","values");
x.t("string","contains");
x.t("claimcenter","entities");
x.t("third","argument");
x.t("attribute","true");
x.t("three","rows");
x.t("second","range");
x.t("inclusion","exclusion");
x.t("functions","query.compare");
x.t("functions","evaluate");
x.t("error","occurred");
x.t("queries","predicates");
x.t("comparein","column");
x.t("logic","gosu");
x.t("query.compareignorecase","name");
x.t("2010","query.compare");
x.t("first","second");
x.t("functionally","similar");
x.t("select","subset");
x.t("guidewire_selectall","var");
x.t("number","valuerange");
x.t("number","type");
x.t("number","range");
x.t("number","values");
x.t("datetime","90,0,1");
x.t("datetime","110,0,1");
x.t("function","implement");
x.t("function","guidewire_selectall");
x.t("quote","symbols");
x.t("combining","tables");
x.t("combining","predicates");
x.t("(type)","description");
x.t("whether","normalize");
x.t("whether","value");
x.t("specifies","supportslinguisticsearch");
x.t("specifies","whether");
x.t("different","type");
x.t("instead","comparing");
x.t("instead","contains");
x.t("publicid","new");
x.t("publicid","equals");
x.t("publicid","default_data:1");
x.t("publicid","abc:01");
x.t("row","example");
x.t("row","list");
x.t("row","matches");
x.t("row","value");
x.t("row","column");
x.t("row","starts");
x.t("row","contains");
x.t("types","comparisons");
x.t("types","string");
x.t("types","claimcenter");
x.t("match","query.compare");
x.t("match","database");
x.t("match","value");
x.t("anjoy","job");
x.t("superclass","abstract");
x.t("query.comparein","publicid");
x.t("reference","guide");
x.t("reference","algebraic");
x.t("reference","function");
x.t("reference","predicate");
x.t("reference","following");
x.t("reference","pass");
x.t("case-sensitive","example");
x.t("query.contains","firstname");
x.t("rows","list");
x.t("code","defines");
x.t("end","value");
x.t("end","pass");
x.t("110,0,1","true");
x.t("comparenotin","column");
x.t("abstract","type");
x.t("matches","row\u2019s");
x.t("matches","methods");
x.t("matches","none");
x.t("matches","row");
x.t("matches","query");
x.t("matches","values");
x.t("extended","discussion");
x.t("lower","upper");
x.t("lower","function");
x.t("abc:1","abc:99");
x.t("database","row");
x.t("successfully","matches");
x.t("greater","equal");
x.t("greater","value");
x.t("variable","var");
x.t("january","1990");
x.t("january","2010");
x.t("occurred","messsage");
x.t("less","equal");
x.t("less","value");
x.t("null","parameter");
x.t("null","range");
x.t("null","constructor");
x.t("null","first");
x.t("null","restrictions");
x.t("keys","typekeys");
x.t("discussion","subject");
x.t("yo","ji");
x.t("midnight","day");
x.t("predicate","method");
x.t("predicate","however");
x.t("predicate","methods");
x.t("value","passed");
x.t("value","included");
x.t("value","john");
x.t("value","satisfies");
x.t("value","generics");
x.t("value","operation");
x.t("value","range");
x.t("value","string");
x.t("value","specifies");
x.t("value","row");
x.t("value","anjoy");
x.t("value","value");
x.t("value","ignoring");
x.t("value","column");
x.t("value","two");
x.t("value","object");
x.t("oldpriority","10");
x.t("similar","compare");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("specific","substring");
x.t("several","subclasses");
x.t("builder","apis");
x.t("generate","column");
x.t("extends","number");
x.t("represent","operation");
x.t("expression","evaluated");
x.t("takes","two");
x.t("notation","valuerange");
x.t("page","error");
x.t("dbfunction.expr","query.getcolumnref");
x.t("ignoring","uppercase");
x.t("dbdaterange","new");
x.t("dbdaterange","takes");
x.t("dbdaterange","column");
x.t("query","checks");
x.t("query","successfully");
x.t("query","builder");
x.t("query","object");
x.t("insensitivity","gosu");
x.t("data","combining");
x.t("data","model");
x.t("information","combining");
x.t("information","using");
x.t("equals","example");
x.t("equals","prefix");
x.t("equals","acme");
x.t("equals","comparison");
x.t("equals","matches");
x.t("equals","dbfunction.expr");
x.t("appropriate","type");
x.t("query.getcolumnref","oldpriority");
x.t("ignores","case");
x.t("result","information");
x.t("predicates","gosu");
x.t("predicates","perform");
x.t("predicates","fields");
x.t("predicates","logic");
x.t("values","equal");
x.t("values","anything");
x.t("values","just");
x.t("values","relop");
x.t("values","jar");
x.t("values","comparison");
x.t("values","functionally");
x.t("values","number");
x.t("values","match");
x.t("values","extended");
x.t("values","yo");
x.t("values","represent");
x.t("values","date");
x.t("values","without");
x.t("comparing","column");
x.t("case","(boolean)");
x.t("case","differences");
x.t("case","insensitivity");
x.t("case","note");
x.t("case","compare");
x.t("join","table");
x.t("character","value");
x.t("character","column");
x.t("joke","values");
x.t("firstname","jo");
x.t("choose","case");
x.t("default_data:1","default_data:3");
x.t("column","type");
x.t("column","specified");
x.t("column","name");
x.t("column","comparein");
x.t("column","specifies");
x.t("column","row");
x.t("column","instead");
x.t("column","reference");
x.t("column","greater");
x.t("column","less");
x.t("column","value");
x.t("column","generate");
x.t("column","values");
x.t("column","character");
x.t("column","column");
x.t("column","compare");
x.t("column","object");
x.t("priority","new");
x.t("priority","lessthanorequals");
x.t("priority","equals");
x.t("note","choose");
x.t("date","time");
x.t("date","range");
x.t("date","number");
x.t("date","values");
x.t("two","dates");
x.t("two","values");
x.t("subset","data");
x.t("numeric","types");
x.t("default_data:3","subselect");
x.t("default_data:3","comparenotin");
x.t("subclass","numberrange");
x.t("subclass","dbdaterange");
x.t("subclass","compares");
x.t("subclass","specify");
x.t("numbers","query.compare");
x.t("dateofbirth","new");
x.t("following","table");
x.t("following","comparison");
x.t("following","three");
x.t("following","code");
x.t("following","values");
x.t("run","time");
x.t("starts","specific");
x.t("query.startswith","firstname");
x.t("model","definition");
x.t("used","range");
x.t("abc:01","abc:99");
x.t("compares","row");
x.t("compares","value");
x.t("compares","character");
x.t("compares","column");
x.t("lessthan","matches");
x.t("//","string");
x.t("class","superclass");
x.t("general","value");
x.t("using","inclusion");
x.t("compare","method");
x.t("compare","range");
x.t("compare","query.between");
x.t("compare","number");
x.t("compare","value");
x.t("compare","column");
x.t("compare","date");
x.t("compare","contains");
x.t("pass","true");
x.t("pass","instead");
x.t("pass","null");
x.t("pass","values");
x.t("pass","following");
x.t("evaluated","run");
x.t("succeeds","query.compare");
x.t("succeeds","query.compareignorecase");
x.t("ji","pass");
x.t("without","quote");
x.t("names","values");
x.t("sql","lower");
x.t("ranges","refer");
x.t("var","prefix");
x.t("var","recordnumber");
x.t("var","text_val=eval");
x.t("restrictions","column");
x.t("including","string");
x.t("generates","sql");
x.t("object","checks");
x.t("object","end");
x.t("object","predicate");
x.t("object","numeric");
x.t("object","compares");
x.t("contains","list");
x.t("contains","value");
x.t("contains","predicate");
x.t("contains","specific");
x.t("contains","column");
x.t("specify","type");
x.t("specify","unbounded");
x.t("specify","column");
x.t("typename","example");
x.t("item","contains");
}
