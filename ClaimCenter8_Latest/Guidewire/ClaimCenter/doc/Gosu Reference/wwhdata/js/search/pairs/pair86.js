function FileData_Pairs(x)
{
x.t("example","or1");
x.t("example","times");
x.t("example","carcolors");
x.t("example","avoid");
x.t("example","suppose");
x.t("example","select");
x.t("example","following");
x.t("example","links");
x.t("passed","method");
x.t("passed","block");
x.t("semantic","meaning");
x.t("looks","following");
x.t("method","chaining");
x.t("method","query.and");
x.t("method","includes");
x.t("method","again");
x.t("method","methods");
x.t("method","query.or");
x.t("method","takes");
x.t("method","query");
x.t("method","following");
x.t("method","compare");
x.t("parameter","variables");
x.t("parameter","variable");
x.t("provide","better");
x.t("chaining","inside");
x.t("chaining","query");
x.t("chaining","predicates");
x.t("or1","or1.compare");
x.t("or1","and1");
x.t("building","system");
x.t("pattern","looks");
x.t("pattern","example");
x.t("rather","using");
x.t("query.compare","lastname");
x.t("query.compare","firstname");
x.t("within","block");
x.t("within","function");
x.t("refer","grouping");
x.t("always","implicit");
x.t("variables","remind");
x.t("variables","whatever");
x.t("apply","methods");
x.t("q1","query.make");
x.t("11","or1.compare");
x.t("11","q1.compare");
x.t("11","or1.and");
x.t("11","and1.compare");
x.t("11","itemnum");
x.t("ability","combine");
x.t("tables","restrictions");
x.t("refers","quality");
x.t("last","name");
x.t("last","names");
x.t("helps","identify");
x.t("pseudo-code","combine");
x.t("pseudo-code","query");
x.t("line","rather");
x.t("text_val.select","link");
x.t("smith","query.compare");
x.t("smith","want");
x.t("smith","first");
x.t("smith","first_name");
x.t("smith","generally");
x.t("people","whose");
x.t("mode","variables");
x.t("mode","however");
x.t("mode","new");
x.t("mode","peer");
x.t("mode","previous");
x.t("mode","already");
x.t("mode","query");
x.t("mode","predicates");
x.t("mode","var");
x.t("greaterthan","example");
x.t("greaterthan","11");
x.t("greaterthan","notice");
x.t("greaterthan","theory");
x.t("greaterthan","power");
x.t("greaterthan","note");
x.t("times","want");
x.t("los","angeles");
x.t("change","default");
x.t("change","linking");
x.t("populate","groupings");
x.t("type","query");
x.t("query.and","and_grouping_var");
x.t("however","apply");
x.t("however","guidewire");
x.t("however","case");
x.t("inside","block");
x.t("inside","groupings");
x.t("identify","link");
x.t("keywords","instead");
x.t("multiple","subqueries");
x.t("apis","restricting");
x.t("apis","fit");
x.t("apis","combine");
x.t("original","query");
x.t("default","linking");
x.t("default","behavior");
x.t("predicateorbooleangrouping","predicateorbooleangrouping");
x.t("predicateorbooleangrouping","syntax");
x.t("predicateorbooleangrouping","and_grouping_var");
x.t("predicateorbooleangrouping","either");
x.t("predicateorbooleangrouping","or_grouping_var");
x.t("guidewire","recommends");
x.t("checks","property");
x.t("checks","car");
x.t("property","color");
x.t("property","rewrite");
x.t("link","mode");
x.t("link","new");
x.t("link","directly");
x.t("items","want");
x.t("items","second");
x.t("want","example");
x.t("want","los");
x.t("want","however");
x.t("want","combine");
x.t("want","address");
x.t("want","select");
x.t("want","expressions");
x.t("want","result");
x.t("want","either");
x.t("want","person\u2019s");
x.t("advanced","boolean");
x.t("new","group");
x.t("new","parenthetical");
x.t("new","query");
x.t("new","predicates");
x.t("new","series");
x.t("consists","large");
x.t("single","property");
x.t("single","compare");
x.t("english","construction");
x.t("john","smith");
x.t("john","want");
x.t("john","contrast");
x.t("john","select");
x.t("john","query");
x.t("john","using");
x.t("block","passed");
x.t("block","parameter");
x.t("block","instead");
x.t("block","variable");
x.t("block","predicate");
x.t("block","itself");
x.t("block","call");
x.t("block","pass");
x.t("includes","series");
x.t("color","value");
x.t("color","values");
x.t("30","color");
x.t("closely","matches");
x.t("messsage","gosu");
x.t("need","predicate");
x.t("again","notice");
x.t("carcolors","section");
x.t("list","values");
x.t("add","method");
x.t("add","parenthetical");
x.t("add","numbers");
x.t("add","clause");
x.t("group","example");
x.t("group","predicates");
x.t("recommends","naming");
x.t("guide","query");
x.t("simple","example");
x.t("simple","linking");
x.t("33","or1.compare");
x.t("33","divisionnumber");
x.t("33","q1.compare");
x.t("33","and1.compare");
x.t("harder","understand");
x.t("remind","linking");
x.t("or1.compare","divisionnumber");
x.t("or1.compare","priority");
x.t("or1.compare","itemnum");
x.t("large","number");
x.t("directly","parallels");
x.t("directly","page");
x.t("requires","two");
x.t("requires","using");
x.t("requires","specify");
x.t("true","query.compare");
x.t("true","want");
x.t("true","select");
x.t("true","row");
x.t("true","include");
x.t("true","query");
x.t("true","sql");
x.t("specified","restrictions");
x.t("test","single");
x.t("test","production");
x.t("text_val.focus","text_val.select");
x.t("name","helps");
x.t("name","smith");
x.t("name","john");
x.t("name","closely");
x.t("name","specific");
x.t("name","reminds");
x.t("creating","multiple");
x.t("union","clause");
x.t("gosu","block");
x.t("gosu","blocks");
x.t("gosu","reference");
x.t("gosu","query");
x.t("restricting","queries");
x.t("someone","named");
x.t("addresses","chicago");
x.t("addresses","seek");
x.t("previously","specified");
x.t("identifiers","words");
x.t("query.make","(myentity)");
x.t("divisionnumber","greaterthan");
x.t("divisionnumber","following");
x.t("subselect","operations");
x.t("performance","large");
x.t("performance","production");
x.t("argument","passed");
x.t("q1.compare","divisionnumber");
x.t("q1.compare","priority");
x.t("q1.compare","itemnum");
x.t("tests","single");
x.t("fit","line");
x.t("construction","describe");
x.t("avoid","chaining");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("methods","method");
x.t("methods","change");
x.t("methods","original");
x.t("methods","argument");
x.t("methods","queries");
x.t("methods","syntax");
x.t("methods","database");
x.t("methods","query");
x.t("methods","modify");
x.t("orcriteria","orcriteria.compare");
x.t("boolean","algebra");
x.t("boolean","grouping");
x.t("peer","group");
x.t("combine","populate");
x.t("combine","subqueries");
x.t("combine","predicate");
x.t("combine","predicates");
x.t("combine","groupings");
x.t("indicate","following");
x.t("trying","query");
x.t("address","chicago");
x.t("algebra","combine");
x.t("algebra","predicates");
x.t("records","chaining");
x.t("final","output");
x.t("fields","combining");
x.t("wanted","represent");
x.t("or1.and","and1");
x.t("linked","clauses");
x.t("lines","however");
x.t("in-line","within");
x.t("three","different");
x.t("three","predicates");
x.t("second","item");
x.t("earlier","examples");
x.t("understand","naming");
x.t("preceding","example");
x.t("lastname","equals");
x.t("functions","subselect");
x.t("functions","defined");
x.t("quality","predicate");
x.t("logic","function");
x.t("logic","combining");
x.t("logic","often");
x.t("error","occurred");
x.t("queries","tables");
x.t("queries","predicates");
x.t("contrast","preceding");
x.t("chicago","los");
x.t("chicago","orcriteria.compare");
x.t("chicago","city");
x.t("blocks","default");
x.t("blocks","gosu");
x.t("blocks","blocks");
x.t("blocks","special");
x.t("notice","within");
x.t("notice","outer");
x.t("whatever","want");
x.t("colors","example");
x.t("equivalent","simple");
x.t("comparein","method");
x.t("comparein","type");
x.t("approaches","test");
x.t("logical","methods");
x.t("logical","words");
x.t("logical","predicates");
x.t("syntax","method");
x.t("syntax","gosu");
x.t("q1.and","and1");
x.t("suppose","wanted");
x.t("suppose","query");
x.t("outer","contains");
x.t("select","people");
x.t("select","items");
x.t("select","someone");
x.t("select","addresses");
x.t("select","person");
x.t("first","name");
x.t("first","names");
x.t("feature","requires");
x.t("parenthetical","phrase");
x.t("and1","and1.compare");
x.t("and1","note");
x.t("(myentity)","q1.compare");
x.t("(myentity)","q1.and");
x.t("(myentity)","q1.or");
x.t("functionally","equivalent");
x.t("guidewire_selectall","var");
x.t("number","records");
x.t("number","predicates");
x.t("combining","predicates");
x.t("function","guidewire_selectall");
x.t("function","information");
x.t("car","colors");
x.t("approach","provide");
x.t("better","performance");
x.t("expressions","true");
x.t("expressions","last_name");
x.t("person","seek");
x.t("cannot","call");
x.t("unique","identifiers");
x.t("words","name");
x.t("words","query");
x.t("words","clause");
x.t("represents","pseudo-code");
x.t("different","lines");
x.t("first_name","john");
x.t("linking","mode");
x.t("linking","linking");
x.t("linking","predicates");
x.t("instead","add");
x.t("instead","grouping");
x.t("language","keywords");
x.t("row","var");
x.t("keyword","true");
x.t("query.or","or_grouping_var");
x.t("section","checks");
x.t("calling","method");
x.t("calling","predicate");
x.t("added","similarly");
x.t("simply","language");
x.t("rewrite","collapse");
x.t("reference","guide");
x.t("rows","three");
x.t("collapse","tests");
x.t("theory","method");
x.t("code","harder");
x.t("often","need");
x.t("seek","want");
x.t("parallels","structure");
x.t("orcriteria.compare","city");
x.t("previous","specified");
x.t("previous","predicates");
x.t("previous","restrictions");
x.t("q1.or","or1");
x.t("database","functions");
x.t("matches","english");
x.t("matches","30");
x.t("whose","last");
x.t("documentation","refers");
x.t("embedded","methods");
x.t("variable","name");
x.t("variable","simply");
x.t("variable","names");
x.t("together","logical");
x.t("parentheses","pseudo-code");
x.t("occurred","messsage");
x.t("compared","new");
x.t("consider","creating");
x.t("consider","trying");
x.t("consider","using");
x.t("last_name","smith");
x.t("include","item");
x.t("subqueries","consider");
x.t("subqueries","using");
x.t("predicate","method");
x.t("predicate","methods");
x.t("predicate","boolean");
x.t("predicate","expressions");
x.t("predicate","linking");
x.t("predicate","query");
x.t("predicate","using");
x.t("named","john");
x.t("usage","methods");
x.t("power","query");
x.t("value","matches");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("already","added");
x.t("already","effect");
x.t("specific","semantic");
x.t("depending","data");
x.t("builder","apis");
x.t("angeles","boolean");
x.t("angeles","select");
x.t("angeles","query");
x.t("angeles","using");
x.t("angeles","generally");
x.t("expression","true");
x.t("represent","following");
x.t("clauses","test");
x.t("clauses","alternative");
x.t("takes","list");
x.t("page","error");
x.t("and1.compare","divisionnumber");
x.t("and1.compare","priority");
x.t("and1.compare","itemnum");
x.t("output","words");
x.t("query","building");
x.t("query","always");
x.t("query","change");
x.t("query","checks");
x.t("query","consists");
x.t("query","add");
x.t("query","previously");
x.t("query","orcriteria");
x.t("query","approaches");
x.t("query","select");
x.t("query","feature");
x.t("query","represents");
x.t("query","previous");
x.t("query","builder");
x.t("query","above");
x.t("query","priority");
x.t("query","otherwise");
x.t("query","implicit");
x.t("query","using");
x.t("query","returns");
x.t("query","builders");
x.t("query","object");
x.t("information","blocks");
x.t("reminds","linking");
x.t("data","clauses");
x.t("result","example");
x.t("result","last_name");
x.t("result","city");
x.t("equals","smith");
x.t("equals","los");
x.t("equals","john");
x.t("equals","chicago");
x.t("defined","within");
x.t("defined","block");
x.t("defined","in-line");
x.t("examples","used");
x.t("examples","or_grouping_var");
x.t("meaning","example");
x.t("production","performance");
x.t("production","depending");
x.t("predicates","inside");
x.t("predicates","default");
x.t("predicates","advanced");
x.t("predicates","new");
x.t("predicates","add");
x.t("predicates","group");
x.t("predicates","true");
x.t("predicates","methods");
x.t("predicates","fields");
x.t("predicates","linked");
x.t("predicates","logic");
x.t("predicates","keyword");
x.t("predicates","calling");
x.t("predicates","documentation");
x.t("predicates","together");
x.t("predicates","compared");
x.t("predicates","already");
x.t("predicates","defined");
x.t("predicates","predicates");
x.t("predicates","city");
x.t("predicates","call");
x.t("predicates","using");
x.t("values","example");
x.t("values","comparein");
x.t("case","code");
x.t("city","los");
x.t("city","want");
x.t("city","chicago");
x.t("city","equals");
x.t("firstname","equals");
x.t("above","examples");
x.t("structure","parentheses");
x.t("two","items");
x.t("two","predicate");
x.t("two","predicates");
x.t("note","functionally");
x.t("note","cannot");
x.t("priority","11");
x.t("priority","greaterthan");
x.t("otherwise","consider");
x.t("implicit","logical");
x.t("implicit","predicate");
x.t("itself","call");
x.t("itemnum","33");
x.t("itemnum","lessthan");
x.t("created","usage");
x.t("created","using");
x.t("call","block");
x.t("call","variable");
x.t("call","predicate");
x.t("numbers","unique");
x.t("either","predicate");
x.t("either","expression");
x.t("clause","combine");
x.t("clause","consider");
x.t("clause","query");
x.t("special","functions");
x.t("following","pseudo-code");
x.t("following","simple");
x.t("following","name");
x.t("following","predicate");
x.t("following","query");
x.t("following","effect");
x.t("following","var");
x.t("and_grouping_var","refer");
x.t("and_grouping_var","predicateorbooleangrouping");
x.t("and_grouping_var","and_grouping_var");
x.t("links","three");
x.t("system","ability");
x.t("used","pattern");
x.t("using","pattern");
x.t("using","union");
x.t("using","gosu");
x.t("using","combine");
x.t("using","three");
x.t("using","comparein");
x.t("using","logical");
x.t("using","embedded");
x.t("using","understanding");
x.t("understanding","syntax");
x.t("similarly","methods");
x.t("lessthan","33");
x.t("groupings","example");
x.t("groupings","earlier");
x.t("groupings","following");
x.t("person\u2019s","last");
x.t("person\u2019s","first");
x.t("series","predicates");
x.t("pass","method");
x.t("grouping","directly");
x.t("grouping","methods");
x.t("grouping","calling");
x.t("grouping","variable");
x.t("grouping","created");
x.t("or_grouping_var","predicateorbooleangrouping");
x.t("or_grouping_var","and_grouping_var");
x.t("or_grouping_var","or_grouping_var");
x.t("compare","boolean");
x.t("compare","predicate");
x.t("returns","rows");
x.t("alternative","approach");
x.t("names","smith");
x.t("names","john");
x.t("names","indicate");
x.t("sql","combine");
x.t("modify","original");
x.t("behavior","new");
x.t("operations","query");
x.t("var","q1");
x.t("var","text_val=eval");
x.t("restrictions","add");
x.t("restrictions","methods");
x.t("restrictions","linking");
x.t("effect","block");
x.t("effect","predicate");
x.t("describe","final");
x.t("naming","block");
x.t("naming","gosu");
x.t("builders","q1.or");
x.t("generally","requires");
x.t("specify","two");
x.t("item","result");
x.t("item","grouping");
x.t("object","true");
x.t("phrase","link");
x.t("phrase","previous");
x.t("contains","two");
}
