function FileData_Pairs(x)
{
x.t("statements","example");
x.t("statements","gosu");
x.t("statements","perform");
x.t("statements","mirrors");
x.t("example","shows");
x.t("example","fix");
x.t("example","suppose");
x.t("example","function");
x.t("example","declaring");
x.t("example","somemethod");
x.t("example","typical");
x.t("example","following");
x.t("example","using");
x.t("unlike","java");
x.t("so-called","vararg");
x.t("str2:string","string");
x.t("four","total");
x.t("readable","example");
x.t("passed-in","non-named");
x.t("passed-in","argument");
x.t("passed-in","value");
x.t("passed","order");
x.t("exist","attached");
x.t("provide","default");
x.t("provide","return");
x.t("else","==");
x.t("else","section");
x.t("else","return");
x.t("else","clause");
x.t("possible","code");
x.t("possible","paths");
x.t("method","calls");
x.t("method","name");
x.t("method","declares");
x.t("method","invalid");
x.t("method","using");
x.t("construct","strings");
x.t("parameter","pass");
x.t("library","example");
x.t("library","public");
x.t("library","important");
x.t("library","defined");
x.t("library","funcb");
x.t("library","call");
x.t("rather","relying");
x.t("easy","read");
x.t("left-to-right","order");
x.t("within","library");
x.t("within","functions");
x.t("within","class");
x.t("vararg","functions");
x.t("caller","passes");
x.t("caller","omit");
x.t("printwithprefix","method");
x.t("printwithprefix","prefix");
x.t("printwithprefix","declaration");
x.t("anywhere","except");
x.t("built-in","print");
x.t("always","scope");
x.t("always","used");
x.t("function-body","examples");
x.t("action","optionally");
x.t("arguments","arguments");
x.t("arguments","helps");
x.t("arguments","defaults");
x.t("arguments","name");
x.t("arguments","gosu");
x.t("arguments","argument");
x.t("arguments","feature");
x.t("arguments","others");
x.t("arguments","omitted");
x.t("arguments","imagine");
x.t("arguments","call");
x.t("arguments","pass");
x.t("arguments","without");
x.t("arguments","representing");
x.t("void","possible");
x.t("void","no");
x.t("void","omit");
x.t("void","function");
x.t("str1","str2");
x.t("modifiers","return");
x.t("modifiers","appear");
x.t("modifiers","information");
x.t("str2","important");
x.t("_names","java.util.arraylist");
x.t("declared","type");
x.t("declared","default");
x.t("declared","function");
x.t("program",".gsp");
x.t("program","note");
x.t("conditional","execution");
x.t("helps","code");
x.t("shows","calling");
x.t("text_val.select","link");
x.t("support","arguments");
x.t("support","functions");
x.t("support","expressions");
x.t("support","variable");
x.t("statement","example");
x.t("statement","possible");
x.t("statement","gosu");
x.t("statement","error");
x.t("statement","return");
x.t("statement","consider");
x.t("look","following");
x.t("tell","visually");
x.t("type","example");
x.t("type","void");
x.t("type","missing");
x.t("type","colon");
x.t("type","true");
x.t("type","gosu");
x.t("type","mismatched");
x.t("type","function");
x.t("type","words");
x.t("type","matches");
x.t("type","called");
x.t("type","literals");
x.t("missing","return");
x.t("explicitly","rather");
x.t("explicitly","class");
x.t("evaluate","(indirectly)");
x.t("colon","argument");
x.t("colon","return");
x.t("compiler","error");
x.t("compiler","sees");
x.t("calls","look");
x.t("calls","functions");
x.t("time","overriding");
x.t("public","default");
x.t("public","function");
x.t("public","private");
x.t("public","called");
x.t("public","without");
x.t("however","gosu");
x.t("however","funca");
x.t("however","funcb");
x.t("execution","switch");
x.t("total","four");
x.t("total","code");
x.t("multiple","arguments");
x.t("inside","library");
x.t("requirement","return");
x.t("default","arguments");
x.t("default","---");
x.t("default","argument");
x.t("default","exists");
x.t("default","follow");
x.t("default","value");
x.t("default","separate");
x.t("default","optional");
x.t("default","meaning");
x.t("default","values");
x.t("default","var");
x.t("non-named","arguments");
x.t("link","directly");
x.t("speaking","functions");
x.t("==","return");
x.t("prefix","string");
x.t("prefix","value");
x.t("prefix","class");
x.t("prefix","//");
x.t("new","myclass");
x.t("access","modifiers");
x.t("top","level");
x.t("includes","outcomes");
x.t("passes","argument");
x.t("messsage","gosu");
x.t("file","declare");
x.t("places","gosu");
x.t(":redisplay=true",":sendupdate=false");
x.t("lets","provide");
x.t("strict","requirement");
x.t("guide","statements");
x.t("unless","return");
x.t("false","gosu");
x.t("false","similarly");
x.t("false","//");
x.t(":sendupdate=false","//");
x.t("---","default");
x.t("---","omitted");
x.t("---","_strings");
x.t("directly","page");
x.t(".gsp","file");
x.t("declare","default");
x.t("declare","functions");
x.t("true","else");
x.t("true","false");
x.t("true","myparameter==2");
x.t("true","global");
x.t("requires","provide");
x.t("requires","method");
x.t("requires","return");
x.t("test","null");
x.t("requirements","java");
x.t("defaults","passed");
x.t("defaults","gosu");
x.t("defaults","code");
x.t("text_val.focus","text_val.select");
x.t("definition","unless");
x.t("no","return");
x.t("no","value");
x.t("path","contains");
x.t("name","arguments");
x.t("name","already");
x.t("name","equals");
x.t("gosu","statements");
x.t("gosu","program");
x.t("gosu","support");
x.t("gosu","compiler");
x.t("gosu","requires");
x.t("gosu","gosu");
x.t("gosu","permits");
x.t("gosu","functions");
x.t("gosu","feature");
x.t("gosu","reference");
x.t("gosu","code");
x.t("gosu","considers");
x.t("gosu","named");
x.t("gosu","expression");
x.t("gosu","generates");
x.t("perform","action");
x.t("argument","passed-in");
x.t("argument","default");
x.t("argument","defaults");
x.t("argument","name");
x.t("argument","functions");
x.t("argument","function");
x.t("argument","values");
x.t("argument","names");
x.t("declares","return");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("methods","context");
x.t("boolean","myparameter==1");
x.t("alternatively","specify");
x.t("exists","c.printwithprefix");
x.t("omit","type");
x.t("omit","argument");
x.t("omit","c.printwithprefix");
x.t("//invalid","class");
x.t("sign","value");
x.t("declarations","function");
x.t("overriding","default");
x.t("strings","prefix");
x.t("strings","java.util.arraylist");
x.t("strings","function");
x.t("mismatched","return");
x.t("string","construct");
x.t("string","---");
x.t("string","gosu");
x.t("string","return");
x.t("string","_strings");
x.t("fix","earlier");
x.t("fix","error");
x.t("(left-to-right)","declared");
x.t("permits","specify");
x.t("(indirectly)","type");
x.t("myfunction","(myparameter)");
x.t("myfunction","return");
x.t("believe","function");
x.t("contain","return");
x.t("earlier","example");
x.t("functions","so-called");
x.t("functions","exist");
x.t("functions","within");
x.t("functions","declared");
x.t("functions","however");
x.t("functions","top");
x.t("functions","gosu");
x.t("functions","functions");
x.t("functions","function");
x.t("functions","defined");
x.t("functions","meaning");
x.t("functions","encapsulate");
x.t("functions","specify");
x.t("overloaded","class");
x.t("error","gosu");
x.t("error","fix");
x.t("error","syntax");
x.t("error","function");
x.t("error","cannot");
x.t("error","rewrite");
x.t("error","occurred");
x.t("blocks","something");
x.t("blocks","information");
x.t("something","similar");
x.t("notice","printwithprefix");
x.t("contrast","private");
x.t("syntax","[modifiers]");
x.t("java.util.arraylist","string");
x.t("next","string");
x.t("suppose","following");
x.t("feature","lets");
x.t("feature","requires");
x.t("feature","called");
x.t("(myparameter)","boolean");
x.t("reason","therefore");
x.t("guidewire_selectall","var");
x.t("number","==");
x.t("number","number");
x.t("number","return");
x.t("visually","instead");
x.t("others","non-named");
x.t("function","library");
x.t("function","caller");
x.t("function","printwithprefix");
x.t("function","always");
x.t("function","public");
x.t("function","multiple");
x.t("function","places");
x.t("function","definition");
x.t("function","gosu");
x.t("function","declarations");
x.t("function","fix");
x.t("function","myfunction");
x.t("function","guidewire_selectall");
x.t("function","private");
x.t("function","identifier");
x.t("function","return");
x.t("function","level");
x.t("function","square");
x.t("function","printed");
x.t("function","called");
x.t("function","funca");
x.t("function","fibonacci");
x.t("function","funcb");
x.t("function","concat");
x.t("function","special");
x.t("function","class");
x.t("function","paths");
x.t("function\u2019s","return");
x.t("expressions","evaluate");
x.t("expressions","total");
x.t("cannot","return");
x.t("private","functions");
x.t("private","function");
x.t("private","defined");
x.t("private","funcb");
x.t("private","therefore");
x.t("words","code");
x.t("myparameter","value");
x.t("language","named");
x.t("instead","passing");
x.t("declaring","functions");
x.t("compile","error");
x.t("section","strict");
x.t("somemethod",":redisplay=true");
x.t("somemethod","true");
x.t("match","left-to-right");
x.t("object-oriented","languages");
x.t("scope","attached");
x.t("important","modifiers");
x.t("important","information");
x.t("switch","statements");
x.t("switch","statement");
x.t("rewrite","code");
x.t("simply","series");
x.t("omitted","notice");
x.t("omitted","following");
x.t("calling","printwithprefix");
x.t("calling","conventions");
x.t("reference","guide");
x.t("languages","functions");
x.t("identifier","argument-declaration-list");
x.t("code","readable");
x.t("code","calls");
x.t("code","path");
x.t("code","contrast");
x.t("code","code");
x.t("code","additionally");
x.t("code","paths");
x.t("invalid","//invalid");
x.t("follow","argument");
x.t("return","statements");
x.t("return","else");
x.t("return","str1");
x.t("return","statement");
x.t("return","type");
x.t("return","false");
x.t("return","test");
x.t("return","true");
x.t("return","value");
x.t("return","fibonacci");
x.t("return","//");
x.t("level","access");
x.t("level","without");
x.t("override","default");
x.t("matches","declared");
x.t("square","number");
x.t("appear","word");
x.t("java","gosu");
x.t("java","language");
x.t("variable","argument");
x.t("imagine","function");
x.t("printed","strings");
x.t("considers","additional");
x.t("occurred","messsage");
x.t("null","value");
x.t("consider","using");
x.t("value","example");
x.t("value","method");
x.t("value","void");
x.t("value","default");
x.t("value","---");
x.t("value","declare");
x.t("value","no");
x.t("value","fix");
x.t("value","function");
x.t("value","return");
x.t("value","demonstrate");
x.t("value","overrides");
x.t("value","generates");
x.t("value","generally");
x.t("similar","blocks");
x.t("named","arguments");
x.t("_strings","strings");
x.t("_strings","print");
x.t("additional","passed-in");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("myparameter==1","return");
x.t("declaration","prefix");
x.t("declaration","order");
x.t("--","omit");
x.t("already","overloaded");
x.t("myparameter==2","return");
x.t("word","function");
x.t("sees","two");
x.t("represent","difficult");
x.t("read","code");
x.t("hello","//");
x.t("expression","however");
x.t("valid","anywhere");
x.t("page","error");
x.t("context","gosu");
x.t("separate","time");
x.t("separate","expressions");
x.t("good","reason");
x.t("attached","type");
x.t("information","unlike");
x.t("information","modifiers");
x.t("information","class");
x.t("mirrors","analogous");
x.t("typical","method");
x.t("optional","arguments");
x.t("optional","--");
x.t("defined","example");
x.t("defined","library");
x.t("defined","within");
x.t("defined","public");
x.t("defined","inside");
x.t("meaning","gosu");
x.t("meaning","called");
x.t("argument-declaration-list","[:type-literal]");
x.t("examples","function");
x.t("str1:string","str2:string");
x.t("equals","sign");
x.t("values","function");
x.t("values","represent");
x.t("values","call");
x.t("encapsulate","series");
x.t("called","within");
x.t("called","gosu");
x.t("called","methods");
x.t("called","blocks");
x.t("print","prefix");
x.t("print","function");
x.t("global","function");
x.t(":prefix=","next");
x.t("funca","private");
x.t("funca","defined");
x.t("funca","call");
x.t("note","built-in");
x.t("[:type-literal]","function-body");
x.t("fibonacci","number");
x.t("fibonacci","function");
x.t("fibonacci","fibonacci");
x.t("two","functions");
x.t("two","separate");
x.t("funcb","however");
x.t("funcb","function");
x.t("funcb","private");
x.t("funcb","funca");
x.t("optionally","return");
x.t("attaching","explicitly");
x.t("mark","function");
x.t("call","function");
x.t("call","private");
x.t("call","match");
x.t("call","funca");
x.t("call","funcb");
x.t("call","class");
x.t("literals","function\u2019s");
x.t("concat","str1:string");
x.t("order","arguments");
x.t("order","(left-to-right)");
x.t("special","always");
x.t("following","example");
x.t("following","method");
x.t("following","somemethod");
x.t("following","two");
x.t("used","passed-in");
x.t("used","myparameter");
x.t("clause","class");
x.t("analogous","requirements");
x.t("except","within");
x.t("class","function");
x.t("class","object-oriented");
x.t("class","calling");
x.t("class","optional");
x.t("class","call");
x.t("class","definitions");
x.t("class","myclass");
x.t("//","easy");
x.t("//","argument");
x.t("//","alternatively");
x.t("//","compile");
x.t("//","values");
x.t("//","used");
x.t("using","else");
x.t("using","default");
x.t("similarly","switch");
x.t("relying","matching");
x.t("difficult","tell");
x.t("additionally","feature");
x.t("demonstrate","default");
x.t("series","gosu");
x.t("series","comma-separated");
x.t("outcomes","conditional");
x.t("pass","colon");
x.t("pass","override");
x.t("overrides","declared");
x.t("without","defaults");
x.t("without","good");
x.t("without","attaching");
x.t("definitions","modifiers");
x.t("paths","includes");
x.t("paths","contain");
x.t("paths","function");
x.t("paths","return");
x.t("paths","even");
x.t("myclass","function");
x.t("myclass","hello");
x.t("myclass","var");
x.t("names","explicitly");
x.t("c.printwithprefix",":prefix=");
x.t("c.printwithprefix","//");
x.t("therefore","valid");
x.t("therefore","mark");
x.t("var","_names");
x.t("var","new");
x.t("var","text_val=eval");
x.t("passing","simply");
x.t("generates","missing");
x.t("generates","compiler");
x.t("[modifiers]","function");
x.t("even","believe");
x.t("conventions","call");
x.t("representing","arguments");
x.t("generally","speaking");
x.t("specify","parameter");
x.t("specify","type");
x.t("specify","argument");
x.t("contains","return");
x.t("matching","declaration");
x.t("comma-separated","arguments");
}
