function FileData_Pairs(x)
{
x.t("example","contact");
x.t("example","new");
x.t("example","true");
x.t("example","gosu");
x.t("example","makes");
x.t("example","produces");
x.t("example","reconsider");
x.t("example","consider");
x.t("example","recursive");
x.t("example","var");
x.t("supports","recursive");
x.t("version","gosu");
x.t("question","mark");
x.t("contact","new");
x.t("contact","following");
x.t("static","type");
x.t("syntactically","right-associative");
x.t("10","conversely");
x.t("10","gosu");
x.t("10","less");
x.t("10","print");
x.t("always","example");
x.t("current","state");
x.t("conditional","ternary");
x.t("conditional","expression");
x.t("conditional","operator");
x.t("uses","boolean");
x.t("separates","conditional");
x.t("separates","alternatives");
x.t("text_val.select","link");
x.t("state","system");
x.t("working","primitive");
x.t("evaluates","false");
x.t("evaluates","true");
x.t("evaluates","third");
x.t("evaluates","second");
x.t("evaluates","first");
x.t("evaluates","explicit");
x.t("evaluates","often");
x.t("type","example");
x.t("type","always");
x.t("type","boxed");
x.t("type","compiler");
x.t("type","hierarchy");
x.t("type","ternaryresult");
x.t("type","ternary");
x.t("type","nearest");
x.t("type","true");
x.t("type","boolean");
x.t("type","checking");
x.t("type","string");
x.t("type","int");
x.t("type","compile");
x.t("type","evaluation");
x.t("type","system");
x.t("type","coercion");
x.t("type","object");
x.t("type","remains");
x.t("boxed","version");
x.t("boxed","type");
x.t("boxed","types");
x.t("evaluate","question");
x.t("evaluate","type");
x.t("colon","separates");
x.t("colon","conversely");
x.t("time","contact");
x.t("time","type");
x.t("time","ternary");
x.t("time","true");
x.t("time","gosu");
x.t("time","compile");
x.t("time","value");
x.t("time","run");
x.t("compiler","explicit");
x.t("hierarchy","common");
x.t("ternaryresult","type");
x.t("ternaryresult","typeis");
x.t("ternaryresult","preceding");
x.t("ternaryresult","variable");
x.t("ternaryresult","acontact.status");
x.t("ternaryresult","print");
x.t("ternaryresult","object");
x.t("keywords","produce");
x.t("coerces","primitive");
x.t("primitive","type");
x.t("primitive","boxed");
x.t("primitive","types");
x.t("link","directly");
x.t("conversely","contact");
x.t("conversely","conditional");
x.t("conversely","value");
x.t("==","new");
x.t("==","true");
x.t("new","ternaryresult");
x.t("new","hello");
x.t("new","print");
x.t("precedence","run");
x.t("details","boolean");
x.t("statictypeof","ternaryresult");
x.t("messsage","gosu");
x.t("operands","true");
x.t("operands","instead");
x.t("operands","follow");
x.t("ternary","expressions");
x.t("ternary","expression");
x.t("ternary","operator");
x.t("guide","gosu");
x.t("nearest","common");
x.t("results","example");
x.t("false","example");
x.t("false","==");
x.t("false","false");
x.t("false","true");
x.t("false","gosu");
x.t("false","string");
x.t("false","expressions");
x.t("false","compile");
x.t("false","expression");
x.t("false","although");
x.t("false","run");
x.t("false","//");
x.t("directly","page");
x.t("true","ternary");
x.t("true","false");
x.t("true","true");
x.t("true","gosu");
x.t("true","boolean");
x.t("true","expression");
x.t("requires","types");
x.t("text_val.focus","text_val.select");
x.t("common","ancestor");
x.t("common","acestor");
x.t("no","common");
x.t("gosu","supports");
x.t("gosu","evaluates");
x.t("gosu","coerces");
x.t("gosu","requires");
x.t("gosu","searches");
x.t("gosu","sets");
x.t("gosu","prints");
x.t("gosu","operators");
x.t("gosu","first");
x.t("gosu","reconciles");
x.t("gosu","reference");
x.t("gosu","reconcile");
x.t("gosu","ignores");
x.t("gosu","implicitly");
x.t("falsexpression","second");
x.t("follows","question");
x.t("follows","colon");
x.t("searches","type");
x.t("ancestor","type");
x.t("ancestor","gosu");
x.t("declares","type");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("boolean","boxed");
x.t("boolean","gosu");
x.t("boolean","logic");
x.t("boolean","value");
x.t("boolean","descend");
x.t("boolean","although");
x.t("boolean","recursive");
x.t("boolean","print");
x.t("boolean","run");
x.t("boolean","following");
x.t("boolean","object");
x.t("compatible","gosu");
x.t("compatible","string");
x.t("compatible","types");
x.t("checking","type");
x.t("checking","keywords");
x.t("operand","conditional");
x.t("operand","false");
x.t("operand","true");
x.t("operand","expression");
x.t("makes","type");
x.t("decide","two");
x.t("typeis","boolean");
x.t("typeis","string");
x.t("typeis","object");
x.t("third","operands");
x.t("third","operand");
x.t("string","type");
x.t("string","false");
x.t("string","boolean");
x.t("string","value");
x.t("string","although");
x.t("string","print");
x.t("string","object");
x.t("sets","type");
x.t("int","boolean");
x.t("three","operands");
x.t("second","operand");
x.t("second","third");
x.t("mynumbervar","10");
x.t("mynumbervar","greater");
x.t("prints","10");
x.t("prints","bigger");
x.t("earlier","example");
x.t("preceding","example");
x.t("error","occurred");
x.t("sometimes","known");
x.t("logic","evaluation");
x.t("operators","expressions");
x.t("syntax","conditionalexpression");
x.t("hold","instances");
x.t("logical","expressions");
x.t("first","coerces");
x.t("first","operand");
x.t("guidewire_selectall","var");
x.t("function","guidewire_selectall");
x.t("expressions","conditional");
x.t("expressions","type");
x.t("expressions","evaluate");
x.t("expressions","details");
x.t("expressions","ternary");
x.t("expressions","true");
x.t("expressions","gosu");
x.t("expressions","second");
x.t("expressions","sometimes");
x.t("expressions","function");
x.t("expressions","different");
x.t("expressions","themselves");
x.t("expressions","var");
x.t("different","type");
x.t("different","types");
x.t("reconciles","type");
x.t("instead","two");
x.t("trueexpression","falsexpression");
x.t("types","working");
x.t("types","true");
x.t("types","no");
x.t("types","gosu");
x.t("types","compatible");
x.t("types","types");
x.t("types","run");
x.t("compile","time");
x.t("explicit","order");
x.t("explicit","//");
x.t("reference","guide");
x.t("languages","ternary");
x.t("follow","question");
x.t("reduces","itself");
x.t("bigger","10");
x.t("often","ternary");
x.t("known","using");
x.t("produces","following");
x.t("greater","10");
x.t("reconsider","earlier");
x.t("variable","hold");
x.t("variable","varies");
x.t("right-associative","example");
x.t("occurred","messsage");
x.t("consider","following");
x.t("less","gosu");
x.t("less","examples");
x.t("less","run");
x.t("acontact.status","==");
x.t("typeof","ternaryresult");
x.t("instances","type");
x.t("value","false");
x.t("value","mynumbervar");
x.t("value","expression");
x.t("value","hello");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("depending","current");
x.t("depending","conditional");
x.t("descend","object");
x.t("several","different");
x.t("programming","languages");
x.t("expression","example");
x.t("expression","uses");
x.t("expression","conditional");
x.t("expression","evaluates");
x.t("expression","type");
x.t("expression","ternaryresult");
x.t("expression","primitive");
x.t("expression","ternary");
x.t("expression","false");
x.t("expression","common");
x.t("expression","follows");
x.t("expression","compatible");
x.t("expression","decide");
x.t("expression","mynumbervar");
x.t("expression","different");
x.t("expression","types");
x.t("expression","reduces");
x.t("expression","depending");
x.t("expression","evaluation");
x.t("expression","alternatives");
x.t("expression","var");
x.t("expression","object");
x.t("evaluation","ternary");
x.t("evaluation","logical");
x.t("evaluation","result");
x.t("hello","conversely");
x.t("hello","false");
x.t("although","static");
x.t("although","true");
x.t("reconcile","types");
x.t("varying","results");
x.t("page","error");
x.t("output","true");
x.t("ignores","third");
x.t("ignores","second");
x.t("examples","ternary");
x.t("result","true");
x.t("implicitly","declares");
x.t("recursive","ternary");
x.t("themselves","ternary");
x.t("print","10");
x.t("print","ternaryresult");
x.t("print","statictypeof");
x.t("print","bigger");
x.t("print","typeof");
x.t("acestor","type");
x.t("two","syntax");
x.t("two","expressions");
x.t("varies","depending");
x.t("mark","separates");
x.t("mark","compatible");
x.t("mark","ignores");
x.t("itself","expressions");
x.t("conditionalexpression","trueexpression");
x.t("order","precedence");
x.t("run","time");
x.t("following","example");
x.t("following","ternary");
x.t("following","output");
x.t("system","primitive");
x.t("system","several");
x.t("alternatives","colon");
x.t("alternatives","programming");
x.t("using","conditional");
x.t("//","contact");
x.t("//","type");
x.t("coercion","type");
x.t("coercion","ternary");
x.t("operator","syntactically");
x.t("operator","ternary");
x.t("operator","three");
x.t("var","ternaryresult");
x.t("var","text_val=eval");
x.t("produce","varying");
x.t("object","example");
x.t("object","ternaryresult");
x.t("object","primitive");
x.t("object","conversely");
x.t("object","gosu");
x.t("object","compile");
x.t("object","acontact.status");
x.t("object","print");
x.t("object","var");
x.t("remains","object");
}
