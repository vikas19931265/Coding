function FileData_Pairs(x)
{
x.t("example","generify");
x.t("example","change");
x.t("example","soap");
x.t("example","name");
x.t("example","gosu");
x.t("example","suppose");
x.t("example","means");
x.t("example","function");
x.t("example","define");
x.t("example","accessing");
x.t("example","code");
x.t("example","var");
x.t("looks","up");
x.t("readable","writable");
x.t("statements","rewrite");
x.t("statements","checked");
x.t("differently","claimcenter");
x.t("properties","creating");
x.t("properties","gosu");
x.t("properties","means");
x.t("properties","different");
x.t("properties","return");
x.t("properties","generate");
x.t("properties","defined");
x.t("properties","conflict");
x.t("method","signature");
x.t("method","superclass");
x.t("method","explicit");
x.t("method","override");
x.t("method","stand");
x.t("method","declaration");
x.t("method","overloading");
x.t("method","takes");
x.t("method","assuming");
x.t("method","enhancements");
x.t("method","call");
x.t("method","signatures");
x.t("method","definitions");
x.t("possible","fixes");
x.t("parameter","argument");
x.t("parameter","even");
x.t("indicated","compile");
x.t("abstraction","underlying");
x.t("rather","error");
x.t("just","object");
x.t("right","hand");
x.t("7.0.0","new");
x.t("half","writable");
x.t("within","additive");
x.t("within","using");
x.t("nothing","no");
x.t("cast","string");
x.t("effects","change");
x.t("static","methods");
x.t("subclasses","cannot");
x.t("create","single");
x.t("question","common");
x.t("situation","adding");
x.t("refer","type");
x.t("instance","object");
x.t("generify","superclass");
x.t("generify","class");
x.t("ensures","getters");
x.t("always","returns");
x.t("variables","no");
x.t("variables","initialize");
x.t("forbids","declaring");
x.t("related","change");
x.t("summary","change");
x.t("summary","add");
x.t("summary","remove");
x.t("summary","try/catch");
x.t("arguments","variables");
x.t("arguments","cannot");
x.t("arguments","specially");
x.t("void","example");
x.t("void","literally");
x.t("void","functions");
x.t("void","function");
x.t("void","technically");
x.t("void","valid");
x.t("regular","methods");
x.t("11","gosu");
x.t("discouraged","sometimes");
x.t("setter","method");
x.t("setter","property");
x.t("setter","methods");
x.t("setter","return");
x.t("setter","priority");
x.t("setter","call");
x.t("setter","subclass");
x.t("setter","child");
x.t("try","catch");
x.t("current","package");
x.t("referenced","type");
x.t("field","gosu");
x.t("declared","name");
x.t("declared","second");
x.t("uses","type");
x.t("uses","keyword");
x.t("conventional","priority");
x.t("com.mycompany.subpackage.myutil","typing");
x.t("text_val.select","link");
x.t("errors","code");
x.t("(methods)","typical");
x.t("statement","priority");
x.t("statement","compiled");
x.t("necessary","change");
x.t("change","properties");
x.t("change","method");
x.t("change","declared");
x.t("change","change");
x.t("change","gosu");
x.t("change","overridden");
x.t("change","enhancement");
x.t("change","overloaded");
x.t("change","affects");
x.t("change","code");
x.t("change","previous");
x.t("change","overrides");
x.t("change","catch");
x.t("change","child");
x.t("change","imports");
x.t("type","example");
x.t("type","void");
x.t("type","com.mycompany.subpackage.myutil");
x.t("type","want");
x.t("type","gosu");
x.t("type","declarations");
x.t("type","stack");
x.t("type","string");
x.t("type","second");
x.t("type","syntax");
x.t("type","approach");
x.t("type","cannot");
x.t("type","words");
x.t("type","things");
x.t("type","loader");
x.t("type","java");
x.t("type","variable");
x.t("type","null");
x.t("type","declaration");
x.t("type","exception");
x.t("type","inference");
x.t("type","unambiguously");
x.t("type","cases");
x.t("type","subclass");
x.t("type","system");
x.t("type","names");
x.t("type","even");
x.t("type","object");
x.t("type","undeclared");
x.t("getters","property");
x.t("getters","different");
x.t("getters","setters");
x.t("vary","non-java-backed");
x.t("evaluates","11");
x.t("evaluates","claimcenter");
x.t("evaluates","string");
x.t("best","avoid");
x.t("time","errors");
x.t("time","jvm");
x.t("time","gosu");
x.t("time","error");
x.t("time","issues");
x.t("time","java");
x.t("time","behavior");
x.t("compiler","finds");
x.t("compiler","gosu");
x.t("compiler","warning");
x.t("compiler","generates");
x.t("getter","half");
x.t("getter","setter");
x.t("getter","calls");
x.t("getter","property");
x.t("getter","return");
x.t("calls","properties");
x.t("calls","gosu");
x.t("calls","enhancement");
x.t("external","system");
x.t("hand","side");
x.t("explicitly","assign");
x.t("explicitly","declare");
x.t("explicitly","parenthesize");
x.t("explicitly","using");
x.t("what\u2019s","new");
x.t("sections","list");
x.t("releases","ignoring");
x.t("down","class");
x.t("compiles","class");
x.t("however","gosu");
x.t("keywords","gosu");
x.t("property","example");
x.t("property","readable");
x.t("property","properties");
x.t("property","abstraction");
x.t("property","setter");
x.t("property","type");
x.t("property","getter");
x.t("property","functions");
x.t("property","cause");
x.t("property","function");
x.t("property","known");
x.t("property","null");
x.t("property","read-only");
x.t("property","implicitly");
x.t("property","integer");
x.t("property","getter/setter");
x.t("requirement","gosu");
x.t("put","method");
x.t("put","overloaded");
x.t("put","stand");
x.t("put","instanceof");
x.t("apis","external");
x.t("one-to-one","correspondence");
x.t("really","indicates");
x.t("require","fully-qualified");
x.t("link","directly");
x.t("link","actual");
x.t("new","changed");
x.t("new","gosu");
x.t("new","variable");
x.t("refactor","code");
x.t("signature","difference");
x.t("single","method");
x.t("speaking","type");
x.t("literally","return");
x.t("precedence","coercion/conversion");
x.t("precedence","typeas");
x.t("want","import");
x.t("block","explicitly");
x.t("block","carefully");
x.t("block","ensure");
x.t("block","case");
x.t("top","file");
x.t("messsage","claimcenter");
x.t("list","side");
x.t("generics","gosu");
x.t("finds","common");
x.t("indicates","programming");
x.t("proper","capitalization");
x.t("file","cases");
x.t("flags","compile");
x.t("flags","code");
x.t("machine","previously");
x.t("assign","appropriate");
x.t("add","type");
x.t("strict","proper");
x.t("guide","related");
x.t("guide","what\u2019s");
x.t("guide","override");
x.t("normally","java");
x.t("remove","void");
x.t("remove","extra");
x.t("remove","explicit");
x.t("soap","apis");
x.t("duplicate","method");
x.t("false","handle");
x.t("throws","exceptions");
x.t("directly","instead");
x.t("directly","java");
x.t("directly","page");
x.t("detects","issue");
x.t("declare","new");
x.t("declare","exception");
x.t("declare","mysubclass");
x.t("handle","null");
x.t("text_val.focus","text_val.select");
x.t("no","type");
x.t("no","concept");
x.t("no","duplicated");
x.t("no","explicit");
x.t("no","longer");
x.t("no","value");
x.t("no","checked");
x.t("jvm","looks");
x.t("jvm","run");
x.t("name","type");
x.t("name","property");
x.t("name","non-java-backed");
x.t("name","getname");
x.t("common","situation");
x.t("common","denominator");
x.t("resulting","duplicate");
x.t("creating","implicit");
x.t("try/catch","statements");
x.t("path","relative");
x.t("path","means");
x.t("gosu","properties");
x.t("gosu","forbids");
x.t("gosu","uses");
x.t("gosu","statement");
x.t("gosu","evaluates");
x.t("gosu","type");
x.t("gosu","compiler");
x.t("gosu","calls");
x.t("gosu","releases");
x.t("gosu","property");
x.t("gosu","generics");
x.t("gosu","flags");
x.t("gosu","strict");
x.t("gosu","throws");
x.t("gosu","detects");
x.t("gosu","gosu");
x.t("gosu","allows");
x.t("gosu","syntax");
x.t("gosu","statically");
x.t("gosu","language");
x.t("gosu","compile");
x.t("gosu","reference");
x.t("gosu","code");
x.t("gosu","expression");
x.t("gosu","7.0");
x.t("gosu","causes");
x.t("gosu","run");
x.t("gosu","class");
x.t("gosu","evaluated");
x.t("gosu","catching");
x.t("gosu","strictly");
x.t("gosu","exceptions");
x.t("changed","7.0.0");
x.t("changed","guide");
x.t("changed","gosu");
x.t("changed","ways");
x.t("exactly","match");
x.t("exactly","parameterization");
x.t("previously","compiler");
x.t("previously","requirement");
x.t("previously","write");
x.t("overridden","method");
x.t("overridden","generic");
x.t("overridden","subclass");
x.t("typed","superclass");
x.t("myparentclass","string");
x.t("gotopage","two");
x.t("gotopage","(pcfelement)");
x.t("initialize","no");
x.t("initialize","null");
x.t("additive","expression");
x.t("argument","always");
x.t("argument","type");
x.t("argument","types");
x.t("argument","note");
x.t("argument","numbers");
x.t("custom","type");
x.t("custom","types");
x.t("virtual","machine");
x.t("avoid","relative-path");
x.t("qualify","type");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("methods","parameter");
x.t("methods","vary");
x.t("methods","type");
x.t("methods","gosu");
x.t("methods","collide");
x.t("methods","cannot");
x.t("methods","compile");
x.t("methods","override");
x.t("methods","named");
x.t("methods","downside");
x.t("methods","depending");
x.t("methods","result");
x.t("methods","defined");
x.t("methods","priority");
x.t("methods","conflict");
x.t("dispatches","enhancement");
x.t("collide","gosu");
x.t("collide","implicit");
x.t("alternatively","specify");
x.t("overriding","getter");
x.t("overriding","generic");
x.t("overriding","enhancement");
x.t("generic","parameter");
x.t("generic","functions");
x.t("generic","function");
x.t("generic","declaration");
x.t("continue","type");
x.t("non-java-backed","normally");
x.t("non-java-backed","types");
x.t("up","class");
x.t("omit","type");
x.t("omit","fully-qualified");
x.t("sign","determine");
x.t("determine","type");
x.t("declarations","variables");
x.t("trying","unwrapping");
x.t("supertype","throwable");
x.t("find","type");
x.t("arg","information");
x.t("fast","reasonable");
x.t("enhancement","method");
x.t("enhancement","methods");
x.t("enhancement","impossible");
x.t("enhancement","superclass");
x.t("enhancement","class");
x.t("correspondence","custom");
x.t("typeis","argument");
x.t("typeis","null");
x.t("allows","declare");
x.t("stack","expression");
x.t("stack","implicitly");
x.t("claimcenter","new");
x.t("claimcenter","6.0");
x.t("claimcenter","7.0");
x.t("mismatched","getter");
x.t("mismatched","property");
x.t("string","evaluates");
x.t("string","property");
x.t("string","no");
x.t("string","occurs");
x.t("string","cannot");
x.t("string","case-sensitive");
x.t("string","ensure");
x.t("string","null");
x.t("string","priority");
x.t("string","even");
x.t("fix","change");
x.t("fix","explicitly");
x.t("fix","error");
x.t("fix","capitalization");
x.t("fix","simply");
x.t("fix","code");
x.t("fix","issue");
x.t("fix","problem");
x.t("impossible","put");
x.t("write","code");
x.t("write","exception");
x.t("second","mismatched");
x.t("second","previous");
x.t("tried","property");
x.t("marked","method");
x.t("denominator","custom");
x.t("concept","gosu");
x.t("extra","functions");
x.t("6.0","gosu");
x.t("relative","current");
x.t("relative","path");
x.t("relative","paths");
x.t("relative","imports");
x.t("functions","regular");
x.t("functions","(methods)");
x.t("functions","different");
x.t("functions","expressions");
x.t("functions","technically");
x.t("functions","return");
x.t("functions","subclass");
x.t("fixing","issue");
x.t("overloaded","methods");
x.t("overloaded","variant");
x.t("setname","method");
x.t("setname","conflict");
x.t("error","setter");
x.t("error","explicitly");
x.t("error","refactor");
x.t("error","gosu");
x.t("error","fix");
x.t("error","marked");
x.t("error","relative");
x.t("error","important");
x.t("error","message");
x.t("error","occurred");
x.t("error","two");
x.t("error","typically");
x.t("error","subsequent");
x.t("supported","mismatched");
x.t("undefined","result");
x.t("review","code");
x.t("parenthesize","expression");
x.t("sometimes","require");
x.t("syntax","try");
x.t("syntax","no");
x.t("syntax","changes");
x.t("syntax","slightly");
x.t("syntax","deprecated");
x.t("suppose","referenced");
x.t("suppose","parent");
x.t("disk","name");
x.t("disk","gosu");
x.t("representation","typically");
x.t("operators","precedence");
x.t("operators","typeas");
x.t("coercion/conversion","operators");
x.t("occurs","within");
x.t("issues","change");
x.t("issues","gosu");
x.t("issues","function");
x.t("fail","fast");
x.t("overload","method");
x.t("affects","types");
x.t("affects","java");
x.t("means","path");
x.t("means","gosu");
x.t("means","two");
x.t("options","fixing");
x.t("feature","gosu");
x.t("guidewire_selectall","var");
x.t("side","effects");
x.t("side","equals");
x.t("underlying","field");
x.t("cause","property");
x.t("cause","run");
x.t("function","exactly");
x.t("function","generic");
x.t("function","guidewire_selectall");
x.t("function","function");
x.t("function","override");
x.t("function","syncobject");
x.t("function","takes");
x.t("function","foo");
x.t("function","expression");
x.t("function","result");
x.t("function","non-generic");
x.t("parent","class");
x.t("approach","ensures");
x.t("approach","cannot");
x.t("statically","dispatches");
x.t("define","properties");
x.t("define","property");
x.t("define","separate");
x.t("define","following");
x.t("different","types");
x.t("different","pcf");
x.t("different","parameterization");
x.t("cannot","overridden");
x.t("cannot","initialize");
x.t("cannot","overload");
x.t("cannot","covariantly");
x.t("cannot","override");
x.t("cannot","call");
x.t("may","one-to-one");
x.t("duplicated","methods");
x.t("words","write");
x.t("words","functions");
x.t("expressions","put");
x.t("expressions","words");
x.t("carefully","review");
x.t("ways","code");
x.t("ways","following");
x.t("starting","claimcenter");
x.t("starting","server");
x.t("instead","using");
x.t("technically","type");
x.t("technically","return");
x.t("accidental","priority");
x.t("accessing","cause");
x.t("language","keywords");
x.t("capitalization","indicated");
x.t("capitalization","gosu");
x.t("capitalization","match");
x.t("changes","gosu");
x.t("changes","compile");
x.t("compile","time");
x.t("compile","directly");
x.t("compile","gotopage");
x.t("compile","error");
x.t("compile","warning");
x.t("types","example");
x.t("types","arguments");
x.t("types","getters");
x.t("types","type");
x.t("types","new");
x.t("types","no");
x.t("types","overriding");
x.t("types","non-java-backed");
x.t("types","relative");
x.t("types","may");
x.t("types","match");
x.t("types","superclass");
x.t("types","override");
x.t("types","java");
x.t("types","catch");
x.t("match","conventional");
x.t("match","overridden");
x.t("match","gosu");
x.t("match","keyword");
x.t("match","parameterization");
x.t("match","minimize");
x.t("superclass","directly");
x.t("superclass","tried");
x.t("superclass","cannot");
x.t("superclass","define");
x.t("superclass","types");
x.t("superclass","simulate");
x.t("verify","argument");
x.t("things","least");
x.t("pcf","types");
x.t("variant","separate");
x.t("variant","called");
x.t("declaring","type");
x.t("declaring","variable");
x.t("redundant","accidental");
x.t("keyword","top");
x.t("keyword","gosu");
x.t("keyword","capitalization");
x.t("explicit","setter");
x.t("explicit","declared");
x.t("explicit","getter");
x.t("explicit","methods");
x.t("explicit","parentheses");
x.t("necessarily","affect");
x.t("specially","put");
x.t("participate","expressions");
x.t("rewrite","undeclared");
x.t("simply","fix");
x.t("simply","fully");
x.t("important","best");
x.t("code","example");
x.t("code","instance");
x.t("code","put");
x.t("code","gosu");
x.t("code","syntax");
x.t("code","types");
x.t("code","compile");
x.t("code","redundant");
x.t("code","invalid");
x.t("code","exception\u2019s");
x.t("code","interacts");
x.t("code","running");
x.t("code","catch");
x.t("code","var");
x.t("reference","guide");
x.t("loader","example");
x.t("loader","affects");
x.t("loader","although");
x.t("invalid","syncobject");
x.t("exception\u2019s","type");
x.t("unwrapping","exception");
x.t("languages","consider");
x.t("case-sensitive","language");
x.t("slightly","ways");
x.t("return","nothing");
x.t("return","type");
x.t("return","no");
x.t("return","different");
x.t("return","value");
x.t("return","specific");
x.t("override","setter");
x.t("override","getters");
x.t("override","methods");
x.t("override","generic");
x.t("override","function");
x.t("override","compile");
x.t("override","enhancements");
x.t("override","otherwise");
x.t("covariantly","overriding");
x.t("covariantly","override");
x.t("syncobject","print");
x.t("syncobject","returns");
x.t("fully","qualify");
x.t("fully","qualified");
x.t("issue","create");
x.t("issue","change");
x.t("issue","remove");
x.t("issue","compile");
x.t("issue","simply");
x.t("previous","example");
x.t("previous","gosu");
x.t("least","fail");
x.t("message","generify");
x.t("superclasses","enhancements");
x.t("affect","types");
x.t("known","unwrapping");
x.t("java","no");
x.t("java","gosu");
x.t("java","virtual");
x.t("java","representation");
x.t("java","code");
x.t("java","value");
x.t("java","classes");
x.t("java","bytecode");
x.t("ensure","property");
x.t("ensure","unwrap");
x.t("actual","static");
x.t("actual","exception");
x.t("variable","type");
x.t("variable","however");
x.t("variable","omit");
x.t("variable","value");
x.t("stand","alone");
x.t("(e)","caught");
x.t("parentheses","cast");
x.t("parentheses","claimcenter");
x.t("occurred","messsage");
x.t("longer","necessary");
x.t("longer","supported");
x.t("longer","define");
x.t("longer","participate");
x.t("null","arguments");
x.t("null","argument");
x.t("null","fix");
x.t("null","variable");
x.t("null","exception");
x.t("null","priority");
x.t("null","without");
x.t("null","generally");
x.t("consider","gosu");
x.t("typing","subpackage.myutil");
x.t("dispatch","within");
x.t("dispatch","priority");
x.t("writability","property");
x.t("qualified","paths");
x.t("named","gotopage");
x.t("downside","approach");
x.t("value","properties");
x.t("value","void");
x.t("value","stack");
x.t("value","cannot");
x.t("value","null");
x.t("value","following");
x.t("interacts","gosu");
x.t("running","relative");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("compatibility","issues");
x.t("declaration","exactly");
x.t("declaration","gosu");
x.t("declaration","function");
x.t("declaration","covariantly");
x.t("declaration","priority");
x.t("writable","method");
x.t("writable","property");
x.t("writable","superclass");
x.t("specific","type");
x.t("specific","subtype");
x.t("instanceof","calls");
x.t("overloading","involving");
x.t("depending","readability");
x.t("already","string");
x.t("parameterization","previously");
x.t("parameterization","overridden");
x.t("parameterization","match");
x.t("generate","error");
x.t("generate","implicit");
x.t("fixes","property");
x.t("extends","myparentclass");
x.t("generated","methods");
x.t("generated","bytecode");
x.t("flattened","down");
x.t("pcfelement","class");
x.t("programming","error");
x.t("programming","languages");
x.t("alone","statements");
x.t("alone","statement");
x.t("alone","gosu");
x.t("exception","example");
x.t("exception","change");
x.t("exception","no");
x.t("exception","alternatively");
x.t("exception","types");
x.t("exception","code");
x.t("exception","unwrapping");
x.t("exception","actual");
x.t("exception","specific");
x.t("exception","subtype");
x.t("exception","information");
x.t("exception","ioexception");
x.t("exception","catch");
x.t("exception","associated");
x.t("exception","object");
x.t("making","change");
x.t("import","example");
x.t("import","type");
x.t("takes","generic");
x.t("takes","string");
x.t("takes","integer");
x.t("foo","arg");
x.t("reasonable","error");
x.t("although","necessarily");
x.t("expression","question");
x.t("expression","string");
x.t("expression","functions");
x.t("expression","undefined");
x.t("expression","already");
x.t("expression","call");
x.t("valid","value");
x.t("hello","gosu");
x.t("evaluation","exception");
x.t("subtype","review");
x.t("subtype","exception");
x.t("throwable","catching");
x.t("com.mycompany.myclass","suppose");
x.t("page","error");
x.t("ignoring","type");
x.t("separate","enhancement");
x.t("separate","explicit");
x.t("dynamic","dispatch");
x.t("getname","setname");
x.t("information","generics");
x.t("information","including");
x.t("mysubclass","extends");
x.t("typical","code");
x.t("typeas","operators");
x.t("typeas","increased");
x.t("defined","superclasses");
x.t("defined","writable");
x.t("read-only","define");
x.t("result","example");
x.t("result","subclasses");
x.t("result","expression");
x.t("inference","feature");
x.t("equals","sign");
x.t("appropriate","type");
x.t("assuming","property");
x.t("implicitly","explicitly");
x.t("implicitly","generates");
x.t("case","trying");
x.t("unambiguously","variant");
x.t("subpackage.myutil","priority");
x.t("7.0","changed");
x.t("7.0","gosu");
x.t("7.0","previously");
x.t("7.0","undeclared");
x.t("enhancements","method");
x.t("enhancements","link");
x.t("enhancements","methods");
x.t("enhancements","override");
x.t("problem","java");
x.t("print","hello");
x.t("deprecated","priority");
x.t("fully-qualified","type");
x.t("fully-qualified","name");
x.t("called","relative");
x.t("integer","property");
x.t("integer","generate");
x.t("priority","starting");
x.t("priority","programming");
x.t("setters","continue");
x.t("setters","types");
x.t("two","possible");
x.t("two","methods");
x.t("two","options");
x.t("two","different");
x.t("enhanced","class");
x.t("otherwise","gosu");
x.t("classes","disk");
x.t("sense","generated");
x.t("note","typeis");
x.t("readability","writability");
x.t("typically","indicates");
x.t("typically","object");
x.t("prevents","gosu");
x.t("implicit","getter");
x.t("implicit","methods");
x.t("implicit","get/set");
x.t("get/set","methods");
x.t("wrapped","differently");
x.t("wrapped","evaluation");
x.t("object\u2019s","cause");
x.t("cases","omit");
x.t("cases","work");
x.t("work","gosu");
x.t("subclass","property");
x.t("subclass","declare");
x.t("subclass","verify");
x.t("subclass","enhanced");
x.t("call","method");
x.t("call","void");
x.t("call","error");
x.t("call","stand");
x.t("involving","non-java-backed");
x.t("numbers","argument");
x.t("package","code");
x.t("causes","run");
x.t("run","time");
x.t("following","sections");
x.t("following","property");
x.t("following","code");
x.t("non-generic","function");
x.t("system","find");
x.t("system","pcf");
x.t("signatures","java");
x.t("unwrap","exception");
x.t("class","getter");
x.t("class","compiles");
x.t("class","property");
x.t("class","no");
x.t("class","gosu");
x.t("class","enhancement");
x.t("class","disk");
x.t("class","writable");
x.t("class","com.mycompany.myclass");
x.t("class","typically");
x.t("minimize","compatibility");
x.t("warning","rather");
x.t("warning","really");
x.t("using","type");
x.t("using","enhancement");
x.t("using","typeis");
x.t("conflict","methods");
x.t("conflict","explicit");
x.t("conflict","generated");
x.t("general","import");
x.t("bytecode","jvm");
x.t("bytecode","gosu");
x.t("bytecode","flattened");
x.t("bytecode","enhancements");
x.t("overrides","getters");
x.t("overrides","getter");
x.t("subsequent","getter");
x.t("returns","false");
x.t("returns","no");
x.t("catch","type");
x.t("catch","block");
x.t("catch","supertype");
x.t("catch","(e)");
x.t("catch","exception");
x.t("ioexception","making");
x.t("evaluated","string");
x.t("adding","parentheses");
x.t("behavior","changed");
x.t("child","string");
x.t("child","declaration");
x.t("child","overrides");
x.t("simulate","dynamic");
x.t("(pcfelement)","resulting");
x.t("definitions","pcfelement");
x.t("without","uses");
x.t("without","declaring");
x.t("caught","exceptions");
x.t("associated","starting");
x.t("names","general");
x.t("paths","refer");
x.t("paths","fully");
x.t("var","text_val=eval");
x.t("var","string");
x.t("var","null");
x.t("getter/setter","types");
x.t("compiled","java");
x.t("including","catch");
x.t("catching","exceptions");
x.t("even","just");
x.t("even","cause");
x.t("even","without");
x.t("strictly","prevents");
x.t("generates","method");
x.t("generates","getname");
x.t("exceptions","gosu");
x.t("exceptions","changes");
x.t("exceptions","java");
x.t("exceptions","wrapped");
x.t("exceptions","higher");
x.t("increased","match");
x.t("imports","discouraged");
x.t("imports","types");
x.t("relative-path","imports");
x.t("server","summary");
x.t("object","example");
x.t("object","right");
x.t("object","typed");
x.t("object","dispatch");
x.t("object","sense");
x.t("object","object\u2019s");
x.t("object","child");
x.t("difference","non-java-backed");
x.t("generally","speaking");
x.t("checked","exception");
x.t("checked","exceptions");
x.t("undeclared","try");
x.t("undeclared","type");
x.t("undeclared","exception");
x.t("specify","specific");
x.t("higher","precedence");
}
