package gw.sampledata

uses gw.pl.persistence.core.Bundle
uses gw.api.util.DateUtil
uses java.util.HashMap
uses gw.api.databuilder.AccountSpecialHandlingBuilder
uses gw.api.util.CurrencyUtil

@Export
class SampleWorkersCompClaims extends SampleDataBase 
{
  var accountHolders = new HashMap<String,Company>()
  
  construct(inCache : SampleDataCache) {
    super(inCache)
  }

  override property get Description() : String {
    return "Workers Comp     Claims and associated Contacts, Policies, Exposures, Notes, ClaimContacts, Activities and Financials"
  }
  
  private function createAccountHolders(bundle:Bundle) {
    var wright = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("ab:4011")
        .withLocalizedTaxID()
        //.withTaxID("130-55-4894")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("253 McAfee Ct.")
          .withCountry("US")
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType("home")
          .withCity("Thousand Oaks"))
        .withWorkPhone("818-446-1206")
        .withName("Wright Construction")
        .create(bundle)
    accountHolders[wright.PublicID] = wright
        
    var tiptop = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("ab:4012")
        .withLocalizedTaxID()
        //.withTaxID("128-55-8894")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1075 Aspen Lane")
          .withCountry("US")
          .withPostalCode("91357")
          .withState(State.TC_CA)
          .withAddressType("home")
          .withCity("Diamond View"))
        .withWorkPhone("818-252-2546")
        .withName("TipTop Roofing")
        .create(bundle)
     accountHolders[tiptop.PublicID] = tiptop
     
     var gromett = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("ab:4013")
        .withLocalizedTaxID()
        //.withTaxID("177-55-7804")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("253 McAfee Ct.")
          .withCountry("US")
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType("home")
          .withCity("Thousand Oaks"))
        .withWorkPhone("213-475-9465")
        .withName("TR Grommett")
        .create(bundle)
     accountHolders[gromett.PublicID] = gromett
     
     var pnp = new gw.api.databuilder.CompanyBuilder()
        .withLocalizedTaxID()
        //.withTaxID("190-55-7594")
        .withPublicId("ab:30001")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1245 Fair Oaks Ave")
          .withCountry("US")
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType("business")
          .withCity("Pasadena"))
        .withWorkPhone("847-279-3399")
        .withName("P&P Construction")
        .create(bundle)
     accountHolders[pnp.PublicID] = pnp
  }
    
  override function testSampleData(bundle : Bundle) {
    createAccountHolders(bundle)
    (\->
    {
      var addressDemoSample1022 = new gw.api.databuilder.AddressBuilder()
        .withAddressLine1("846 Yount Ln.")
        .withCountry("US")
        .withPostalCode("91357")
        .withState(State.TC_CA)
        .withAddressType("business")
        .withCity("Hollywood")
        .create(bundle)

      var documentDemoSample6 = new gw.api.databuilder.DocumentBuilder()
        .withDocUID("312-36-368870/OSHA8IBDXE0000.tif")
        .withDMS(true)
        .withObsolete(false)
        .withStatus("final")
        .withInbound(false)
        .withDateModified(BaseDate.addDays(0))
        .withName("OSHA8IBDXE0000.tif")
        .withAuthor("ClaimCenter")
        .withMimeType("image/tiff")
        .create(bundle)

      var documentDemoSample7 = new gw.api.databuilder.DocumentBuilder()
        .withDocUID("312-36-368870/Incident8IBDXE0001.tif")
        .withDMS(true)
        .withObsolete(false)
        .withStatus("final")
        .withInbound(false)
        .withDateModified(BaseDate.addDays(0))
        .withName("Incident8IBDXE0001.tif")
        .withAuthor("ClaimCenter")
        .withMimeType("image/tiff")
        .create(bundle)

      var contactDemoSample3029 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Furman")
        .withPublicId("demo_sample:3029")
        .withFirstName("Nancy")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("235 Commerce Way")
          .withCountry("US")
          .withPostalCode("91155")
          .withState(State.TC_CA)
          .withAddressType("business")
          .withCity("Los Angeles"))
        .withWorkPhone("818-446-1206")
        .create(bundle)

      var contactDemoSample404 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Dunn")
        .withPublicId("demo_sample:404")
        .withFirstName("Willy")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("435 Duarte Ave")
          .withCountry("US")
          .withPostalCode("91006")
          .withState(State.TC_CA)
          .withAddressType("home")
          .withCity("Arcadia"))
        .withWorkPhone("619-275-2346")
        .create(bundle)

      var contactDemoSample4005 = new gw.api.databuilder.DoctorBuilder()
        .withLastName("Arcadia Medical Group")
        .withPublicId("demo_sample:4005")
        .withFirstName("DoctorFrom")
        .withPrimaryPhone("work")
        .withPreferred(true)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1243 Fair Oaks Ave")
          .withCountry("US")
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType("home")
          .withCity("Pasadena"))
        .withWorkPhone("626-473-9576")
        .create(bundle)

      var contactDemoSample4011 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:4011")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("253 McAfee Ct.")
          .withCountry("US")
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType("home")
          .withCity("Thousand Oaks"))
        .withWorkPhone("818-446-1206")
        .withName("Wright Construction")
        .create(bundle)

      var sampleAccount1 = gw.api.databuilder.AccountBuilder
        .forHolder(createLocalFromAB("demo_acct:4011", accountHolders["ab:4011"], bundle))
        .withPublicId("sample_account:8091")
        .withAccountNumber("ACC12260")
        .withSpecialHandling(new AccountSpecialHandlingBuilder())
        .create(bundle)

      var contactDemoSample501 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Albee")
        .withPublicId("demo_sample:501")
        .withFirstName("Jennifer")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("354 Cactus Ln")
          .withCountry("US")
          .withPostalCode("85716")
          .withState(State.TC_AZ)
          .withAddressType("home")
          .withCity("Tucson"))
        .withWorkPhone("818-446-1206")
        .create(bundle)

      var classCodeDemoSample40001 = new gw.api.databuilder.ClassCodeBuilder()
        .withCode("800001")
        .withDescription("Clerical")
        .create(bundle)

      var classCodeDemoSample40002 = new gw.api.databuilder.ClassCodeBuilder()
        .withCode("800002")
        .withDescription("Janitorial")
        .create(bundle)

      var classCodeDemoSample40003 = new gw.api.databuilder.ClassCodeBuilder()
        .withCode("800003")
        .withDescription("Construction")
        .create(bundle)

      var classCodeDemoSample999 = new gw.api.databuilder.ClassCodeBuilder()
        .withCode("881001")
        .create(bundle)

      var claim = (\->new gw.api.databuilder.ClaimBuilder()
        .withIncidentReport(false)
        .withAssignmentStatus("assigned")
        .withLossDate(BaseDate.addDays(-32))
        .withFlaggedReason("Paying Total Temp on minor injury after 4 weeks")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy("wc_fast")
        .withEmploymentData( new gw.api.databuilder.EmploymentDataBuilder()
          .withPayPeriod("monthly")
          .withOccupation("construction")
          .withPaidFull(true)
          .withHireState(State.TC_CA)
          .withLastWorkedDate(BaseDate.addDays(-32))
          .withWageAmount(750bd.ofDefaultCurrency())
          .withEmploymentStatus("fulltime")
          .withClassCode(classCodeDemoSample999)
          .withInjuryStartTime(DateUtil.currentDate().Time as java.util.Date)
          .withNumDaysWorked(5)
          .withNumHoursWorked(8)
          .withWagePaymentCont(false)
          .withHireDate(BaseDate.addDays(-3379)))
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged("isflagged")
        .withLossLocation(addressDemoSample1022)
        .withLossCause("fall")
        .withClaimNumber("312-36-368870")
        .withMainContactType("employee")
        .withReportedByType("employee")
        .withLossType("WC")
        .withValidationLevel("newloss")
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(274))
          .withUnderwritingCo("parent")
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-3266))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup("acme_wc")
          .withEffectiveDate(BaseDate.addDays(-90))
          .withStatus("inforce")
          .withWCStates("CA, NV")
          .withPolicyNumber("34-123436")
          .withPublicId("demo_sample:101")
          .withTotalProperties(1)
          .withPolicyType("WorkersComp")
          .withTotalVehicles(0)
          .withClassCode(classCodeDemoSample40001)
          .withClassCode(classCodeDemoSample40002)
          .withClassCode(classCodeDemoSample40003)
          .withClassCode(classCodeDemoSample999)
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Labor Contractor Endorsement")
            .withFormNumber("WC 00 03 20 A"))
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Employers Liability Coverage Endorsement ")
            .withFormNumber("WC 00 03 03 B"))
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withIncidentLimit(100000bd.ofDefaultCurrency())
            .withType("WCEmpLiabCov")
            .withNotes("Bodily Injury By Accident")
            .withDeductible(10000bd.ofDefaultCurrency()))
          .withCoverage(new gw.api.databuilder.PolicyCoverageBuilder()
                          .withIncidentLimit(500000bd.ofDefaultCurrency())
                          .withType("WCEmpLiabCov")
                          .withNotes("Bodily Injury By Disease for Policy")
                          .withDeductible(10000bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withIncidentLimit(100000bd.ofDefaultCurrency())
            .withType("WCEmpLiabCov")
            .withNotes("Bodily Injury By Disease per Employee")
            .withDeductible(1000bd.ofDefaultCurrency()))
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(1)
            .withPolicyLocation( new gw.api.databuilder.PolicyLocationBuilder()
              .withAddress(addressDemoSample1022)))
          .withPolicyAccount(sampleAccount1)
          .withContactInRole(contactDemoSample4011, "insured")
          .withContactInRole(contactDemoSample501, "agent"))
        .withClaimantReportedDate(BaseDate.addDays(-32))
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withJurisdictionState("CA")
        .withSegment("wc_lost_time")
        .withReportedDate(BaseDate.addDays(-32))
        .withCoverageInQuestion(false)
        .withLOBCode("WorkersCompLine")
        .withPublicId("demo_sample:3001")
        .withDescription("Worker fell from 2nd story scaffolding")
        .withState("open")
        .withAssignedUser(findUserByUserName("gickes"))
        .withMetroReport( new gw.api.databuilder.MetroReportBuilder()
          .withMetroReportType("N")
          .withDoc(documentDemoSample6)
          .withAgentState(State.TC_CA)
          .withAgentCity("Arcadia")
          .withStatus("received"))
        .withMetroReport( new gw.api.databuilder.MetroReportBuilder()
          .withMetroReportType("I")
          .withDoc(documentDemoSample7)
          .withAgentState(State.TC_CA)
          .withAgentCity("Arcadia")
          .withStatus("received"))
        .withDocument(documentDemoSample6)
        .withDocument(documentDemoSample7)
        .withContactInRole(contactDemoSample404, "checkpayee")
        .withContactInRole(contactDemoSample4005, "checkpayee")
        .withContactInRole(contactDemoSample404, "claimant")
        .withContactInRole(contactDemoSample3029, "maincontact")
        .withContactInRole(contactDemoSample3029, "reporter")
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic("general")
          .withAuthoringDate(BaseDate.addDays(-32))
          .withSubject("Initial phone call with employer")
          .withAuthor(findUserByUserName("cclark"))
          .withBody("Company reports that claimant was working on 2nd floor scaffolding, installing weather stripping.  According to co-workers, injured worker unclipped from safety harness in order to climb down frm the scaffolding and then lost his balance and fell to the ground.  The injured worker immediately got back up but complained of a sore leg and sore lower back.  A supervisor directed him to the doctor for initial treatment and reported the accident to the HR department."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic("general")
          .withAuthoringDate(BaseDate.addDays(-29))
          .withSubject("Claim update")
          .withAuthor(findUserByUserName("gickes"))
          .withBody("I spoke with all three parties (claimant, account, doctor) and case seems very straightforward.  Foreman saw and confirms the accident, so I decided not to take formal witness statements.  Doctor confirmed bruises to the right leg and hip and a strained lower back.  The bruises were treated with ice and OTC pain medication.  The back injury appeared minor, but the worker will need to be absent from work for at least a week and until doctor can confirm that strain has recovered."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic("general")
          .withAuthoringDate(BaseDate.addDays(-25))
          .withSubject("Phone call with claimant")
          .withAuthor(findUserByUserName("gickes"))
          .withBody("Spoke with the injured worker.  He says that he still experiences pain whenever bending over after 1 week but has no other complaints. "))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-4))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withMandatory(true)
          .withPriority("high")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(3))
          .withStatus("open")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("med_clear_for_light_duty"))
          .withSubject("Check on medical clearance for light duty work")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-2)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority("urgent")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_insured"))
          .withSubject("Make initial contact with employer")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority("urgent")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_claimant"))
          .withSubject("Make initial contact with injured worker")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority("high")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("first_report"))
          .withSubject("File Employer's First Notice")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority("high")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("employee_notice"))
          .withSubject("Get Employee's Notice of Injury")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("wage_stmt"))
          .withSubject("Get wage statement and tax status")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(false)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withStatus("skipped")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("witness_statement"))
          .withSubject("Get a statement from witness")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-19))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-14))
          .withMandatory(true)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withDescription("Account threshold: $3000")
          .withActivityPattern(findActivityPatternByCode("notice_cost_above_threshold"))
          .withSubject("Notify account - expected cost above threshold")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-14)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-23))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-18))
          .withMandatory(false)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("subro_check"))
          .withSubject("Determine if opportunity for recovery")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-18)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-22))
          .withMandatory(false)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("initial_30day_review"))
          .withSubject("10 day review")
          .withAssignedUser(findUserByUserName("wmotley"))
          .withTargetDate(BaseDate.addDays(-22)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-22))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withMandatory(false)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withStatus("open")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("initial_30day_review"))
          .withSubject("30 day review")
          .withAssignedUser(findUserByUserName("wmotley"))
          .withTargetDate(BaseDate.addDays(-2)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-22))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withMandatory(true)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("LA Medical Mgmt"))
          .withType("general")
          .withStatus("open")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("medical_report_claimant"))
          .withSubject("Review medical treatments")
          .withAssignedUser(findUserByUserName("spierce"))
          .withTargetDate(BaseDate.addDays(8)))
        .create(bundle))()

      var coverageToShare = claim.Policy.Coverages.singleWhere(\ c -> c.Type == "WCEmpLiabCov" and c.Notes == "Bodily Injury By Disease for Policy")

      var claimInfoDemoSample3001 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:3001")
        .withClaimNumber("312-36-368870")
        .onClaim(claim)
        .create(bundle)

      var policyPeriodDemoSample70101 = new gw.api.databuilder.PolicyPeriodBuilder()
        .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claimInfoDemoSample3001))
        .withPolicyPeriodType("policy")
        .withExpirationDate(BaseDate.addDays(274))
        .withPolicyNumber("34-123436")
        .withPublicId("demo_sample:70101")
        .withPolicyType("WorkersComp")
        .withEffectiveDate(BaseDate.addDays(-90))
        .create(bundle)

      var aggregateLimitDemoSample90003 = new gw.api.databuilder.AggregateLimitBuilder()
        .withLimitCurrencyAmount(500000bd.ofDefaultCurrency())
        .withCoverageLine( new gw.api.databuilder.CoverageLineLimitBuilder()
          .withCoverageLine( new gw.api.databuilder.CoverageLineBuilder()
            .withCoverageType("WCEmpLiabCov")
            .withCoverageSubtype("PolicyCoverage")
            .withCoverage(coverageToShare)
            .onPolicyPeriod(policyPeriodDemoSample70101)) )
        .withPublicId("demo_sample:90003")
        .withLimitType(AggregateLimitType.TC_NONE)
        .onPolicyPeriod(policyPeriodDemoSample70101)
        .create(bundle)
      var exposureDemoSample150001 = new gw.api.databuilder.ExposureBuilder()
        .onClaim(claim)
        .withOtherCoverage(false)
        .withLossParty("insured")
        .withDaysInWeek("five")
        .withExposureType("LostWages")
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus("assigned")
        .withStrategy("wc_fast")
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage("WCWorkersCompCov")
        .withProgress("investigation")
        .withAverageWeeklyWages(750bd.ofDefaultCurrency())
        .withClaimOrder(2)
        .withPublicId("demo_sample:150001")
        .withState("open")
        .withAssignedUser(findUserByUserName("gickes"))
        .withCoverageSubType("WCWorkersCompWAGES")
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder())
        .create(bundle)

      var exposureDemoSample30001 = new gw.api.databuilder.ExposureBuilder()
        .onClaim(claim)
        .withOtherCoverage(false)
        .withWCPreexDisblty(false)
        .withLossParty("insured")
        .withExposureType("WCInjuryDamage")
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus("assigned")
        .withStrategy("wc_fast")
        .withProgress("investigation")
        .withJurisdictionState("CA")
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage("WCWorkersCompCov")
        .withSegment("wc_med_only")
        .withClaimOrder(1)
        .withPublicId("demo_sample:30001")
        .withState("open")
        .withAssignedUser(findUserByUserName("gickes"))
        .withCoverageSubType("WCWorkersCompMED")
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
          .withGeneralInjuryType("specific")
          .withSeverity("minor")
          .withDescription("PY was here")
          .withMedicalTreatmentType("one_doctor")
          .withClaimIncident(true)
          .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
            .withPrimaryBodyPart("trunk")
            .withOrdering(100)))
        .withContactInRole(contactDemoSample4005, "doctor")
        .create(bundle)


      var transactionSetDemoSample20002 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-21))
        .withRequestingUser(findUserByUserName("gickes"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20010 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-27))
        .withRequestingUser(findUserByUserName("gickes"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20011 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-14))
        .withRequestingUser(findUserByUserName("gickes"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20012 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-7))
        .withRequestingUser(findUserByUserName("gickes"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20013 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-6))
        .withRequestingUser(findUserByUserName("gickes"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20004 = new gw.api.databuilder.ReserveSetBuilder()
        .withApprovalDate(BaseDate.addDays(-9))
        .withRequestingUser(findUserByUserName("gickes"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var reserveLineDemoSample9 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample150001)
        .withCostType("claimcost")
        .withCostCategory("vocational")
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample10 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample150001)
        .withCostType("claimcost")
        .withCostCategory("ttd")
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample11 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample30001)
        .withCostType("aoexpense")
        .withCostCategory("casemgmt")
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample12 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample30001)
        .withCostType("claimcost")
        .withCostCategory("medical")
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample13 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample150001)
        .withCostType("claimcost")
        .withCostCategory("supplemental")
        .withClaim(claim)
        .create(bundle)

      var checkDemoSample10101 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-21))
        .withScheduledSendDate(BaseDate.addDays(-21))
        .withBankAccount("default")
        .onCheckSet(transactionSetDemoSample20002)
        .withPayTo("Arcadia Medical Group")
        .withStatus("issued")
        .withPaymentMethod("check")
        .withCheckNumber("10444")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample4005)
              .withPayeeType("claimant"))
        .withType("primary")
        .create(bundle)

      var checkDemoSample10102 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-7))
        .withScheduledSendDate(BaseDate.addDays(-7))
        .withBankAccount("default")
        .onCheckSet(transactionSetDemoSample20010)
        .withPayTo("William Dunn")
        .withStatus("issued")
        .withPaymentMethod("check")
        .withCheckNumber("10567")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample404)
              .withPayeeType("claimant"))
        .withType("primary")
        .create(bundle)

      var checkDemoSample10103 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-27))
        .withScheduledSendDate(BaseDate.addDays(-27))
        .withBankAccount("default")
        .onCheckSet(transactionSetDemoSample20011)
        .withPayTo("William Dunn")
        .withStatus("issued")
        .withPaymentMethod("check")
        .withCheckNumber("10690")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample404)
              .withPayeeType("claimant"))
        .withType("primary")
        .create(bundle)

      var checkDemoSample10104 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-14))
        .withScheduledSendDate(BaseDate.addDays(-14))
        .withBankAccount("default")
        .onCheckSet(transactionSetDemoSample20012)
        .withPayTo("William Dunn")
        .withStatus("issued")
        .withPaymentMethod("check")
        .withCheckNumber("10813")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample404)
              .withPayeeType("claimant"))
        .withType("primary")
        .create(bundle)

      var checkDemoSample10105 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-7))
        .withScheduledSendDate(BaseDate.addDays(-7))
        .withBankAccount("default")
        .onCheckSet(transactionSetDemoSample20013)
        .withPayTo("William Dunn")
        .withStatus("issued")
        .withPaymentMethod("check")
        .withCheckNumber("10936")
        .withPayee((new gw.api.databuilder.CheckPayeeBuilder().withPayee(contactDemoSample404)
          .withPayeeType("claimant")))
        .withType("primary")
        .create(bundle)

      var transactionDemoSample10010 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample9)
        .onExposure(exposureDemoSample150001)
        .onTransactionSet(transactionSetDemoSample20004)
        .withCostType("claimcost")
        .withCostCategory("vocational")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Voc Rehab Benefits")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample10011 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample10)
        .onExposure(exposureDemoSample150001)
        .onTransactionSet(transactionSetDemoSample20004)
        .withCostType("claimcost")
        .withCostCategory("ttd")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefits")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(4000bd.ofDefaultCurrency())
          .withClaimAmount(4000bd.ofDefaultCurrency())
          .withReservingAmount(4000bd.ofDefaultCurrency())
          .withTransactionAmount(4000bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample10012 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample11)
        .onExposure(exposureDemoSample30001)
        .onTransactionSet(transactionSetDemoSample20004)
        .withCostType("aoexpense")
        .withCostCategory("casemgmt")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Case Management")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample10013 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample12)
        .onExposure(exposureDemoSample30001)
        .onTransactionSet(transactionSetDemoSample20004)
        .withCostType("claimcost")
        .withCostCategory("medical")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Emergency room visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(2500bd.ofDefaultCurrency())
          .withClaimAmount(2500bd.ofDefaultCurrency())
          .withReservingAmount(2500bd.ofDefaultCurrency())
          .withTransactionAmount(2500bd.ofDefaultCurrency())
          .withLineCategory("hospital")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Chiropractor's visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("chiro")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample10014 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample12)
        .onExposure(exposureDemoSample30001)
        .onTransactionSet(transactionSetDemoSample20004)
        .withCostType("claimcost")
        .withCostCategory("medical")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Emergency room visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(6500bd.ofDefaultCurrency())
          .withClaimAmount(6500bd.ofDefaultCurrency())
          .withReservingAmount(6500bd.ofDefaultCurrency())
          .withTransactionAmount(6500bd.ofDefaultCurrency())
          .withLineCategory("hospital")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Therapy")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(1500bd.ofDefaultCurrency())
          .withClaimAmount(1500bd.ofDefaultCurrency())
          .withReservingAmount(1500bd.ofDefaultCurrency())
          .withTransactionAmount(1500bd.ofDefaultCurrency())
          .withLineCategory("pt")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Medication")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("drugs")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample10015 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample13)
        .onExposure(exposureDemoSample150001)
        .onTransactionSet(transactionSetDemoSample20004)
        .withCostType("claimcost")
        .withCostCategory("supplemental")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Supplemental Earnings")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20006 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample10)
        .onTransactionSet(transactionSetDemoSample20010)
        .withCostCategory("ttd")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10102)
        .withPaymentType("partial")
        .onExposure(exposureDemoSample150001)
        .withCostType("claimcost")
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20007 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample12)
        .onTransactionSet(transactionSetDemoSample20002)
        .withCostCategory("medical")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10101)
        .withPaymentType("partial")
        .onExposure(exposureDemoSample30001)
        .withCostType("claimcost")
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("2nd consultation")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("doctor")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20008 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample12)
        .onTransactionSet(transactionSetDemoSample20002)
        .withCostCategory("medical")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10101)
        .withPaymentType("partial")
        .onExposure(exposureDemoSample30001)
        .withCostType("claimcost")
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Urgent Care")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("doctor")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20009 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample10)
        .onTransactionSet(transactionSetDemoSample20011)
        .withCostCategory("ttd")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10103)
        .withPaymentType("partial")
        .onExposure(exposureDemoSample150001)
        .withCostType("claimcost")
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20010 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample10)
        .onTransactionSet(transactionSetDemoSample20012)
        .withCostCategory("ttd")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10104)
        .withPaymentType("partial")
        .onExposure(exposureDemoSample150001)
        .withCostType("claimcost")
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20012 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample12)
        .onTransactionSet(transactionSetDemoSample20002)
        .withCostCategory("medical")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10101)
        .withPaymentType("partial")
        .onExposure(exposureDemoSample30001)
        .withCostType("claimcost")
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Chiropractor's visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("chiro")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20013 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample10)
        .onTransactionSet(transactionSetDemoSample20013)
        .withCostCategory("ttd")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10105)
        .withPaymentType("partial")
        .onExposure(exposureDemoSample150001)
        .withCostType("claimcost")
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

    })()

    (\->
    {
      var contactDemoSample3030 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Peters")
        .withPublicId("demo_sample:3030")
        .withFirstName("Wes")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("240 Commerce Way")
          .withCountry("US")
          .withPostalCode("91155")
          .withState(State.TC_CA)
          .withAddressType("business")
          .withCity("Los Angeles"))
        .withWorkPhone("619-275-5986")
        .create(bundle)

      var contactDemoSample409 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Wallace")
        .withPublicId("demo_sample:409")
        .withFirstName("Wendell")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("4263 Live Oak Blvd.")
          .withCountry("US")
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType("home")
          .withCity("San Gabriel"))
        .withWorkPhone("619-275-5986")
        .create(bundle)

      var contactDemoSample4006 = new gw.api.databuilder.DoctorBuilder()
        .withLastName("Pasadena Medical Group")
        .withPublicId("demo_sample:4006")
        .withFirstName("DoctorFrom")
        .withPrimaryPhone("work")
        .withPreferred(true)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1243 Fair Oaks Ave")
          .withCountry("US")
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType("home")
          .withCity("Pasadena"))
        .withWorkPhone("619-275-2346")
        .create(bundle)

      var contactDemoSample4012 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:4012")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1075 Aspen Lane")
          .withCountry("US")
          .withPostalCode("91357")
          .withState(State.TC_CA)
          .withAddressType("home")
          .withCity("Diamond View"))
        .withWorkPhone("818-252-2546")
        .withName("TipTop Roofing")
        .create(bundle)
        
     var sampleAccount2 = gw.api.databuilder.AccountBuilder
        .forHolder(createLocalFromAB("demo_acct:4012", accountHolders["ab:4012"], bundle))
        .withPublicId("sample_account:8092")
        .withAccountNumber("ACC12261")
        .withSpecialHandling(new AccountSpecialHandlingBuilder())
        .create(bundle)

      var contactDemoSample10045 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Albee")
        .withPublicId("demo_sample:10045")
        .withFirstName("Jennifer")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("354 Cactus Ln")
          .withCountry("US")
          .withPostalCode("85716")
          .withState(State.TC_AZ)
          .withAddressType("home")
          .withCity("Tucson"))
        .withWorkPhone("818-446-1206")
        .create(bundle)

      var contactDemoSample2221 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Egertson")
        .withPublicId("demo_sample:2221")
        .withFirstName("Karen")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("255 McAfee Ct.")
          .withCountry("US")
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType("home")
          .withCity("Thousand Oaks"))
        .withWorkPhone("213-457-6399")
        .create(bundle)

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withIncidentReport(false)
        .withAssignmentStatus("assigned")
        .withLossDate(BaseDate.addDays(-7))
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy("wc_fast")
        .withEmploymentData( new gw.api.databuilder.EmploymentDataBuilder()
          .withPayPeriod("monthly")
          .withOccupation("construction")
          .withPaidFull(true)
          .withHireState(State.TC_CA)
          .withLastWorkedDate(BaseDate.addDays(-7))
          .withWageAmount(600bd.ofDefaultCurrency())
          .withEmploymentStatus("fulltime")
          .withInjuryStartTime(DateUtil.currentDate().Time as java.util.Date)
          .withNumDaysWorked(5)
          .withNumHoursWorked(8)
          .withWagePaymentCont(false)
          .withHireDate(BaseDate.addDays(-3268)))
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged("neverflagged")
        .withLossLocation(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("2846 Rowe St.")
          .withCountry("US")
          .withPostalCode("92101")
          .withState(State.TC_CA)
          .withAddressType("business")
          .withCity("San Diego"))
        .withLossCause("fall")
        .withClaimNumber("312-36-368889")
        .withMainContactType("employee")
        .withReportedByType("employee")
        .withLossType("WC")
        .withValidationLevel("newloss")
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(274))
          .withUnderwritingCo("parent")
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-3266))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup("acme_wc")
          .withEffectiveDate(BaseDate.addDays(-90))
          .withStatus("inforce")
          .withPolicyNumber("34-386734")
          .withPublicId("demo_sample:108")
          .withTotalProperties(0)
          .withPolicyType("WorkersComp")
          .withTotalVehicles(0)
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withType("WCEmpLiabCov"))
          .withPolicyAccount(sampleAccount2)
          .withContactInRole(contactDemoSample4012, "insured")
          .withContactInRole(contactDemoSample10045, "agent"))
        .withClaimantReportedDate(BaseDate.addDays(-7))
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withJurisdictionState("CA")
        .withSegment("wc_lost_time")
        .withReportedDate(BaseDate.addDays(-7))
        .withCoverageInQuestion(false)
        .withLOBCode("WorkersCompLine")
        .withPublicID("demo_sample:3020")
        .withDescription("Twisted ankle from slip and fall in elevator")
        .withState("open")
        .withAssignedUser(findUserByUserName("gickes"))
        .withContactInRole(contactDemoSample409, "claimant")
        .withContactInRole(contactDemoSample3030, "maincontact")
        .withContactInRole(contactDemoSample2221, "reporter")
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic("general")
          .withAuthoringDate(BaseDate.addDays(-6))
          .withSubject("Initial phone call with employer")
          .withAuthor(findUserByUserName("cclark"))
          .withBody("The injured worker complained to his supervisor of a sprained ankle soon after arriving at work.  According to the worker, he slipped upon stepping into the elevator and fell to the floor.  No one else witnessed the scene of the accident."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic("general")
          .withAuthoringDate(BaseDate.addDays(-5))
          .withSubject("Attempted to reach claimant")
          .withAuthor(findUserByUserName("gickes"))
          .withBody("The number I was given for the claimant was wrong.  I left a message with the employer to send me a correct number or to have the claimant call me."))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-7))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-5))
          .withMandatory(true)
          .withPriority("urgent")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(2))
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_insured"))
          .withSubject("Make initial contact with employer")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-5)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-7))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withMandatory(true)
          .withPriority("urgent")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(2))
          .withStatus("open")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_claimant"))
          .withSubject("Make initial contact with injured worker")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-5)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-7))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-2))
          .withMandatory(true)
          .withPriority("high")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(8))
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("first_report"))
          .withSubject("File Employer's First Notice")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-2)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-7))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-2))
          .withMandatory(true)
          .withPriority("high")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(8))
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("employee_notice"))
          .withSubject("Get Employee's Notice of Injury")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(-2)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-7))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withMandatory(true)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(18))
          .withStatus("open")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("wage_stmt"))
          .withSubject("Get wage statement and tax status")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(3)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-7))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withMandatory(false)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withStatus("open")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("initial_30day_review"))
          .withSubject("10 day review")
          .withAssignedUser(findUserByUserName("wmotley"))
          .withTargetDate(BaseDate.addDays(3)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-7))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withMandatory(true)
          .withPriority("urgent")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(5))
          .withStatus("open")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("claim_ack_letter"))
          .withSubject("Send Notification Letter to Agent")
          .withAssignedUser(findUserByUserName("gickes"))
          .withTargetDate(BaseDate.addDays(0)))
        .create(bundle)

      var claimInfoDemoSample3020 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:3020")
        .withClaimNumber("312-36-368889")
        .onClaim(claim)
        .create(bundle)

      var policyPeriodDemoSample70108 = new gw.api.databuilder.PolicyPeriodBuilder()
        .withPolicy(new gw.api.databuilder.PeriodPolicyBuilder().onClaimInfo(claimInfoDemoSample3020))
        .withPolicyPeriodType("policy")
        .withExpirationDate(BaseDate.addDays(274))
        .withPolicyNumber("34-386734")
        .withPublicId("demo_sample:70108")
        .withPolicyType("WorkersComp")
        .withEffectiveDate(BaseDate.addDays(-90))
        .create(bundle)

      var exposureDemoSample30002 = new gw.api.databuilder.ExposureBuilder()
        .onClaim(claim)
        .withOtherCoverage(false)
        .withWCPreexDisblty(false)
        .withLossParty("insured")
        .withExposureType("WCInjuryDamage")
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus("assigned")
        .withStrategy("wc_fast")
        .withProgress("investigation")
        .withJurisdictionState("CA")
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage("WCWorkersCompCov")
        .withSegment("wc_med_only")
        .withClaimOrder(1)
        .withPublicId("demo_sample:30002")
        .withState("open")
        .withAssignedUser(findUserByUserName("gickes"))
        .withCoverageSubType("WCWorkersCompMED")
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
          .withGeneralInjuryType("specific")
          .withSeverity("minor")
          .withDescription("Minor sprain to left ankle")
          .withMedicalTreatmentType("one_doctor")
          .withClaimIncident(true)
          .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
            .withPrimaryBodyPart("lower")
            .withOrdering(100)))
        .withContactInRole(contactDemoSample4006, "doctor")
        .create(bundle)

      var exposureDemoSample150002 = new gw.api.databuilder.ExposureBuilder()
         .onClaim(claim)
        .withOtherCoverage(false)
        .withLossParty("insured")
        .withDaysInWeek("five")
        .withExposureType("LostWages")
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus("assigned")
        .withStrategy("wc_fast")
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage("WCWorkersCompCov")
        .withProgress("investigation")
        .withAverageWeeklyWages(600bd.ofDefaultCurrency())
        .withClaimOrder(2)
        .withPublicId("demo_sample:150002")
        .withState("open")
        .withAssignedUser(findUserByUserName("gickes"))
        .withCoverageSubType("WCWorkersCompWAGES")
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder())
        .create(bundle)
    })()

    (\->
    {
      var contactDemoSample3033 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Sallade")
        .withPublicId("demo_sample:3033")
        .withFirstName("Paul")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("245 Commerce Way")
          .withCountry("US")
          .withPostalCode("91155")
          .withState(State.TC_CA)
          .withAddressType("business")
          .withCity("Los Angeles"))
        .withWorkPhone("626-473-9576")
        .create(bundle)

      var contactDemoSample4013 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:4013")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("253 McAfee Ct.")
          .withCountry("US")
          .withPostalCode("91145")
          .withState(State.TC_CA)
          .withAddressType("home")
          .withCity("Thousand Oaks"))
        .withWorkPhone("213-475-9465")
        .withName("TR Grommett")
        .create(bundle)
        
      var sampleAccount3 = gw.api.databuilder.AccountBuilder
        .forHolder(createLocalFromAB("demo_acct:4013", accountHolders["ab:4013"], bundle))
        .withPublicId("sample_account:8093")
        .withAccountNumber("ACC12262")
        .withSpecialHandling(new AccountSpecialHandlingBuilder())
        .create(bundle)

      var contactDemoSample202 = new gw.api.databuilder.MedicalCareOrgBuilder()
        .withPublicId("demo_sample:202")
        .withPrimaryPhone("work")
        .withPreferred(true)
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1243 Fair Oaks Ave")
          .withCountry("US")
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType("home")
          .withCity("Pasadena"))
        .withVendorType("doctor")
        .withWorkPhone("626-473-9576")
        .withName("Arcadia Medical Group")
        .create(bundle)

      var contactDemoSample10056 = new gw.api.databuilder.PersonBuilder()
        .withLastName("Albee")
        .withPublicId("demo_sample:10056")
        .withFirstName("Jennifer")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("354 Cactus Ln")
          .withCountry("US")
          .withPostalCode("85716")
          .withState(State.TC_AZ)
          .withAddressType("home")
          .withCity("Tucson"))
        .withWorkPhone("818-446-1206")
        .create(bundle)

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withIncidentReport(false)
        .withAssignmentStatus("assigned")
        .withLossDate(BaseDate.addDays(-32))
        .withFlaggedReason("Paying Total Temp on minor injury after 4 weeks")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy("wc_fast")
        .withEmploymentData( new gw.api.databuilder.EmploymentDataBuilder()
          .withPayPeriod("monthly")
          .withOccupation("construction")
          .withPaidFull(true)
          .withHireState(State.TC_CA)
          .withLastWorkedDate(BaseDate.addDays(-32))
          .withWageAmount(750bd.ofDefaultCurrency())
          .withEmploymentStatus("fulltime")
          .withInjuryStartTime(DateUtil.currentDate().Time as java.util.Date)
          .withNumDaysWorked(5)
          .withNumHoursWorked(8)
          .withWagePaymentCont(false)
          .withHireDate(BaseDate.addDays(-3379)))
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged("neverflagged")
        .withLossLocation(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("846 Yount Ln.")
          .withCountry("US")
          .withPostalCode("91357")
          .withState(State.TC_CA)
          .withAddressType("business")
          .withCity("Hollywood"))
        .withClaimNumber("312-36-369870")
        .withMainContactType("employee")
        .withReportedByType("employee")
        .withLossType("WC")
        .withValidationLevel("newloss")
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(274))
          .withUnderwritingCo("parent")
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-3266))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup("acme_wc")
          .withEffectiveDate(BaseDate.addDays(-90))
          .withStatus("inforce")
          .withWCStates("CA, NV")
          .withPolicyNumber("32-376869")
          .withPublicId("demo_sample:118")
          .withTotalProperties(1)
          .withPolicyType("WorkersComp")
          .withTotalVehicles(0)
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Labor Contractor Endorsement")
            .withFormNumber("WC 00 03 20 A"))
          .withEndorsement( new gw.api.databuilder.EndorsementBuilder()
            .withDescription("Employers Liability Coverage Endorsement ")
            .withFormNumber("WC 00 03 03 B"))
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withIncidentLimit(100000bd.ofDefaultCurrency())
            .withType("WCEmpLiabCov")
            .withNotes("Bodily Injury By Accident")
            .withDeductible(10000bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withType("WCEmpLiabCov")
            .withNotes("Bodily Injury By Disease for Policy")
            .withDeductible(50000bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withType("WCEmpLiabCov")
            .withNotes("Bodily Injury By Disease per Employee")
            .withDeductible(1000bd.ofDefaultCurrency())
            .withExposureLimit(100000bd.ofDefaultCurrency()))
          .withRiskUnit( new gw.api.databuilder.PropertyRUBuilder()
            .withRUNumber(1)
            .withPolicyLocation( new gw.api.databuilder.PolicyLocationBuilder()
              .withAddress( new gw.api.databuilder.AddressBuilder()
                .withAddressLine1("55 California St")
                .withCountry("US")
                .withPostalCode("61571")
                .withState(State.TC_IL)
                .withAddressType("business")
                .withCity("Washington"))))
          .withPolicyAccount(sampleAccount3)
          .withContactInRole(contactDemoSample4013, "insured")
          .withContactInRole(contactDemoSample10056, "agent"))
        .withClaimantReportedDate(BaseDate.addDays(-32))
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withJurisdictionState("CA")
        .withSegment("wc_lost_time")
        .withReportedDate(BaseDate.addDays(-32))
        .withCoverageInQuestion(false)
        .withLOBCode("WorkersCompLine")
        .withPublicID("demo_sample:4001")
        .withDescription("Worker fell from 2nd story scaffolding")
        .withState("open")
        .withAssignedUser(findUserByUserName("ljames"))
        .withContactInRole(contactDemoSample202, "checkpayee")
        .withContactInRole(contactDemoSample3033, "checkpayee")
        .withContactInRole(contactDemoSample3033, "claimant")
        .withContactInRole(contactDemoSample202, "hospital")
        .withContactInRole(contactDemoSample3033, "maincontact")
        .withContactInRole(contactDemoSample3033, "reporter")
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic("general")
          .withAuthoringDate(BaseDate.addDays(-32))
          .withSubject("Initial phone call with employer")
          .withAuthor(findUserByUserName("cclark"))
          .withBody("Company reports that claimant was working on 2nd floor scaffolding, installing weather stripping.  According to co-workers, injured worker unclipped from safety harness in order to climb down frm the scaffolding and then lost his balance and fell to the ground.  The injured worker immediately got back up but complained of a sore leg and sore lower back.  A supervisor directed him to the doctor for initial treatment and reported the accident to the HR department."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic("general")
          .withAuthoringDate(BaseDate.addDays(-29))
          .withSubject("Claim update")
          .withAuthor(findUserByUserName("ljames"))
          .withBody("I spoke with all three parties (claimant, account, doctor) and case seems very straightforward.  Foreman saw and confirms the accident, so I decided not to take formal witness statements.  Doctor confirmed bruises to the right leg and hip and a strained lower back.  The bruises were treated with ice and OTC pain medication.  The back injury appeared minor, but the worker will need to be absent from work for at least a week and until doctor can confirm that strain has recovered."))
        .withNote( new gw.api.databuilder.NoteBuilder()
          .withTopic("general")
          .withAuthoringDate(BaseDate.addDays(-25))
          .withSubject("Phone call with claimant")
          .withAuthor(findUserByUserName("ljames"))
          .withBody("Spoke with the injured worker.  He says that he still experiences pain whenever bending over after 1 week but has no other complaints. "))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-4))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withMandatory(true)
          .withPriority("high")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(3))
          .withStatus("open")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("med_clear_for_light_duty"))
          .withSubject("Check on medical clearance for light duty work")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-2)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority("urgent")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_insured"))
          .withSubject("Make initial contact with employer")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority("urgent")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("contact_claimant"))
          .withSubject("Make initial contact with injured worker")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority("high")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("first_report"))
          .withSubject("File Employer's First Notice")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority("high")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("employee_notice"))
          .withSubject("Get Employee's Notice of Injury")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(true)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withEscalationDate(BaseDate.addDays(-27))
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("wage_stmt"))
          .withSubject("Get wage statement and tax status")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-32))
          .withMandatory(false)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withStatus("skipped")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("witness_statement"))
          .withSubject("Get a statement from witness")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-32)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-19))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-14))
          .withMandatory(true)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withDescription("Account threshold: $3000")
          .withActivityPattern(findActivityPatternByCode("notice_cost_above_threshold"))
          .withSubject("Notify account - expected cost above threshold")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-14)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-23))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-18))
          .withMandatory(false)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("subro_check"))
          .withSubject("Determine if opportunity for recovery")
          .withAssignedUser(findUserByUserName("ljames"))
          .withTargetDate(BaseDate.addDays(-18)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-32))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withCloseDate(BaseDate.addDays(-22))
          .withMandatory(false)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withStatus("complete")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("initial_30day_review"))
          .withSubject("10 day review")
          .withAssignedUser(findUserByUserName("wmotley"))
          .withTargetDate(BaseDate.addDays(-22)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-22))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withMandatory(false)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("Comp - TeamA"))
          .withType("general")
          .withStatus("open")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("initial_30day_review"))
          .withSubject("30 day review")
          .withAssignedUser(findUserByUserName("wmotley"))
          .withTargetDate(BaseDate.addDays(-2)))
        .withActivity( new gw.api.databuilder.ActivityBuilder()
          .withAssignmentStatus("assigned")
          .withAssignmentDate(BaseDate.addDays(-22))
          .withEscalated(false)
          .withRecurring(false)
          .withImportance("notOnCalendar")
          .withMandatory(true)
          .withPriority("normal")
          .withActivityClass("task")
          .withAssignedGroup(findGroupByName("LA Medical Mgmt"))
          .withType("general")
          .withStatus("open")
          .withAutoGenerated(true)
          .withLastViewedDate(BaseDate.addDays(-2415))
          .withActivityPattern(findActivityPatternByCode("medical_report_claimant"))
          .withSubject("Review medical treatments")
          .withAssignedUser(findUserByUserName("spierce"))
          .withTargetDate(BaseDate.addDays(8)))
        .create(bundle)

      var claimInfoDemoSample4001 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:4001")
        .withClaimNumber("312-36-369870")
        .onClaim(claim)
        .create(bundle)

      var exposureDemoSample40001 = new gw.api.databuilder.ExposureBuilder()
        .onClaim(claim)
        .withOtherCoverage(false)
        .withWCPreexDisblty(false)
        .withLossParty("insured")
        .withExposureType("WCInjuryDamage")
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus("assigned")
        .withStrategy("wc_fast")
        .withProgress("investigation")
        .withJurisdictionState("CA")
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage("WCWorkersCompCov")
        .withSegment("wc_med_only")
        .withClaimOrder(1)
        .withPublicId("demo_sample:40001")
        .withState("open")
        .withAssignedUser(findUserByUserName("ljames"))
        .withCoverageSubType("WCWorkersCompMED")
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
          .withGeneralInjuryType("specific")
          .withSeverity("minor")
          .withDescription("Strained back and bruises to right leg from the fall")
          .withMedicalTreatmentType("one_doctor")
          .withClaimIncident(true)
          .withBodyPart( new gw.api.databuilder.BodyPartDetailsBuilder()
            .withPrimaryBodyPart("trunk")
            .withOrdering(100)))
        .create(bundle)

      var exposureDemoSample150003 = new gw.api.databuilder.ExposureBuilder()
        .onClaim(claim)
        .withOtherCoverage(false)
        .withLossParty("insured")
        .withDaysInWeek("five")
        .withExposureType("LostWages")
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus("assigned")
        .withStrategy("wc_fast")
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage("WCWorkersCompCov")
        .withProgress("investigation")
        .withAverageWeeklyWages(750bd.ofDefaultCurrency())
        .withClaimOrder(2)
        .withPublicId("demo_sample:150003")
        .withState("open")
        .withAssignedUser(findUserByUserName("ljames"))
        .withCoverageSubType("WCWorkersCompWAGES")
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder())
        .create(bundle)

      var exposureDemoSample170001 = new gw.api.databuilder.ExposureBuilder()
        .onClaim(claim)
        .withOtherCoverage(false)
        .withLossParty("third_party")
        .withExposureType("EmployerLiability")
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus("assigned")
        .withStrategy("wc_investigate")
        .withProgress("investigation")
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage("WCEmpLiabCov")
        .withJurisdictionState("CA")
        .withSegment("wc_liability")
        .withClaimOrder(3)
        .withPublicId("demo_sample:170001")
        .withState("open")
        .withAssignedUser(findUserByUserName("ljames"))
        .withCoverageSubType("WCEmpLiabCov")
        .withIncident( new gw.api.databuilder.IncidentBuilder()
          .withSeverity("moderate-gen"))
        .create(bundle)

      var transactionSetDemoSample20022 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-21))
        .withRequestingUser(findUserByUserName("ljames"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20023 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-20))
        .withRequestingUser(findUserByUserName("ljames"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20024 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-13))
        .withRequestingUser(findUserByUserName("ljames"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20025 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-6))
        .withRequestingUser(findUserByUserName("ljames"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20026 = new gw.api.databuilder.CheckSetBuilder()
        .withApprovalDate(BaseDate.addDays(-7))
        .withRequestingUser(findUserByUserName("ljames"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var transactionSetDemoSample20032 = new gw.api.databuilder.ReserveSetBuilder()
        .withApprovalDate(BaseDate.addDays(-9))
        .withRequestingUser(findUserByUserName("ljames"))
        .withApprovalStatus("approved")
        .onClaim(claim)
        .create(bundle)

      var reserveLineDemoSample29 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample150003)
        .withCostType("claimcost")
        .withCostCategory("vocational")
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample30 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample150003)
        .withCostType("claimcost")
        .withCostCategory("ttd")
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample31 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample40001)
        .withCostType("aoexpense")
        .withCostCategory("casemgmt")
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample32 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample40001)
        .withCostType("claimcost")
        .withCostCategory("medical")
        .withClaim(claim)
        .create(bundle)

      var reserveLineDemoSample33 = new gw.api.databuilder.ReserveLineBuilder()
        .withExposure(exposureDemoSample150003)
        .withCostType("claimcost")
        .withCostCategory("supplemental")
        .withClaim(claim)
        .create(bundle)

      var checkDemoSample10108 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-21))
        .withScheduledSendDate(BaseDate.addDays(-21))
        .withBankAccount("default")
        .onCheckSet(transactionSetDemoSample20022)
        .withPayTo("Paul Sallade")
        .withStatus("issued")
        .withPaymentMethod("check")
        .withCheckNumber("10444")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample3033)
              .withPayeeType("claimant"))
        .withType("primary")
        .create(bundle)

      var checkDemoSample10109 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-20))
        .withScheduledSendDate(BaseDate.addDays(-20))
        .withBankAccount("default")
        .onCheckSet(transactionSetDemoSample20023)
        .withPayTo("Paul Sallade")
        .withStatus("issued")
        .withPaymentMethod("check")
        .withCheckNumber("10567")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample3033)
              .withPayeeType("claimant"))
        .withType("primary")
        .create(bundle)

      var checkDemoSample10110 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-13))
        .withScheduledSendDate(BaseDate.addDays(-13))
        .withBankAccount("default")
        .onCheckSet(transactionSetDemoSample20024)
        .withPayTo("Paul Sallade")
        .withStatus("issued")
        .withPaymentMethod("check")
        .withCheckNumber("10690")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder().withPayee(contactDemoSample3033)
          .withPayeeType("claimant"))
        .withType("primary")
        .create(bundle)

      var checkDemoSample10111 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-6))
        .withScheduledSendDate(BaseDate.addDays(-6))
        .withBankAccount("default")
        .onCheckSet(transactionSetDemoSample20025)
        .withPayTo("Paul Sallade")
        .withStatus("issued")
        .withPaymentMethod("check")
        .withCheckNumber("10813")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample3033)
              .withPayeeType("claimant"))
        .withType("primary")
        .create(bundle)

      var checkDemoSample10112 = new gw.api.databuilder.CheckBuilder()
        .onClaim(claim)
        .withIssueDate(BaseDate.addDays(-7))
        .withScheduledSendDate(BaseDate.addDays(-7))
        .withBankAccount("default")
        .onCheckSet(transactionSetDemoSample20026)
        .withPayTo("Paul Sallade")
        .withStatus("issued")
        .withPaymentMethod("check")
        .withCheckNumber("10936")
        .withPayee(new gw.api.databuilder.CheckPayeeBuilder()
              .withPayee(contactDemoSample3033)
              .withPayeeType("claimant"))
        .withType("primary")
        .create(bundle)

      var transactionDemoSample12032 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample29)
        .onExposure(exposureDemoSample150003)
        .onTransactionSet(transactionSetDemoSample20032)
        .withCostType("claimcost")
        .withCostCategory("vocational")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Voc Rehab Benefits")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12033 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample30)
        .onExposure(exposureDemoSample150003)
        .onTransactionSet(transactionSetDemoSample20032)
        .withCostType("claimcost")
        .withCostCategory("ttd")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefits")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(4000bd.ofDefaultCurrency())
          .withClaimAmount(4000bd.ofDefaultCurrency())
          .withReservingAmount(4000bd.ofDefaultCurrency())
          .withTransactionAmount(4000bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12034 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample31)
        .onExposure(exposureDemoSample40001)
        .onTransactionSet(transactionSetDemoSample20032)
        .withCostType("aoexpense")
        .withCostCategory("casemgmt")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Case Management")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12035 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample32)
        .onExposure(exposureDemoSample40001)
        .onTransactionSet(transactionSetDemoSample20032)
        .withCostType("claimcost")
        .withCostCategory("medical")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Emergency room visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(2500bd.ofDefaultCurrency())
          .withClaimAmount(2500bd.ofDefaultCurrency())
          .withReservingAmount(2500bd.ofDefaultCurrency())
          .withTransactionAmount(2500bd.ofDefaultCurrency())
          .withLineCategory("hospital")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Chiropractor's visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("chiro")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12036 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample32)
        .onExposure(exposureDemoSample40001)
        .onTransactionSet(transactionSetDemoSample20032)
        .withCostType("claimcost")
        .withCostCategory("medical")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Emergency room visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(6500bd.ofDefaultCurrency())
          .withClaimAmount(6500bd.ofDefaultCurrency())
          .withReservingAmount(6500bd.ofDefaultCurrency())
          .withTransactionAmount(6500bd.ofDefaultCurrency())
          .withLineCategory("hospital")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Therapy")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(1500bd.ofDefaultCurrency())
          .withClaimAmount(1500bd.ofDefaultCurrency())
          .withReservingAmount(1500bd.ofDefaultCurrency())
          .withTransactionAmount(1500bd.ofDefaultCurrency())
          .withLineCategory("pt")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Medication")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("drugs")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample12037 = new gw.api.databuilder.ReserveBuilder()
        .withReserveLine(reserveLineDemoSample33)
        .onExposure(exposureDemoSample150003)
        .onTransactionSet(transactionSetDemoSample20032)
        .withCostType("claimcost")
        .withCostCategory("supplemental")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .onClaim(claim)
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Supplemental Earnings")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20026 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample30)
        .onTransactionSet(transactionSetDemoSample20023)
        .withCostCategory("ttd")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10109)
        .withPaymentType("partial")
        .onExposure(exposureDemoSample150003)
        .withCostType("claimcost")
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20027 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample32)
        .onTransactionSet(transactionSetDemoSample20022)
        .withCostCategory("medical")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10108)
        .withPaymentType("partial")
        .onExposure(exposureDemoSample40001)
        .withCostType("claimcost")
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Chiropractor's visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("chiro")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20028 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample32)
        .onTransactionSet(transactionSetDemoSample20022)
        .withCostCategory("medical")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10108)
        .withPaymentType("partial")
        .onExposure(exposureDemoSample40001)
        .withCostType("claimcost")
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Emergency room")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("hospital")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20029 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample30)
        .onTransactionSet(transactionSetDemoSample20024)
        .withCostCategory("ttd")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10110)
        .withPaymentType("partial")
        .onExposure(exposureDemoSample150003)
        .withCostType("claimcost")
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20030 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample30)
        .onTransactionSet(transactionSetDemoSample20025)
        .withCostCategory("ttd")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10111)
        .withPaymentType("partial")
        .onExposure(exposureDemoSample150003)
        .withCostType("claimcost")
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20031 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample32)
        .onTransactionSet(transactionSetDemoSample20022)
        .withCostCategory("medical")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10108)
        .withPaymentType("partial")
        .onExposure(exposureDemoSample40001)
        .withCostType("claimcost")
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("Chiropractor's visit")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(500bd.ofDefaultCurrency())
          .withClaimAmount(500bd.ofDefaultCurrency())
          .withReservingAmount(500bd.ofDefaultCurrency())
          .withTransactionAmount(500bd.ofDefaultCurrency())
          .withLineCategory("chiro")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)

      var transactionDemoSample20032 = new gw.api.databuilder.PaymentBuilder()
        .withReserveLine(reserveLineDemoSample30)
        .onTransactionSet(transactionSetDemoSample20026)
        .withCostCategory("ttd")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStatus("submitted")
        .withTransToClaimExchangeRate(CurrencyUtil.isSingleCurrencyMode() ? null : gw.api.database.Query.make(entity.ExchangeRate).compare("PriceCurrency", Equals, Currency.TC_USD).compare("BaseCurrency", Equals, Currency.TC_USD).select().FirstResult)
        .onCheck(checkDemoSample10112)
        .withPaymentType("partial")
        .onExposure(exposureDemoSample150003)
        .withCostType("claimcost")
        .onClaim(claim)
        .withLineItem( new gw.api.databuilder.TransactionLineItemBuilder()
          .withComments("TTD Benefit payment")
          .withClaimForExAmount(0bd.ofDefaultCurrency())
          .withReportingAmount(750bd.ofDefaultCurrency())
          .withClaimAmount(750bd.ofDefaultCurrency())
          .withReservingAmount(750bd.ofDefaultCurrency())
          .withTransactionAmount(750bd.ofDefaultCurrency())
          .withLineCategory("other")
          .withReportingForExAmount(0bd.ofDefaultCurrency()))
        .create(bundle)
    })()

    (\->
    {
      var buildingDemoSample305 = new gw.api.databuilder.BuildingBuilder()
        .withBuildingNumber("101")
        .create(bundle)

      var buildingDemoSample306 = new gw.api.databuilder.BuildingBuilder()
        .withBuildingNumber("102")
        .create(bundle)

      var policyLocationDemoSample305 = new gw.api.databuilder.PolicyLocationBuilder()
        .withAddress(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("25 Commerce Way")
          .withCountry("US")
          .withPostalCode("91155")
          .withState(State.TC_CA)
          .withAddressType("business")
          .withCity("Los Angeles"))
        .withBuilding(buildingDemoSample305)
        .withBuilding(buildingDemoSample306)
        .create(bundle)

      var contactDemoSample30001 = new gw.api.databuilder.CompanyBuilder()
        .withPublicId("demo_sample:30001")
        .withPrimaryPhone("work")
        .withPrimaryAddressSetEarly( new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1245 Fair Oaks Ave")
          .withCountry("US")
          .withPostalCode("91101")
          .withState(State.TC_CA)
          .withAddressType("business")
          .withCity("Pasadena"))
        .withWorkPhone("847-279-3399")
        .withName("P&P Construction")
        .create(bundle)

      var contactDemoSample30011 = new gw.api.databuilder.PersonBuilder()
        .withPublicId("demo_sample:30011")
        .withLastName("Arlington")
        .withFirstName("Annabelle")
        .withPrimaryAddressSetEarly(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("1237 Myrtle Ave")
          .withCountry("US")
          .withPostalCode("29402")
          .withState(State.TC_SC)
          .withAddressType("business")
          .withCity("Charleston"))
        .withPrimaryPhone("work")
        .withWorkPhone("843-553-2001")
        .create(bundle)
        
      var sampleAccount4 = gw.api.databuilder.AccountBuilder
        .forHolder(createLocalFromAB("demo_acct:30001", accountHolders["ab:30001"], bundle))
        .withPublicId("sample_account;8094")
        .withAccountNumber("ACC12263")
        .withSpecialHandling(new AccountSpecialHandlingBuilder())
        .create(bundle)

      var classCodeDemoSample301 = new gw.api.databuilder.ClassCodeBuilder()
        .withCode("883001")
        .withDescription("Clerical")
        .create(bundle)

      var classCodeDemoSample302 = new gw.api.databuilder.ClassCodeBuilder()
        .withCode("883002")
        .withDescription("Janitorial")
        .create(bundle)

      var claim = new gw.api.databuilder.ClaimBuilder()
        .withIncidentReport(false)
        .withAssignmentStatus("assigned")
        .withLossDate(BaseDate.addDays(-32))
        .withFlaggedReason("Paying Total Temp on minor injury after 4 weeks")
        .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
        .withStrategy("wc_fast")
        .withAssignmentDate(BaseDate.addDays(0))
        .withFlagged("neverflagged")
        .withLossLocation(new gw.api.databuilder.AddressBuilder()
          .withAddressLine1("846 Yount Ln.")
          .withCountry("US")
          .withPostalCode("91357")
          .withState(State.TC_CA)
          .withAddressType("business")
          .withCity("Hollywood"))
        .withClaimNumber("312-36-300870")
        .withMainContactType("employee")
        .withReportedByType("employee")
        .withLossType("WC")
        .withValidationLevel("newloss")
        .withPolicy( new gw.api.databuilder.PolicyBuilder()
          .withExpirationDate(BaseDate.addDays(185))
          .withUnderwritingCo("parent")
          .withVerified(true)
          .withOrigEffectiveDate(BaseDate.addDays(-2005))
          .withCurrency(gw.api.util.CurrencyUtil.getDefaultCurrency())
          .withUnderwritingGroup("acme_wc")
          .withEffectiveDate(BaseDate.addDays(-180))
          .withStatus("inforce")
          .withWCStates("CA, NV")
          .withPolicyNumber("32-300869")
          .withPublicId("demo_sample:30118")
          .withTotalProperties(4)
          .withPolicyType("WorkersComp")
          .withTotalVehicles(0)
          .withClassCode(classCodeDemoSample301)
          .withClassCode(classCodeDemoSample302)
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withIncidentLimit(500000bd.ofDefaultCurrency())
            .withType("WCEmpLiabCov")
            .withDeductible(100bd.ofDefaultCurrency()))
          .withCoverage( new gw.api.databuilder.PolicyCoverageBuilder()
            .withIncidentLimit(750000bd.ofDefaultCurrency())
            .withType("WCEmpLiabCov")
            .withDeductible(100bd.ofDefaultCurrency()))
          .withRiskUnit( new gw.api.databuilder.WCCovEmpRUBuilder()
            .withBuilding(buildingDemoSample305)
            .withRUNumber(1)
            .withClassCode(classCodeDemoSample301)
            .withPolicyLocation(policyLocationDemoSample305))
          .withRiskUnit( new gw.api.databuilder.WCCovEmpRUBuilder()
            .withBuilding(buildingDemoSample305)
            .withRUNumber(2)
            .withClassCode(classCodeDemoSample302)
            .withPolicyLocation(policyLocationDemoSample305))
          .withRiskUnit( new gw.api.databuilder.WCCovEmpRUBuilder()
            .withBuilding(buildingDemoSample306)
            .withRUNumber(3)
            .withClassCode(classCodeDemoSample301)
            .withPolicyLocation(policyLocationDemoSample305))
          .withRiskUnit( new gw.api.databuilder.WCCovEmpRUBuilder()
            .withBuilding(buildingDemoSample306)
            .withRUNumber(4)
            .withClassCode(classCodeDemoSample302)
            .withPolicyLocation(policyLocationDemoSample305))
          .withPolicyAccount(sampleAccount4)
          .withContactInRole(contactDemoSample30001, "insured"))
        .withClaimantReportedDate(BaseDate.addDays(-32))
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withJurisdictionState("CA")
        .withSegment("wc_lost_time")
        .withReportedDate(BaseDate.addDays(-32))
        .withCoverageInQuestion(false)
        .withLOBCode("WorkersCompLine")
        .withPublicID("demo_sample:30005")
        .withDescription("Worker fell from 2nd story scaffolding")
        .withState("open")
        .withAssignedUser(findUserByUserName("ljames"))
        .withIncident( new gw.api.databuilder.InjuryIncidentBuilder()
          .withGeneralInjuryType("specific")
          .withSeverity("minor")
          .withDescription("Strained back and bruises to right leg from the fall")
          .withMedicalTreatmentType("one_doctor")
          .withClaimIncident(true))
        .withContactInRole(contactDemoSample30011, "claimant")
        .withContactInRole(contactDemoSample30011, "reporter")
        .create(bundle)

      var claimInfoDemoSample30005 = new gw.api.databuilder.ClaimInfoBuilder()
        .withRootPublicId("demo_sample:30005")
        .withClaimNumber("312-36-300870")
        .onClaim(claim)
        .create(bundle)

      var exposureDemoSample300001 = new gw.api.databuilder.ExposureBuilder()
        .onClaim(claim)
        .withOtherCoverage(false)
        .withLossParty("third_party")
        .withExposureType("EmployerLiability")
        .withAssignedGroup(findGroupByName("Comp - TeamA"))
        .withAssignmentStatus("assigned")
        .withStrategy("wc_investigate")
        .withProgress("investigation")
        .withAssignmentDate(BaseDate.addDays(0))
        .withPrimaryCoverage("WCEmpLiabCov")
        .withJurisdictionState("CA")
        .withSegment("wc_liability")
        .withClaimOrder(3)
        .withPublicId("demo_sample:300001")
        .withState("open")
        .withAssignedUser(findUserByUserName("ljames"))
        .withCoverageSubType("WCEmpLiabCov")
        .withIncident( new gw.api.databuilder.IncidentBuilder()
          .withSeverity("moderate-gen"))
        .create(bundle)

    })()
  }
}
