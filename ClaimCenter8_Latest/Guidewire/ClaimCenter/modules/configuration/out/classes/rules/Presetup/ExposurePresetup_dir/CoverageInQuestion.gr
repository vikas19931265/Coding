package rules.Presetup.ExposurePresetup_dir

@gw.rules.RuleName("CoverageInQuestion")
internal class CoverageInQuestion {
  static function doCondition(exposure : entity.Exposure) : boolean {
/*start00rule*/
return true
/*end00rule*/
}

  static function doAction(exposure : entity.Exposure, actions : gw.rules.Action) {
/*start00rule*/
 var policyContact= exposure.Claim.Policy.ClaimContactsForAllRoles
    var claimContact=exposure.VehicleIncident.ClaimContactsForAllRoles
    print(" ************* exposure.Claim.CoverageInQuestion ************** "+exposure.Claim.CoverageInQuestion)
    var  status : boolean=false
    for(var clc in claimContact)
    {
      var claimContactRoles=clc.Roles
      for (var ccr in claimContactRoles)
      {
        print(" *********** ccr *************** "+ccr)
        if(ccr.Role==typekey.ContactRole.TC_DRIVER and policyContact.hasMatch(\pol ->pol.PublicID==clc.PublicID ))
        {
          if(clc.PublicID!=null)
          {
          status=true
          exposure.Claim.CoverageInQuestion=false
          print("********* clc ***************** "+exposure.Claim.CoverageInQuestion)
          break;
          }
        }
      }
    }
    print("*********** status ****************** "+status)
    if (status==false)
    {
      exposure.Claim.CoverageInQuestion=true
    print("eoverage in question" + exposure.Claim.CoverageInQuestion)
      //  exposure.Claim.CoverageInQuestionClaimIndicator.HoverText="Driver of insured vehicle not listed on policy"
    }
/*end00rule*/
  }
}
