package com.guidewire.ab.external.entity;

/**
 * Active messages generated by events.
 *
 * @deprecated External entities are deprecated. Please use the new Java API instead.
 */
@Deprecated
public interface Message extends gw.pl.external.entity.Entity, gw.pl.external.entity.KeyableEntity
{


  /**
   * Associated ABContact, if applicable.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "ABContact")
  public com.guidewire.ab.external.entity.ABContact getABContact();


  /**
   * Custom field that may be defined when acknowledging.  This field is deprecated, please define a new custom extension field instead.
   * @deprecated Custom field that may be defined when acknowledging.  This field is deprecated, please define a new custom extension field instead.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "AckCode")
  public java.lang.String getAckCode();

  /**
   * Custom field that may be defined when acknowledging.  This field is deprecated, please define a new custom extension field instead.
   * @deprecated Custom field that may be defined when acknowledging.  This field is deprecated, please define a new custom extension field instead.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_SETTER, name = "AckCode")
  public void setAckCode(java.lang.String value);


  /**
   * Number of acks received. NOTE: when inserting a Message this field must be non-null.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "AckCount")
  public java.lang.Integer getAckCount();


  /**
   * this will test whether the message is active
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "Active")
  public boolean isActive();


  /**
   * Time of completion of afterSend method.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "AfterSendTime")
  public java.util.Date getAfterSendTime();


  /**
   * Time of attempting to get lock before the call to beforeSend transformations.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "BeforeSendLockTime")
  public java.util.Date getBeforeSendLockTime();


  /**
   * Time of after acquired lock before the call to beforeSend transformations.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "BeforeSendLockedTime")
  public java.util.Date getBeforeSendLockedTime();


  /**
   * Time of completion of beforeSend transformations.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "BeforeSendTime")
  public java.util.Date getBeforeSendTime();


  /**
   * Time of creating the message. NOTE: when inserting a Message this field must be non-null.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "CreationTime")
  public java.util.Date getCreationTime();


  /**
   * Short description of the message.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "Description")
  public java.lang.String getDescription();

  /**
   * Short description of the message.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_SETTER, name = "Description")
  public void setDescription(java.lang.String value);


  /**
   * Identifies the destination to send this message to. NOTE: when inserting a Message this field must be non-null.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "DestinationID")
  public java.lang.Integer getDestinationID();


  /**
   * Number of duplicate errors received.  This field is obsolete, it is not applicable to active messages.
   * @deprecated Number of duplicate errors received.  This field is obsolete, it is not applicable to active messages.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "DuplicateCount")
  public java.lang.Integer getDuplicateCount();


  /**
   * Get the names used when associating entities with the message.
See {@link #putEntityByName}
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "EntityNames")
  public java.util.Set getEntityNames();


  /**
   * Type of error if the message is in error.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "ErrorCategory")
  public com.guidewire.ab.external.typelist.ErrorCategory getErrorCategory();


  /**
   * Detailed description of error condition (set in the destination).
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "ErrorDescription")
  public java.lang.String getErrorDescription();

  /**
   * Detailed description of error condition (set in the destination).
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_SETTER, name = "ErrorDescription")
  public void setErrorDescription(java.lang.String value);


  /**
   * Name of the event. NOTE: when inserting a Message this field must be non-null.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "EventName")
  public java.lang.String getEventName();


  /**
   * Internally managed primary key
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "ID")
  public gw.pl.external.entity.Key getID();


  /**
   * Whether the payload contains late-bound fields.  This field is obsolete and no longer set/used.
   * @deprecated Whether the payload contains late-bound fields.  This field is obsolete and no longer set/used.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "LateBound")
  public java.lang.Boolean isLateBound();

  /**
   * Whether the payload contains late-bound fields.  This field is obsolete and no longer set/used.
   * @deprecated Whether the payload contains late-bound fields.  This field is obsolete and no longer set/used.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_SETTER, name = "LateBound")
  public void setLateBound(java.lang.Boolean value);


  /**
   * Custom field that may be defined during message creation.  This field is deprecated, please define a new custom extension field instead.
   * @deprecated Custom field that may be defined during message creation.  This field is deprecated, please define a new custom extension field instead.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "MessageCode")
  public java.lang.String getMessageCode();

  /**
   * Custom field that may be defined during message creation.  This field is deprecated, please define a new custom extension field instead.
   * @deprecated Custom field that may be defined during message creation.  This field is deprecated, please define a new custom extension field instead.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_SETTER, name = "MessageCode")
  public void setMessageCode(java.lang.String value);


  /**
   * Get the message root of this message. The default message root is the event root
unless changed by setMessageRoot()
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "MessageRoot")
  public gw.pl.external.entity.KeyableEntity getMessageRoot();

  /**
   * Get the message root of this message. The default message root is the event root
unless changed by setMessageRoot()
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_SETTER, name = "MessageRoot")
  public void setMessageRoot(gw.pl.external.entity.KeyableEntity value);


  /**
   * Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
   * @deprecated Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "OptionalInt")
  public java.lang.Integer getOptionalInt();

  /**
   * Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
   * @deprecated Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_SETTER, name = "OptionalInt")
  public void setOptionalInt(java.lang.Integer value);


  /**
   * Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
   * @deprecated Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "OptionalMoney")
  public java.math.BigDecimal getOptionalMoney();

  /**
   * Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
   * @deprecated Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_SETTER, name = "OptionalMoney")
  public void setOptionalMoney(java.math.BigDecimal value);


  /**
   * Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
   * @deprecated Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "OptionalString")
  public java.lang.String getOptionalString();

  /**
   * Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
   * @deprecated Custom field that may be set at message creation time.  This field is deprecated, please define a new custom extension field instead.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_SETTER, name = "OptionalString")
  public void setOptionalString(java.lang.String value);


  /**
   * Contents of the message.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "Payload")
  public java.lang.String getPayload();

  /**
   * Contents of the message.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_SETTER, name = "Payload")
  public void setPayload(java.lang.String value);


  /**
   * Returns the primary entity associated with this message
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "PrimaryObject")
  public gw.pl.external.entity.KeyableEntity getPrimaryObject();


  /**
   * Returns the key of the primary object associated with this message
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "PrimaryObjectKey")
  public gw.pl.external.entity.Key getPrimaryObjectKey();


  /**
   * ID or primary key of the row in the external system to which this row is mapped
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "PublicID")
  public java.lang.String getPublicID();

  /**
   * ID or primary key of the row in the external system to which this row is mapped
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_SETTER, name = "PublicID")
  public void setPublicID(java.lang.String value);


  /**
   * Time of of query selecting message to be processed.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "QueryTime")
  public java.util.Date getQueryTime();


  /**
   * Number of times message has been retried.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "RetryCount")
  public java.lang.Integer getRetryCount();


  /**
   * Time in the future at which to retry the message in error, applicable only to retryable error messages.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "RetryTime")
  public java.util.Date getRetryTime();


  /**
   * this will test whether the message is retryable
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "Retryable")
  public boolean isRetryable();


  /**
   * Time of attempting to lock before the sending the message.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "SendLockTime")
  public java.util.Date getSendLockTime();


  /**
   * Time of after acquired lock lock before the sending the message.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "SendLockedTime")
  public java.util.Date getSendLockedTime();


  /**
   * Order in which to send messages. NOTE: when inserting a Message this field must be non-null.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "SendOrder")
  public java.lang.Integer getSendOrder();


  /**
   * Time of completion of sending the message.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "SendTime")
  public java.util.Date getSendTime();


  /**
   * Optional sender reference set at message send time.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "SenderRefID")
  public java.lang.String getSenderRefID();

  /**
   * Optional sender reference set at message send time.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_SETTER, name = "SenderRefID")
  public void setSenderRefID(java.lang.String value);


  /**
   * Message status: 1-Pending send; 2-Pending ack; 3-Error; 4-Retryable error NOTE: when inserting a Message this field must be non-null.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "Status")
  public java.lang.Integer getStatus();


  /**
   * The user who created this message.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_GETTER, name = "User")
  public com.guidewire.ab.external.entity.User getUser();

  /**
   * The user who created this message.
   * 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.PROPERTY_SETTER, name = "User")
  public void setUser(com.guidewire.ab.external.entity.User value);

  /**
   * Looks up and returns the entity stored on the message at the time that
the message was created under the supplied name.
   *
   * @param name The name associated with the entity by {@link #putEntityByName}
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.METHOD, name = "getEntityByName")
  public gw.pl.external.entity.KeyableEntity getEntityByName(java.lang.String name);

  /**
   * Associates the supplied entity with the message under the name
supplied as the name parameter.  The object can be retrieved later using
{@link #getEntityByName}
   *
   * @param name The name to be used when storing the reference to the entity
   * @param entity An entity to be associated with the message
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.METHOD, name = "putEntityByName")
  public void putEntityByName(java.lang.String name, gw.pl.external.entity.KeyableEntity entity);

  /**
   * Acknowledges receipt of the message by the remote system.  Sets
the status of message to ACKED and increments the ack count.
If the message is not in
pending ack, pending send, or pending retry states, increments
the ack count and throws IllegalStateException.  Note that a message
may be acked in pending send or pending retry states if the ack is
made during the send call before the message status is set to
pending ack.
   *
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.METHOD, name = "reportAck")
  public void reportAck();

  /**
   * This method is obsolete and does nothing.
   *
   * @deprecated Please use {@link MessageHistory#reportDuplicate()} instead.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.METHOD, name = "reportDuplicate")
  public void reportDuplicate();

  /**
   * Report that the remote system ran into an error when
processing the message.  Sets
the status of message to RETRYABLE_ERROR and increments the ack count.
If the message is not in
pending ack, pending send, or pending retry states, increments
the ack count and throws IllegalStateException.
   *
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.METHOD, name = "reportError")
  public void reportError();

  /**
   * This behaves the same as reportError(), except that it schedules
a retry of the message at the specified time.

If retryTime is null it is equivalent to calling reportError().
If the retryTime is later than the current time, it schedules a retry
at that time.  If the retryTime is less than or equal to the currentTime, it
throws an IllegalArgumentException.
   *
   * @param retryTime the time later than now to retry the message.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.METHOD, name = "reportError")
  public void reportError(java.util.Date retryTime);

  /**
   * Report that the remote system ran into an error when
processing the message.  Sets
the status of message to RETRYABLE_ERROR and increments the ack count.
Sets the error category to the specified category.
If the message is not in
pending ack, pending send, or pending retry states, increments
the ack count and throws IllegalStateException.
   *
   * @param category 
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.METHOD, name = "reportError")
  public void reportError(com.guidewire.ab.external.typelist.ErrorCategory category);

  /**
   * Report that the remote system ran into an error when
processing the message, and attempting a retry would
not be appropriate.  Sets
the status of message to ERROR and increments the ack count.
If the message is not in
pending ack, pending send, or pending retry states, increments
the ack count and throws IllegalStateException.  Note that a message
may be acked in pending send or pending retry states if the ack is
made during the send call before the message status is set to
pending ack.

This method is obsolete.  Instead, use error category to identify
those messages that cannot be retried.
   *
   * @deprecated use reportError category
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.METHOD, name = "reportNonRetryableError")
  public void reportNonRetryableError();

  /**
   * Retries the message.  Depending on the status of the message being
retried, this can behave in two ways.  If the message has already been
acked with an error, the retry mints a new message with a new id (since
most recieving systems would otherwise reject the retried
message as a duplicate).  If the message has not yet been acked
(presumably lost in flight), the original message is just resent.
If the message is in any other state, throws IllegalStateException.
   *
   * @return The message that will be sent, either a new message or the
existing message as appropriate
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.METHOD, name = "retry")
  public com.guidewire.ab.external.entity.Message retry();

  /**
   * Set the message root of this message. If this method is not called, the
default message root is just the event root. Use this method to change the
message root to another object.
   *
   * @param root 
   * @deprecated If you need to associate a message with a primary object, just
set it directly on the message.
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.METHOD, name = "setMessageRoot")
  public void setMessageRoot_Method(gw.pl.external.entity.KeyableEntity root);

  /**
   * Skips the message.
Sets status to ERROR_CLEARED if message status is an error status
Otherwise, sets messages status to SKIPPED if the message is in
pending send or pending retry or pending ack state.  If the message
is in an inactive state (ie acked, error cleared, retried), throws
IllegalStateException.
   *
   */
  @gw.pl.external.Invocation(type = gw.pl.external.InvocationType.METHOD, name = "skip")
  public void skip();


  /**
   * Utility class for initializing an instance of Message
   */
  public static class CONSTRUCT
  {
    /**
     * Create a new proxy instance of the external entity Message.
     */
    public static Message newInstance()
    {
      return (Message) gw.pl.external.entity.EntityFactory.getInstance().newEntity(Message.class);
    }
  }

}
