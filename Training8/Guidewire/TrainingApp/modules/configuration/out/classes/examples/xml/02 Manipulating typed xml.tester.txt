// This is a Gosu tester file that manipulates the strongly typed XML file known as
// "exampleStrongTyped.xml"/ The xml file is located in the same directory as this file.
// The xsd is in modules/configuration/gsrc/trainingapp/demo/xsd.

uses trainingapp.demo.xsd.*
uses gw.xml.XmlElement
uses java.io.File

uses javax.xml.namespace.QName
uses java.io.FileWriter
uses java.io.BufferedWriter

// Parsing a strongly-typed XML file
var file = new File(
    "modules/configuration/config/examples/xml/exampleStrongTyped.xml")
var xml = examplestrongtyped.ExampleStrongTyped.parse(file)
xml.print()

// XSD properties on XML elements
print (xml.Database.Autoupgrade)
print (xml.Param.Count)

print ("QName:      " + xml.$QName)
print ("Namespace:  " + xml.$Namespace)
print ("Local part: " + xml.$QName.LocalPart)

print (xml.$QName)
print (xml.$Children[0].QName)
print (xml.$Children[9].QName)
print (xml.$Children[0].Children[1].QName)

// Returns array of XML elements where condition is met
print (xml.$Children.where(\ el -> el.QName.LocalPart == "database" ))

// Returns first XML elements where condition is met
print (xml.$Children.firstWhere(\ el -> el.QName.LocalPart == "database" ))

// Returns the one XML element where condition is met, or an exception if
// no element or many elements meet the condition
print (xml.$Children.singleWhere(\ el -> el.QName.LocalPart == "database" ))

// Working with XmlElement properties
print ("QName:      " + xml.$QName)
print("---------------------------------------")
var dbElement = xml.$Children.singleWhere
                         (\ el -> el.QName.LocalPart == "database")                       
print("Attributes: " + dbElement.AttributeNames)

print("---------------------------------------")
for (attrib in dbElement.AttributeNames) {
    print (attrib + ": " + dbElement.getAttributeSimpleValue(attrib))
}

print (xml.$Children[0].QName)
print (xml.$Children[0].Text)
print (xml.$Children[0].Children)
print ("----------------------")
print (xml.$Children[9].QName)
print (xml.$Children[9].Text)
print (xml.$Children[9].Children)

print ("Original value: " + dbElement.getAttributeSimpleValue("autoupgrade"))
dbElement.setAttributeValue("autoupgrade", "false")
print ("Current value: " + dbElement.getAttributeValue("autoupgrade"))

// Exporting XML
var security = new XmlElement(new QName("http://www.w3.org/2001/XMLSchema", "security"))
security.setAttributeValue("sessiontimeoutsecs", "10700")
xml.addChild(security)

var outputFilePath = "modules/configuration/config/examples/xml/exampleStrongTypedModified.xml"
var outputWriter = new BufferedWriter(new FileWriter(new File(outputFilePath)))
outputWriter.write(xml.asUTFString())
outputWriter.close()
print ("XML file written")

// The following code involves XML that is not compliant with the XSD
// If you uncomment the code, it will throw an exception.
// START OF BAD XSD CODE
//var claimSystem = new XmlElement(new QName("http://www.w3.org/2001/XMLSchema", "claimSystem"))
//claimSystem.setAttributeValue("URL", "http://localhost:8080/cc/ClaimCenter.do")
//xml.addChild(claimSystem)
//
//var outputFilePath2 = "modules/configuration/config/examples/xml/exampleStrongTypedModified2.xml"
//var outputFile2 = new BufferedWriter(new FileWriter(new File(outputFilePath2)))
//outputFile2.write(xml.asUTFString())
//outputFile2.close()
//print ("XML file written")
// END OF BAD XSD CODE

