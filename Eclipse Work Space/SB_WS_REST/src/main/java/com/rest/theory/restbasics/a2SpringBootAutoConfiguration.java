/*
Spring boot auto configuration
================================

Spring Boot automatically configures a spring application based on dependencies present or not present
in the classpath as a jar, beans, properties, etc.

It makes development easier and faster as there is no need to define certain beans that are 
included in the auto-configuration classes.

Spring Boot auto-configures a Dispatcher Servlet if Spring MVC jar is on the classpath.

Auto-configures the Jackson if Jackson jar is on the classpath.

Auto-configures a Data Source if Hibernate jar is on the classpath

Auto-configuration can be enabled by adding @SpringBootApplication or @EnableAutoConfiguration annotation in startup class. 
It indicates that it is a spring context file.

It enable something called components scan. It is the features of Spring where it will start automatically scanning classes 
in the package and sub package for any bean file.

There is some example of auto configuration done by Spring Boot:

	DispatcherServletAutoConfiguration
	DataSourceAutoConfiguration
	JacksonAutoConfiguration
	ErrorMvcAutoConfiguration (#basicErrorController)
	

We can see the auto-configuration done by Spring Boot in the AUTO-CONFIGURATION REPORT or CONDITIONS EVALUATION REPORT.
Classes can be excluded from auto-configuration by adding:

	@SpringBootApplication (exclude={JacksonAutoConfiguration.class, JmxAutoConfiguration.class})  
	
Or add the following statement in the application.properties file.

	spring.autoconfiguration.exclude=org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration 

***We exclude classes form the auto-configuration for faster startup and better performance of the application.

AUTO-CONFIGURATION REPORT generated by enabling debug mode. Open the application.properties file and 
add the following statement:

		logging.level.org.springframework=debug  

*/