package rules.EventMessage.EventFired_dir.SolrDestFilter_dir.Claim_dir
   uses java.io.*;
   uses java.sql.*;
   uses java.util.*;
   uses gw.transaction.Transaction
   uses gw.transaction.Transaction.*;
@gw.rules.RuleName("ClaimChanged")
internal class ClaimChanged {
  static function doCondition(messageContext : entity.MessageContext) : boolean {
    
/*start00rule*/
return messageContext.EventName == "ClaimChanged"
/*end00rule*/

  }

  static function doAction(messageContext : entity.MessageContext, actions : gw.rules.Action) {

/*start00rule*/
//print("inside ClaimChanged rule")
/*gw.solr.CCSolrMessageTransportPlugin.handleClaimChangedEvent(messageContext)
var cr="test"
var claimEntity=messageContext.Root as entity.Claim
if(!claimEntity.DraftClaim)
{
var bundle=Transaction.getCurrent();
 Transaction.runWithNewBundle(\newBundle->
 {
       claimEntity= newBundle.add(claimEntity);
       claimEntity.ClaimData.CreateDate  =   claimEntity.CreateTime
claimEntity.ClaimData.ClaimNumber=claimEntity.ClaimNumber
 })
claimEntity=bundle.add(claimEntity)
   print(claimEntity.ClaimData.CreateDate );
   print(claimEntity.ClaimData.ClaimNumber);
   print(claimEntity.CreateTime)
   print(claimEntity.ClaimNumber)
claimEntity.ClaimData.CreateDate  =   claimEntity.CreateTime
claimEntity.ClaimData.ClaimNumber=claimEntity.ClaimNumber*/
//}




 // first we need to get the current bundle object
 /*var currentBundle= Transaction.getCurrent();
var claims= currentBundle.getBeansByRootType(entity.Claim)
claims.
 currentBundle.getBeansByRootType(entity.Claim).
Transaction.runWithNewBundle(\newBundle->
{
      var claim=messageContext.Root as entity.Claim
      var bundle= newBundle.add(claim)
      bundle.Claim=null;

}
);*/


/*end00rule*/

  }
}
