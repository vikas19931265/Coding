function  WWHBookData_AddTOCEntries(P)
{
var A=P.fN("About ClaimCenter Documentation","1");
var B=A.fN("Conventions in This Document","1#2121726");
B=A.fN("Support","1#2121769");
A=P.fN("Gosu Introduction","2");
B=A.fN("Welcome to Gosu","3");
var C=B.fN("Control Flow","3#1437383");
C=B.fN("Blocks","3#1469415");
C=B.fN("Enhancements","3#1435182");
C=B.fN("Collections","3#1441186");
C=B.fN("Access to Java Types","3#1435102");
C=B.fN("Gosu Classes and Properties","3#1440296");
C=B.fN("Interfaces","3#1450798");
C=B.fN("List and Array Expansion Operator *.","3#1450589");
C=B.fN("Comparisons","3#1452648");
C=B.fN("Case Sensitivity","3#1450590");
C=B.fN("Compound Assignment Statements","3#1454915");
C=B.fN("Delegating Interface Implementation with Composition","3#1457296");
C=B.fN("Concurrency","3#1456854");
C=B.fN("Exceptions","3#1457070");
C=B.fN("Annotations","3#1458452");
C=B.fN("Gosu Templates","3#1457886");
C=B.fN("XML and XSD Support","3#1460816");
C=B.fN("Web Service Support (Consuming WSDL)","3#1460937");
C=B.fN("Gosu Character Set","3#1484203");
B=A.fN("Running Gosu Programs and Calling Other Classes","4");
B=A.fN("More About the Gosu Type System","5");
C=B.fN("Compile Time Error Prevention","6");
C=B.fN("Type Inference","7");
C=B.fN("Intelligent Code Completion and Other Gosu Editor Tools","8");
C=B.fN("Null Safety for Properties and Other Operators","9");
C=B.fN("Generics in Gosu","10");
C=B.fN("Gosu Primitives Types","11");
B=A.fN("Gosu Case Sensitivity and Capitalization","12");
B=A.fN("Gosu Statement Terminators","13");
B=A.fN("Gosu Comments","14");
B=A.fN("Gosu Reserved Words","15");
B=A.fN("Gosu Generated Documentation (\u2018gosudoc\u2019)","16");
B=A.fN("Code Coverage Support","17");
B=A.fN("Notable Differences Between Gosu and Java","18");
B=A.fN("Get Ready for Gosu","19");
A=P.fN("Types","20");
B=A.fN("Access to Java Types","21");
B=A.fN("Primitive Types","22");
B=A.fN("Objects","23");
C=B.fN("Object Instantiation","23#1538265");
C=B.fN("Object Property Assignment","23#1538294");
C=B.fN("Object Property Access","23#1538306");
C=B.fN("Object Methods","23#1551631");
B=A.fN("Boolean Values","24");
B=A.fN("Sequences of Characters","25");
B=A.fN("Array Types","26");
C=B.fN("List Access Using Array Index Notation","26#1535845");
C=B.fN("Array Expansion","26#1535889");
C=B.fN("Array-related Entity Methods","26#1550269");
C=B.fN("Associative Array Syntax for Property Access","26#1535394");
C=B.fN("Legacy Array Type","26#1537144");
B=A.fN("Numeric Literals","27");
B=A.fN("Entity Types","28");
B=A.fN("Typekeys and Typelists","29");
C=B.fN("Typelist Literals","29#1550330");
C=B.fN("Typekey Literals","29#1550334");
C=B.fN("Getting Information from a Typekey","29#1550368");
B=A.fN("Compatibility with Earlier Gosu Releases","30");
C=B.fN("DateTime","30#1540293");
C=B.fN("Number","30#1541065");
C=B.fN("Array","30#1490826");
A=P.fN("Gosu Operators and Expressions","31");
B=A.fN("Gosu Operators","32");
C=B.fN("Operator Precedence","33");
B=A.fN("Standard Gosu Expressions","34");
B=A.fN("Arithmetic Expressions","35");
B=A.fN("Equality Expressions","36");
B=A.fN("Evaluation Expressions","37");
B=A.fN("Existence Testing Expressions","38");
B=A.fN("Logical Expressions","39");
B=A.fN("New Object Expressions","40");
B=A.fN("Relational Expressions","41");
B=A.fN("Unary Expressions","42");
B=A.fN("Importing Types and Package Namespaces","43");
B=A.fN("Conditional Ternary Expressions","44");
B=A.fN("Special Gosu Expressions","45");
C=B.fN("Function Calls","46");
C=B.fN("Static Method Calls","47");
C=B.fN("Static Property Paths","48");
C=B.fN("Entity and Typekey Type Literals","49");
B=A.fN("Handling Null Values In Expressions","50");
C=B.fN("Null-safe Property Access","50#1655840");
C=B.fN("Null-safe Default Operator","50#1606622");
C=B.fN("Null-safe Indexing for Arrays, Lists, and Maps","50#1598052");
C=B.fN("Null-safe Math Operators","50#1597472");
A=P.fN("Statements","51");
B=A.fN("Gosu Statements","52");
C=B.fN("Statement Lists","52#1440698");
C=B.fN("New Is Optionally a Statement","52#1503805");
B=A.fN("Gosu Variables","53");
C=B.fN("Variable Type Declaration","53#1141530");
C=B.fN("Variable Assignment","53#1453654");
B=A.fN("Gosu Conditional Execution and Looping","54");
C=B.fN("If - Else Statements","54#1142199");
C=B.fN("For Statements","54#1456475");
C=B.fN("While() Statements","54#1141335");
C=B.fN("Do\u2026While() Statements","54#1137579");
C=B.fN("Switch() Statements","54#1137580");
B=A.fN("Gosu Functions","55");
C=B.fN("Named Arguments and Argument Defaults","55#1483902");
C=B.fN("Public and Private Functions","55#1483028");
A=P.fN("Exception Handling","56");
B=A.fN("Try-Catch-Finally Constructions","57");
B=A.fN("Throw Statements","58");
B=A.fN("Catching Exceptions in Gosu","59");
B=A.fN("Object Lifecycle Management (using Clauses)","60");
C=B.fN("Disposable Objects","60#1466707");
C=B.fN("Closeable Objects and using Clauses","60#1466986");
C=B.fN("Reentrant Objects and using Clauses","60#1457358");
C=B.fN("Returning Values from using Clauses","60#1469250");
C=B.fN("Optional Use of a finally Clause with a using Clause","60#1514195");
B=A.fN("Assert Statements","61");
A=P.fN("Intervals","62");
B=A.fN("What are Intervals?","63");
C=B.fN("Reversing Interval Order","63#1456056");
C=B.fN("Granularity (Step and Unit)","63#1456531");
B=A.fN("Writing Your Own Interval Type","64");
C=B.fN("Custom Iterable Intervals Using Sequenceable Items","64#1461393");
C=B.fN("Custom Iterable Intervals Using Manually-written Iterators","64#1462661");
C=B.fN("Custom Non-iterable Interval Types","64#1461152");
A=P.fN("Calling Java from Gosu","65");
B=A.fN("Overview of Writing Gosu Code that Calls Java","66");
C=B.fN("Many Java Classes are Core Classes for Gosu","66#2134273");
C=B.fN("Java Packages in Scope","66#2131311");
C=B.fN("Static Members and Static Import in Gosu","66#2047802");
C=B.fN("Java get/set/is Methods Convert to Gosu Properties","66#2021794");
C=B.fN("Interfaces","66#2020668");
C=B.fN("Enumerations","66#2020577");
C=B.fN("Annotations","66#2047848");
C=B.fN("Java Primitives","66#2047899");
C=B.fN("Java Generics","66#2135372");
A=P.fN("Query Builder APIs","67");
B=A.fN("Overview of the Query Builder APIs","68");
C=B.fN("The Processing Cycle of Queries","68#2237067");
C=B.fN("SQL Select Statements and Query Builder APIs Compared","68#2237083");
B=A.fN("Building Simple Queries","69");
C=B.fN("Restricting the Results of a Simple Query","69#2237297");
C=B.fN("Ordering the Results of a Simple Query","69#2237312");
C=B.fN("Accessing the Results of a Simple Query","69#2237326");
B=A.fN("Joining Related Entities to Queries","70");
C=B.fN("Joining an Entity to a Query with a Simple Join","71");
C=B.fN("Restricting Query Results with Fields on Joined Entities","72");
C=B.fN("Different Ways to Join Related Entities to Queries","73");
C=B.fN("Making a Query with an Inner Join","74");
C=B.fN("Making a Query with a Left Outer Join","75");
C=B.fN("Adding Predicates to Joined Entities","76");
C=B.fN("Handling Duplicates in Joins with Foreign Keys on the Right","77");
B=A.fN("Restricting Queries with Predicates on Fields","78");
C=B.fN("Using Comparison Predicates with Character Fields","79");
C=B.fN("Using Comparison Predicates with Date and Time Fields","80");
C=B.fN("Using Comparison Predicates with Null Values","81");
C=B.fN("Using Set Inclusion and Exclusion Predicates","82");
C=B.fN("Comparing Column Values with Each Other","83");
C=B.fN("Comparing Column Values with Literal Values","84");
C=B.fN("Comparing Typekey Column Values with Typekey Literals","85");
C=B.fN("Combining Predicates with AND and OR Logic","86");
C=B.fN("Predicate Methods Reference","87");
B=A.fN("Working with Row Queries","88");
C=B.fN("Setting Up Row Queries","88#2930783");
C=B.fN("Database Aggregate Functions Within Select Blocks","89");
C=B.fN("Applying Functions to Selected Fields","90");
C=B.fN("Limitations of Row Queries","91");
B=A.fN("Working with Results","92");
C=B.fN("What Result Objects Contain","93");
C=B.fN("Filtering Results with Standard Query Filters","94");
C=B.fN("Ordering Results","95");
C=B.fN("Useful Properties and Methods on Result Objects","96");
C=B.fN("Converting Result Objects to Lists, Arrays, Collections, and Sets","97");
C=B.fN("Updating Entity Instances in Query Results","98");
B=A.fN("Testing and Optimizing Queries","99");
C=B.fN("Performance Differences Between Entity and Row Queries","100");
C=B.fN("Viewing the SQL Select Statement for a Query","101");
C=B.fN("Enabling Context Comments in Queries on SQL Server or DB2","102");
C=B.fN("Including Retired Entities in Query Results","103");
C=B.fN("Setting the Page Size for Prefetching Query Results","104");
C=B.fN("Chaining Query Builder Methods","105");
C=B.fN("Working with Advanced Inline Views","106");
B=A.fN("Method and Type Reference for the Query Builder APIs","107");
A=P.fN("Find Expressions","108");
B=A.fN("Basic Find Expressions","108#1425943");
C=B.fN("Find Expressions that Use AND/OR Operators","108#1417461");
C=B.fN("Find Expressions that Use Equality and Relational Operators","108#1137084");
C=B.fN("Find Expressions that Use Where...In Clauses","108#1359589");
C=B.fN("Find Expressions and Non-Equality Comparisons","108#1370677");
B=A.fN("Using Exists Expressions for Array Properties in Find Expressions","108#1359679");
C=B.fN("Fixing Invalid Queries by Adding Exists Clauses","108#1360475");
C=B.fN("Combining Exists Expressions","108#1358792");
B=A.fN("Find Expressions that Use Special Substring Keywords","108#1359890");
B=A.fN("Using the Results of Find Expressions (Using Query Objects)","108#1289012");
C=B.fN("Basic Iterator Example","108#1361185");
C=B.fN("Handling Large Query Objects from Find Expressions","108#1220606");
C=B.fN("Sorting Results","108#1220627");
C=B.fN("Retrieving a Single Row from Find Expression Results","108#1137173");
C=B.fN("Found Entities Are Read-only Until Added to a Bundle","108#1361064");
C=B.fN("Query Objects Returned by Find Expressions Are Always Dynamic","108#1360246");
A=P.fN("Classes","109");
B=A.fN("What Are Classes?","110");
B=A.fN("Creating and Instantiating Classes","111");
C=B.fN("Creating a New Instance of a Class","111#2449212");
C=B.fN("Naming Conventions for Packages and Classes","111#2447745");
B=A.fN("Properties","112");
C=B.fN("Properties Act Like Data But They Are Dynamic and Virtual Functions","112#2477145");
C=B.fN("Property Paths are Null Tolerant","112#2465283");
C=B.fN("Static Properties","112#2449277");
C=B.fN("More Property Examples","112#2447851");
B=A.fN("Modifiers","113");
C=B.fN("Access Modifiers","113#2445688");
C=B.fN("Override Modifier","113#2449862");
C=B.fN("Abstract Modifier","113#2449868");
C=B.fN("Final Modifier","113#2449875");
C=B.fN("Static Modifier","113#2446412");
B=A.fN("Inner Classes","114");
C=B.fN("Named Inner Classes","114#2450636");
C=B.fN("Anonymous Inner Classes","114#2450064");
A=P.fN("Enumerations","115");
B=A.fN("Using Enumerations","116");
C=B.fN("Extracting Information from Enumerations","116#1459344");
C=B.fN("Comparing Enumerations","116#1459295");
A=P.fN("Interfaces","117");
B=A.fN("What is an Interface?","118");
B=A.fN("Defining and Using an Interface","119");
C=B.fN("Defining and Using Properties with Interfaces","119#1457203");
C=B.fN("Modifiers and Interfaces","119#1459141");
A=P.fN("Composition","120");
B=A.fN("Using Gosu Composition","121");
C=B.fN("Overriding Methods Independent of the Delegate Class","121#2201000");
C=B.fN("Declaring Delegate Implementation Type in the Variable Definition","121#2198236");
C=B.fN("Using One Delegate for Multiple Interfaces","121#2198240");
C=B.fN("Using Composition With Built-in Interfaces","121#2198246");
A=P.fN("Annotations","122");
B=A.fN("Annotating a Class, Method, Type, Class Variable, or Argument","123");
C=B.fN("Built-in Annotations","123#1471842");
B=A.fN("Annotations at Run Time","124");
C=B.fN("Gosu Class Function Parameter Argument Annotations at Run Time","124#1491415");
B=A.fN("Defining Your Own Annotations","125");
C=B.fN("Customizing Annotation Usage","125#1434674");
A=P.fN("Enhancements","126");
B=A.fN("Using Enhancements","127");
C=B.fN("Syntax for Using Enhancements","127#1439437");
C=B.fN("Creating a New Enhancement","127#1439200");
C=B.fN("Syntax for Defining Enhancements","127#1439430");
C=B.fN("Enhancement Naming and Package Conventions","127#1437458");
C=B.fN("Enhancements on Arrays","127#1438604");
A=P.fN("Gosu Blocks","128");
B=A.fN("What Are Blocks?","129");
B=A.fN("Basic Block Definition and Invocation","130");
B=A.fN("Variable Scope and Capturing Variables In Blocks","131");
B=A.fN("Argument Type Inference Shortcut In Certain Cases","132");
B=A.fN("Block Type Literals","133");
B=A.fN("Blocks and Collections","134");
B=A.fN("Blocks as Shortcuts for Anonymous Classes","135");
A=P.fN("Gosu Generics","136");
B=A.fN("Gosu Generics Overview","137");
B=A.fN("Using Gosu Generics","138");
C=B.fN("Parameterized Classes","138#1454721");
C=B.fN("Parameterized Methods","138#1454736");
B=A.fN("Other Unbounded Generics Wildcards","139");
B=A.fN("Generics and Blocks","140");
B=A.fN("How Generics Help Define Collection APIs","141");
B=A.fN("Multiple Dimensionality Generics","142");
B=A.fN("Generics With Custom \u2018Containers\u2019","143");
C=B.fN("Generics with Non-Containers","143#1446525");
A=P.fN("Collections","144");
B=A.fN("Basic Lists","145");
C=B.fN("Creating a List","145#1451974");
C=B.fN("Type Inference and List Initialization","145#1452009");
C=B.fN("Getting and Setting List Values","145#1467078");
C=B.fN("Special Behavior of List Interface in Gosu","145#1466017");
B=A.fN("Basic Hash Maps","146");
C=B.fN("Creating a Hash Map","146#1452165");
C=B.fN("Getting and Setting Values in a Hash Map","146#1452408");
C=B.fN("Creating a Hash Map with Type Inference","146#1452539");
C=B.fN("Special Enhancements on Maps","146#1452216");
C=B.fN("Wrapped Maps with Default Values","146#1501650");
B=A.fN("List and Array Expansion (*.)","147");
C=B.fN("Array Flattening to Single Dimensional Array","147#1466345");
C=B.fN("Application-Specific Examples","147#1466372");
B=A.fN("Enhancement Reference for Collections and Related Types","148");
C=B.fN("Collections Enhancement Methods","149");
C=B.fN("Finding Data in Collections","149#1462591");
C=B.fN("Sorting Collections","149#1505126");
C=B.fN("Mapping Data in Collections","149#1442277");
C=B.fN("Iterating Across Collections","149#1442285");
C=B.fN("Partitioning Collections","149#1442296");
C=B.fN("Converting Lists, Arrays, and Sets","149#1449882");
C=B.fN("Flat Mapping a Series of Collections or Arrays","149#1450050");
C=B.fN("Sizes and Length of Collections and Strings are Equivalent","149#1443101");
A=P.fN("Gosu and XML","150");
B=A.fN("Manipulating XML Overview","151");
C=B.fN("Legacy XML Support","152");
B=A.fN("Introduction to the XML Element in Gosu","153");
C=B.fN("Dollar Sign Prefix for Properties that Are XSD Types","154");
B=A.fN("Exporting XML Data","155");
C=B.fN("Export-related Methods on an XML Element","155#1866472");
C=B.fN("XML Serialization Options Reference and Examples","155#1911570");
B=A.fN("Parsing XML Data into an XML Element","156");
B=A.fN("Creating Many Qualified Names in the Same Namespace","157");
B=A.fN("XSD-based Properties and Types","158");
C=B.fN("Important Concepts in XSD Properties and Types","158#1651042");
C=B.fN("XSD Generated Type Examples","158#1673249");
C=B.fN("Automatic Insertion into Lists","158#1673851");
C=B.fN("XSD List Property Example","158#1610237");
B=A.fN("Getting Data From an XML Element","159");
C=B.fN("Manipulating Elements and Values (Works With or Without XSD)","159#1538638");
C=B.fN("Attributes","159#1520181");
B=A.fN("Simple Values","160");
C=B.fN("Methods to Create XML Simple Values","160#1622820");
C=B.fN("XSD to Gosu Simple Type Mappings","160#1622952");
C=B.fN("Facet Validation","160#1623085");
B=A.fN("Access the Nillness of an Element","161");
B=A.fN("Automatic Creation of Intermediary Elements","162");
B=A.fN("Default and Fixed Attribute Values","163");
B=A.fN("Substitution Group Hierarchies","164");
B=A.fN("Element Sorting for XSD-based Elements","165");
B=A.fN("Built-in Schemas","166");
C=B.fN("The XSD that Defines an XSD (The Metaschema)","166#1541995");
B=A.fN("Use a Local XSD for an External Namespace or XSD Location","167");
B=A.fN("Schema Access Type","168");
B=A.fN("The Guidewire XML (GX) Modeler","169");
C=B.fN("Automatic Publishing of the Generated XSD","170");
C=B.fN("Generating XML Using an XML Model","171");
C=B.fN("Customizing GX Modeler Output (GXOptions)","172");
C=B.fN("Parsing XML Into an XML Model","173");
C=B.fN("Arrays of Entities in XML Output","174");
C=B.fN("Complete Guidewire XML Model Example","175");
C=B.fN("XML Serialization Performance and Element Sorting","175#1931305");
C=B.fN("Type Conversions from Gosu Types to XSD Types","175#1865256");
B=A.fN("Legacy XML APIs: Manipulating XML as Untyped Nodes","176");
C=B.fN("Untyped Node Operations","176#1865288");
C=B.fN("Example of Manipulating XML as Untyped Nodes","177");
B=A.fN("Legacy XML APIs: Exporting XML Data","178");
B=A.fN("Legacy XML APIs: Collection-like Enhancements for XML","179");
B=A.fN("Legacy XML APIs: Structured XML Using XSDs","180");
C=B.fN("Importing Strongly-Typed XML","181");
C=B.fN("Writing Strongly-Typed XML","182");
C=B.fN("Handling XSD Choices in XML","183");
C=B.fN("Gosu Type to XSD Type Conversion Reference","184");
C=B.fN("XSD Namespaces and Qualified Names","185");
C=B.fN("Autocreation of Intermediate Nodes","186");
C=B.fN("XML Node IDs","187");
C=B.fN("Date Handling in XSDs","188");
A=P.fN("Bundles and Database Transactions","189");
B=A.fN("When to Use Database Transaction APIs","190");
B=A.fN("Bundle Overview","191");
B=A.fN("Adding Entity Instances to Bundles","192");
C=B.fN("Making an Entity Instance Writable By Adding to a Bundle","192#1562051");
C=B.fN("Moving a Writable Entity Instance to a New Writable Bundle","192#1640335");
B=A.fN("Getting the Bundle of an Existing Entity Instance","193");
B=A.fN("Getting an Entity from a Public ID or a Key (Internal ID)","194");
B=A.fN("Creating New Entity Instances in Specific Bundles","195");
B=A.fN("Committing a Bundle Explicitly in Very Rare Cases","196");
B=A.fN("Removing Entity Instances from the Database","197");
B=A.fN("Determining What Data Changed in a Bundle","198");
C=B.fN("Detecting Property Changes on an Entity Instance","198#1631064");
C=B.fN("Getting Changes to Entity Arrays in the Current Bundle","198#1613756");
C=B.fN("Getting Add, Changed, or Deleted Entities In a Bundle","198#1613798");
B=A.fN("Running Code in an Entirely New Bundle","199");
C=B.fN("Create Bundle For a Specific ClaimCenter User","199#1583029");
C=B.fN("Warning about Transaction Class Confusion","199#1602225");
B=A.fN("Exception Handling And Database Commits","200");
B=A.fN("Bundles and Published Web Services","201");
B=A.fN("Entity Cache Versioning, Locking, and Entity Refreshing","202");
C=B.fN("Entity Instance Versioning and the Entity Touch API","202#1571322");
C=B.fN("Record Locking for Concurrent Data Access","202#1568961");
C=B.fN("User Interface Bundle Refreshes","202#1568698");
B=A.fN("Details of Bundle Commit Steps","203");
A=P.fN("Gosu Templates","204");
B=A.fN("Template Overview","205");
C=B.fN("Template Expressions","205#1464080");
C=B.fN("When to Escape Special Characters for Templates","206");
B=A.fN("Using Template Files","207");
C=B.fN("Creating and Running a Template File","207#1464601");
C=B.fN("Template Scriptlet Tags","207#1461443");
C=B.fN("Template Parameters","207#1463866");
C=B.fN("Extending a Template From a Class","207#1455745");
C=B.fN("Template Comments","207#1463274");
B=A.fN("Template Export Formats","207#1465221");
A=P.fN("Type System","208");
B=A.fN("The Type of All Types","209");
B=A.fN("Basic Type Coercion","209#1444327");
B=A.fN("Basic Type Checking","210");
C=B.fN("Automatic Downcasting for \u2018typeis\u2019 and \u2018typeof\u2019","210#1455253");
B=A.fN("Using Reflection","211");
C=B.fN("Type Object Properties","211#1441372");
C=B.fN("Java Type Reflection","211#1441477");
C=B.fN("Type System Class","211#1465566");
C=B.fN("Feature Literals","211#1487207");
B=A.fN("Compound Types","212");
B=A.fN("Type Loaders","213");
A=P.fN("Concurrency","214");
B=A.fN("Overview of Thread Safety and Concurrency","215");
B=A.fN("Request and Session Scoped Variables","216");
B=A.fN("Concurrent Lazy Variables","217");
C=B.fN("Optional Non-Locking Lazy Variables","217#1507282");
B=A.fN("Concurrent Cache","218");
B=A.fN("Concurrency with Monitor Locks and Reentrant Objects","219");
A=P.fN("Gosu Command Line Shell","220");
B=A.fN("Gosu Command Line Tool Basics","221");
C=B.fN("Unpacking and Installing the Gosu Command Line Shell","221#2211837");
C=B.fN("Command Line Tool Options","221#2182333");
C=B.fN("Writing a Simple Gosu Command Line Program","221#2208954");
B=A.fN("Command Line Arguments","222");
B=A.fN("Advanced Class Loading Registry","223");
B=A.fN("Gosu Interactive Shell","224");
B=A.fN("Helpful APIs for Command Line Gosu Programs","225");
A=P.fN("Gosu Programs","226");
B=A.fN("The Structure of a Gosu Program","227");
C=B.fN("Metaline as First Line","227#2209342");
C=B.fN("Functions in a Gosu Program","227#2209347");
C=B.fN("Setting the Class Path to Call Other Gosu or Java Classes","227#2209362");
A=P.fN("Running Local Shell Commands","228");
B=A.fN("Running Command Line Tools from Gosu","228#2186018");
A=P.fN("Checksums","229");
B=A.fN("Overview of Checksums","230");
B=A.fN("Creating Fingerprints","230#1442951");
C=B.fN("How to Output Data Inside a Fingerprint","230#1443786");
B=A.fN("Extending Fingerprints","230#1442456");
A=P.fN("Properties Files","231");
B=A.fN("Reading Properties Files","231#1458192");
A=P.fN("Coding Style","232");
B=A.fN("General Coding Guidelines","233");
C=B.fN("Omit Semicolons","233#1445233");
C=B.fN("Type Declarations","233#1445238");
C=B.fN("The == and != Operator Recommendations and Warnings","233#1445388");
C=B.fN("Capitalization Conventions","233#1458561");
C=B.fN("Class Variable and Class Property Recommendations","233#1446206");
C=B.fN("Use \u2018typeis\u2019 Inference","233#1454113");
}
