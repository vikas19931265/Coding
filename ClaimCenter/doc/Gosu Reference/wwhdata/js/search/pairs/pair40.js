function FileData_Pairs(x)
{
x.t("gosutype","argument_list");
x.t("tells","gosu");
x.t("passed","parameter");
x.t("passed","directly");
x.t("complex","hard-to-read");
x.t("example","uses");
x.t("example","suppose");
x.t("example","first");
x.t("looks","following");
x.t("statements","follow");
x.t("statements","object");
x.t("root","//");
x.t("testset.tests.add","new");
x.t("testset.tests.add","(test)");
x.t("referencing","existing");
x.t("creation","time");
x.t("creation","function");
x.t("creation","expression");
x.t("construct","instance");
x.t("transactions","examples");
x.t("transactions","following");
x.t("parameter","new");
x.t("parameter","non-readonly");
x.t("parameter","entity");
x.t("indicated","bundle");
x.t("determined","programming");
x.t("determined","context");
x.t("method","argument");
x.t("method","predetermined");
x.t("doaction","method");
x.t("doaction","arg1");
x.t("age","class");
x.t("properties","creation");
x.t("properties","new");
x.t("properties","newly");
x.t("properties","nested");
x.t("combined","data");
x.t("claim","claim");
x.t("claim","user");
x.t("claim","abc:demo_sample:1");
x.t("claim","bundle");
x.t("claim","submit");
x.t("claim",":claimid");
x.t("hashmap","java");
x.t("lists","basic");
x.t("lists","collections");
x.t("lists","behavior");
x.t("clear","object");
x.t("within","new");
x.t("within","bounds");
x.t("infers","enum");
x.t("create","instance");
x.t("create","guidewire");
x.t("create","new");
x.t("create","test");
x.t("create","initialize");
x.t("create","initalize");
x.t("create","entity");
x.t("business","entities");
x.t("business","data");
x.t("table","lists");
x.t("hard-to-read","type");
x.t("_name","string");
x.t("_age","int");
x.t("alternate","form");
x.t("instance","method");
x.t("instance","hashmap");
x.t("instance","type");
x.t("instance","new");
x.t("instance","although");
x.t("bundles","bundles");
x.t("bundles","database");
x.t("related","current");
x.t("variables","class");
x.t("testid","object");
x.t("enum","class");
x.t("arguments","tells");
x.t("arguments","create");
x.t("arguments","best");
x.t("arguments","new");
x.t("arguments","constructor");
x.t("array_value_list","//");
x.t("java.util.hashmap","(8)");
x.t("discouraged","typical");
x.t("user","change");
x.t("user","typical");
x.t("current","code");
x.t("current","database");
x.t("current","bundle");
x.t("creates","instance");
x.t("creates","string");
x.t("creates","var");
x.t("12","members");
x.t("container","myfilecontainer.basedir");
x.t("container",":destfile");
x.t("container","using");
x.t("container","myfilecontainer.destfile");
x.t("test.name","test1");
x.t("uses","new");
x.t("uses","local");
x.t("uses","types");
x.t("uses","object");
x.t("declared","type");
x.t("hash","maps");
x.t("text_val.select","link");
x.t("statement","omits");
x.t("statement","syntax");
x.t("statement","return");
x.t("statement","var");
x.t("t.student","new");
x.t(":update","true");
x.t(":whenmanifestonly","scriptenvironment.when_empty_skip");
x.t("look","up");
x.t("type","construct");
x.t("type","determined");
x.t("type","type");
x.t("type","property");
x.t("type","new");
x.t("type","assign");
x.t("type","simple");
x.t("type","name");
x.t("type","gosu");
x.t("type","argument");
x.t("type","omit");
x.t("type","array");
x.t("type","next");
x.t("type","java");
x.t("type","optionally");
x.t("type","entity");
x.t("type","class");
x.t("type","names");
x.t("type","var");
x.t("type","object");
x.t("best","approach");
x.t("change","triggered");
x.t("sample","code");
x.t("basic","lists");
x.t("basic","hash");
x.t("time",":whenmanifestonly");
x.t("time","new");
x.t("time","optionally");
x.t("hierarchical","structures");
x.t("explicitly","type");
x.t("colon","property");
x.t("testset.tests.get","(1)");
x.t("public","id");
x.t("multiple","constructors");
x.t("testset","new");
x.t("testset","//");
x.t("form","look");
x.t("guidewire","business");
x.t("guidewire","entities");
x.t("guidewire","entity");
x.t("entities","claim");
x.t("entities","want");
x.t("apis","details");
x.t("apis","overriding");
x.t("default","behavior");
x.t("property","declared");
x.t("property","property");
x.t("property","test");
x.t("property","true");
x.t("property","name");
x.t("property","second");
x.t("property","initializer");
x.t("property","//");
x.t("myfilecontainer.basedir","dir");
x.t("convert","test");
x.t("new","gosutype");
x.t("new","statements");
x.t("new","claim");
x.t("new","lists");
x.t("new","instance");
x.t("new","java.util.hashmap");
x.t("new","t.student");
x.t("new","statement");
x.t("new","testset");
x.t("new","file");
x.t("new","javatype");
x.t("new","test");
x.t("new","omit");
x.t("new","string");
x.t("new","empty");
x.t("new","teststyle");
x.t("new","testtype");
x.t("new","my.company.filecontainer");
x.t("new","expressions");
x.t("new","keyword");
x.t("new","expression");
x.t("new","arraytype");
x.t("new","note");
x.t("new","optionally");
x.t("new","entity");
x.t("new","following");
x.t("new","//");
x.t("new","operator");
x.t("new","object");
x.t("link","directly");
x.t("objects","within");
x.t("objects","simple");
x.t("objects","choose");
x.t("objects","immediately");
x.t("single","argument");
x.t(":destfile","jarfile");
x.t("want","reference");
x.t("details","alternate");
x.t("size","new");
x.t("passes","arguments");
x.t("care","information");
x.t("messsage","gosu");
x.t("list","initial");
x.t("list","contains");
x.t("omits","type");
x.t("braces","property");
x.t("file","container");
x.t("assign","type");
x.t("assign","new");
x.t("assign","variable");
x.t("assignment","statements");
x.t("assignment","statement");
x.t("assignment","variable");
x.t("during","assignment");
x.t("jarfile",":basedir");
x.t("jarfile","//");
x.t("add","new");
x.t("add","array");
x.t(":color","red");
x.t("id","string");
x.t("guide","gosu");
x.t("initialized","new");
x.t("simple","assignment");
x.t("simple","easier");
x.t("simple","cases");
x.t("simple","object");
x.t("_student","person");
x.t("results","value");
x.t("propertyname","value");
x.t("scriptenvironment.when_empty_skip","nested");
x.t("scriptenvironment.when_empty_skip","following");
x.t("sure","appropriate");
x.t("initializers","properties");
x.t("initializers","create");
x.t("initializers","simple");
x.t("initializers","compact");
x.t("initializers","especially");
x.t("initializers","reflect");
x.t("initializers","comprise");
x.t("initializers","object");
x.t("collections","maps");
x.t("recommended","type");
x.t("directly","new");
x.t("directly","page");
x.t("javatype","argument_list");
x.t("imported","xsds");
x.t("declare","variable");
x.t("test","testset.tests.add");
x.t("test","test.name");
x.t("test","type");
x.t("test","new");
x.t("test","add");
x.t("test",":tests");
x.t("test","array");
x.t("test","testset.name");
x.t("test","function");
x.t("test",":type");
x.t("test","xml");
x.t("test","return");
x.t("test",":number");
x.t("test",":name");
x.t("test","style");
x.t("test","//");
x.t("test","var");
x.t("sampleclaim","new");
x.t("commas","enclosed");
x.t("true","myfilecontainer.whenmanifestonly");
x.t("true","second");
x.t("true","//");
x.t("text_val.focus","text_val.select");
x.t("no","arguments");
x.t("no","initial");
x.t("name","create");
x.t("name","new");
x.t("name","test");
x.t("name","t.teacher");
x.t("name","private");
x.t("name","xml");
x.t("name","omitted");
x.t("name","context");
x.t("name","equals");
x.t("name","entirely");
x.t("name","//");
x.t("name","pass");
x.t("enclosed","curly");
x.t("test1","testset.tests.add");
x.t("test1","//");
x.t("(test)","//");
x.t("creating","new");
x.t("gosu","infers");
x.t("gosu","create");
x.t("gosu","uses");
x.t("gosu","type");
x.t("gosu","passes");
x.t("gosu","operators");
x.t("gosu","reference");
x.t("gosu","class");
x.t("constructor","creation");
x.t("constructor","arguments");
x.t("constructor","multiple");
x.t("constructor","call");
x.t("initialize","properties");
x.t("initialize","test");
x.t("argument","doaction");
x.t("argument","type");
x.t("argument","new");
x.t("argument","list");
x.t("argument","omit");
x.t("argument","t.doaction");
x.t("dense","hierarchical");
x.t("initializing","lists");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("parameters","parameter");
x.t("none","create");
x.t("constructs","new");
x.t("predetermined","//");
x.t("teacher","private");
x.t("useful","combined");
x.t("useful","constructing");
x.t(".type","new");
x.t("overriding","default");
x.t("omit","type");
x.t("omit","new");
x.t("manipulation","dense");
x.t("declarations","especially");
x.t("myfilecontainer","new");
x.t(":tests","new");
x.t("up","entity");
x.t("allows","declaring");
x.t("myfilecontainer.whenmanifestonly","scriptenvironment.when_empty_skip");
x.t("final","property");
x.t("teststyle.color","red");
x.t("array","12");
x.t("array","testset.tests.get");
x.t("array","guidewire");
x.t("array","new");
x.t("array","test");
x.t("array","three");
x.t("array",":final");
x.t("array","members");
x.t("array","least");
x.t("array",":style");
x.t("array","var");
x.t("string","creates");
x.t("string","new");
x.t("string","name");
x.t("string","argument");
x.t("string","array");
x.t("string","[12]");
x.t("string","//");
x.t("empty","string");
x.t("local","variables");
x.t("int","age");
x.t("sets","properties");
x.t("unneeded","new");
x.t("three","members");
x.t("structures","long");
x.t("structures","special");
x.t("understand","promote");
x.t("second","test");
x.t(":final","true");
x.t("(myclaim.bundle)","constructs");
x.t("preceding","code");
x.t("teststyle","new");
x.t("teststyle","//");
x.t("in-memory","xml");
x.t("error","occurred");
x.t("strongly","discouraged");
x.t("sometimes","complex");
x.t("equivalent","preceding");
x.t("testtype","//");
x.t("testset.toxml","//");
x.t("already-existing","guidewire");
x.t("operators","expressions");
x.t("syntax","initializing");
x.t("syntax","allows");
x.t("syntax","rules");
x.t("syntax","typical");
x.t("syntax","nested");
x.t("syntax","object");
x.t("members","initialized");
x.t("members","no");
x.t("members","pass");
x.t("next","assign");
x.t("compact","clear");
x.t("especially","useful");
x.t("suppose","following");
x.t("testset.name","root");
x.t("red","//");
x.t("exposed","type");
x.t("long","type");
x.t("first","declare");
x.t("initializer","looks");
x.t("initializer","example");
x.t("initializer","syntax");
x.t("initializer","expressions");
x.t("initializer","assignments");
x.t("initializer","expression");
x.t("my.company.filecontainer","//");
x.t("functionally","equivalent");
x.t(".final","true");
x.t("guidewire_selectall","var");
x.t("constructors","defined");
x.t("visually","nested");
x.t("function","doaction");
x.t("function","exposed");
x.t("function","guidewire_selectall");
x.t("argument_list","//");
x.t("approach","reference");
x.t("approach","generally");
x.t("promote","usage");
x.t("t.teacher","new");
x.t("myfilecontainer.update","true");
x.t("expressions","new");
x.t("expressions","gosu");
x.t("expressions","function");
x.t("expressions","separated");
x.t("expressions","object");
x.t("different","parameters");
x.t("person","teacher");
x.t("person","private");
x.t("person","var");
x.t("person","student");
x.t("private","var");
x.t("dir",":update");
x.t("dir","myfilecontainer.update");
x.t("almost","cases");
x.t(":type","new");
x.t("instead","query");
x.t("declaring","list");
x.t("types","imported");
x.t("types","numbers");
x.t("changes","claim");
x.t("changes","related");
x.t("(myclaim)","constructs");
x.t("keyword","type");
x.t("keyword","strongly");
x.t("keyword","instead");
x.t("keyword","warning");
x.t("keyword","var");
x.t("xml","manipulation");
x.t("xml","rewrite");
x.t("xml","data");
x.t("initial","array");
x.t("initial","values");
x.t("explicit","type");
x.t("omitted","new");
x.t("omitted","//");
x.t("(1)",".type");
x.t("(1)",".final");
x.t("rewrite","preceding");
x.t("reference","guidewire");
x.t("reference","guide");
x.t("reference","already-existing");
x.t("reference","bundle");
x.t("code","creates");
x.t("code","uses");
x.t("code","omit");
x.t("code","sets");
x.t("code","functionally");
x.t("code","perhaps");
x.t("code","using");
x.t("code","var");
x.t("follow","new");
x.t("often","used");
x.t("return","testset.toxml");
x.t("return","value");
x.t("override","bundle");
x.t("adds","time");
x.t("assignments","within");
x.t("least","constructor");
x.t("database","transactions");
x.t("database","time");
x.t("database","new");
x.t("database","transaction");
x.t("(8)","creates");
x.t("triggered","rules");
x.t("given","claim");
x.t("initalize","test");
x.t("java","type");
x.t("java","class");
x.t("bundle","passed");
x.t("bundle","parameter");
x.t("bundle","create");
x.t("bundle","almost");
x.t("bundle","changes");
x.t("bundle","reference");
x.t("bundle","transaction");
x.t("bundle","management");
x.t("bundle","warning");
x.t("bundle","passing");
x.t("variable","explicitly");
x.t("variable","new");
x.t("variable","explicit");
x.t("variable","specific");
x.t("variable","var");
x.t("occurred","messsage");
x.t("extremely","careful");
x.t("rules","creating");
x.t("rules","run");
x.t("_teacher","person");
x.t("curly","braces");
x.t("testset.style","teststyle");
x.t(":number","nested");
x.t("constructing","in-memory");
x.t("existing","guidewire");
x.t("instances","care");
x.t("value","example");
x.t("value","assign");
x.t("value","propertyname");
x.t("value","unneeded");
x.t("value","expression");
x.t("easier","understand");
x.t("usage","simple");
x.t("reflect","visually");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("specific","type");
x.t("[12]","creates");
x.t("perhaps","user");
x.t("programming","context");
x.t("bounds","new");
x.t(":name","root");
x.t(":name","test1");
x.t("builder","apis");
x.t("valid","gosu");
x.t("although","often");
x.t("although","generally");
x.t("expression","new");
x.t("expression","results");
x.t("expression","result");
x.t("expression","optionally");
x.t("expression","itself");
x.t("expression","following");
x.t("expression","//");
x.t(":basedir","dir");
x.t("page","error");
x.t("context","method");
x.t("context","type");
x.t("context","omit");
x.t("typical","code");
x.t("typical","cases");
x.t("typical","pass");
x.t("optional","argument");
x.t("information","bundles");
x.t("information","basic");
x.t("information","query");
x.t("data","property");
x.t("data","structures");
x.t("data","structure");
x.t("data","entity");
x.t("query","builder");
x.t("query","entity");
x.t("defined","case");
x.t("appropriate","otherwise");
x.t("appropriate","teststyle.number");
x.t("meaning","none");
x.t("examples","simple");
x.t("examples","expression");
x.t("result","new");
x.t("arg1","simpleobj");
x.t("t.doaction","new");
x.t("newly","created");
x.t("nested","objects");
x.t("nested","new");
x.t("nested","object");
x.t("equals","symbol");
x.t("case","gosu");
x.t("values","new");
x.t("submit","database");
x.t("arraytype","array_value_list");
x.t("arraytype","size");
x.t("choose","constructor");
x.t("simpleobj","class");
x.t("simpleobj","var");
x.t("structure","syntax");
x.t("structure","code");
x.t(":claimid","testid");
x.t("maps","referencing");
x.t("maps","information");
x.t("maps","specialized");
x.t("specialized","initializer");
x.t("transaction","indicated");
x.t("transaction","current");
x.t("transaction","apis");
x.t("transaction","bundle");
x.t("transaction","entity");
x.t("otherwise","pass");
x.t("non-readonly","bundle");
x.t("note","new");
x.t("note","constructs");
x.t("note","(myclaim.bundle)");
x.t("note","(myclaim)");
x.t("note","adds");
x.t("note","entity");
x.t("optionally","statement");
x.t("optionally","omit");
x.t("cases","example");
x.t("cases","new");
x.t("cases","approach");
x.t("itself","object");
x.t("numbers","objects");
x.t("call","create");
x.t("entirely","object");
x.t("created","objects");
x.t("immediately","new");
x.t("order","colon");
x.t("teststyle.number","testset.style");
x.t("entity","passed");
x.t("entity","create");
x.t("entity","instance");
x.t("entity","current");
x.t("entity","type");
x.t("entity","name");
x.t("entity","given");
x.t("entity","instances");
x.t("entity","information");
x.t("entity","passing");
x.t("used","expression");
x.t("following","example");
x.t("following","table");
x.t("following","sample");
x.t("following","code");
x.t("following","examples");
x.t("following","order");
x.t("following","var");
x.t("management","information");
x.t("run","submit");
x.t("separated","commas");
x.t("style","property");
x.t("style",":color");
x.t("style","test");
x.t("style","teststyle.color");
x.t("special","syntax");
x.t("class","variables");
x.t("class","new");
x.t("class","test");
x.t("class","array");
x.t("class","person");
x.t("class","java");
x.t("class","appropriate");
x.t("class","simpleobj");
x.t("class","tutoring");
x.t("class","var");
x.t("//","properties");
x.t("//","create");
x.t("//","type");
x.t("//","convert");
x.t("//","during");
x.t("//","add");
x.t("//","declare");
x.t("//","name");
x.t("//","gosu");
x.t("//","final");
x.t("//","second");
x.t("//","syntax");
x.t("//","optional");
x.t("//","style");
x.t("//","class");
x.t("//","therefore");
x.t("warning","extremely");
x.t("warning","omitting");
x.t("using","assignment");
x.t("using","bundle");
x.t("using","nested");
x.t("xsds","sometimes");
x.t("symbol","value");
x.t("pass","arguments");
x.t("pass","public");
x.t("pass","single");
x.t("omitting","type");
x.t(":style","new");
x.t("operator","create");
x.t("operator","gosu");
x.t("operator","different");
x.t("operator","override");
x.t("operator","bundle");
x.t("operator","valid");
x.t("operator","although");
x.t("operator","meaning");
x.t("behavior","new");
x.t("behavior","bundle");
x.t("names","types");
x.t("names","following");
x.t("therefore","omit");
x.t("tutoring","new");
x.t("tutoring","private");
x.t("var","claim");
x.t("var","_name");
x.t("var","_age");
x.t("var","testset");
x.t("var","new");
x.t("var","_student");
x.t("var","sampleclaim");
x.t("var","test");
x.t("var","text_val=eval");
x.t("var","myfilecontainer");
x.t("var","string");
x.t("var","teststyle");
x.t("var","person");
x.t("var","_teacher");
x.t("var","data");
x.t("var","tutoring");
x.t("passing","no");
x.t("careful","using");
x.t("comprise","property");
x.t("object","determined");
x.t("object","creation");
x.t("object","type");
x.t("object","property");
x.t("object","initializers");
x.t("object","declarations");
x.t("object","initializer");
x.t("object","expressions");
x.t("object","value");
x.t("object","structure");
x.t("object","object");
x.t("contains","constructor");
x.t("generally","sure");
x.t("generally","recommended");
x.t("student","//");
x.t("myfilecontainer.destfile","jarfile");
}
