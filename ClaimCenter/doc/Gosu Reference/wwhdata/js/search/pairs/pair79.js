function FileData_Pairs(x)
{
x.t("example","want");
x.t("example","preceding");
x.t("example","following");
x.t("example","sql");
x.t("statements","support");
x.t("statements","specify");
x.t("columns","upper");
x.t("provide","compareequalsignorecase");
x.t("method","partial");
x.t("method","case-insensitive");
x.t("fetch","data");
x.t("suffers","include");
x.t("version","column");
x.t("applied","character");
x.t("relational","database");
x.t("implement","comparison");
x.t("table","select");
x.t("rentals","instance");
x.t("rentals","uses");
x.t("rentals","acme");
x.t("rentals","select");
x.t("rentals","query");
x.t("rentals","values");
x.t("rentals","note");
x.t("rentals","//");
x.t("rentals","sql");
x.t("rentals","even");
x.t("variables","generated");
x.t("instance","company");
x.t("querycompany","query.make");
x.t("apply","comparison");
x.t("apply","predicates");
x.t("comparisons","functions");
x.t("comparisons","sometimes");
x.t("comparisons","match");
x.t("comparisons","case-insensitive");
x.t("comparisons","character");
x.t("comparisons","following");
x.t("field","match");
x.t("field","case-insensitive");
x.t("field","company");
x.t("field","sql");
x.t("field","contains");
x.t("uses","denormalized");
x.t("uses","gw.api.database.query");
x.t("query.select","company");
x.t("shows","uses");
x.t("text_val.select","link");
x.t("statement","applies");
x.t("statement","converts");
x.t("statement","claimcenter");
x.t("supportslinguisticsearch","true");
x.t("supportslinguisticsearch","attribute");
x.t("support","following");
x.t("sample","code");
x.t("type","name");
x.t("compareequalsignorecase","method");
x.t("wildcard","characters");
x.t("however","know");
x.t("however","data");
x.t("a.primary_address","b.id");
x.t("apis","provide");
x.t("apis","apply");
x.t("apis","offer");
x.t("apis","restricting");
x.t("convert","values");
x.t("partial","comparisons");
x.t("partial","comparison");
x.t("link","directly");
x.t("acme","rentals");
x.t("want","partial");
x.t("want","select");
x.t("offer","following");
x.t("start","new");
x.t("new","query");
x.t("pimary","entity");
x.t("tableaddress","querycompany.join");
x.t("tableaddress","contains");
x.t("loop","--");
x.t("messsage","gosu");
x.t("upper","lower");
x.t("beginning","character");
x.t("beginning","portions");
x.t("startswith","accepts");
x.t("add","predicate");
x.t("guide","query");
x.t("applies","function");
x.t("applies","predicate");
x.t("denormalized","version");
x.t("(company.name)","comparison");
x.t("(company.name)","important");
x.t("selects","acme");
x.t("accepts","string");
x.t("st","true");
x.t("st","comparison");
x.t("st","select");
x.t("directly","page");
x.t("converts","values");
x.t("converts","character");
x.t("true","gosu");
x.t("true","value");
x.t("true","otherwise");
x.t("true","//");
x.t("text_val.focus","text_val.select");
x.t("name","field");
x.t("name","however");
x.t("name","acme");
x.t("name","equals");
x.t("name","column");
x.t("definition","column");
x.t("definition","specify");
x.t("gosu","uses");
x.t("gosu","sample");
x.t("gosu","reference");
x.t("gosu","character");
x.t("gosu","generates");
x.t("restricting","queries");
x.t("query.make","(company)");
x.t("exactly","comparison");
x.t("exactly","character");
x.t("performance","suffers");
x.t("addresses","a.primary_address");
x.t("comparison","preceding");
x.t("comparison","value");
x.t("comparison","predicate");
x.t("comparison","predicates");
x.t("comparison","values");
x.t("comparison","following");
x.t("compareignorecase","name");
x.t("compareignorecase","predicate");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("(company)","query");
x.t("(company)","//");
x.t("zero","characters");
x.t("methods","simulate");
x.t("constructs","executes");
x.t("secondary","entity");
x.t("sends","relational");
x.t("sign","represents");
x.t("address","secondary");
x.t("fields","sometimes");
x.t("fields","function");
x.t("fields","instead");
x.t("fields","values");
x.t("fields","problem");
x.t("fields","using");
x.t("fields","sql");
x.t("claimcenter","converts");
x.t("claimcenter","sends");
x.t("entire","field");
x.t("(underscore)","represents");
x.t("string","characters");
x.t("sets","supportslinguisticsearch");
x.t("attribute","supportslinguisticsearch");
x.t("attribute","true");
x.t("characters","(underscore)");
x.t("characters","match");
x.t("characters","operator");
x.t("functions","convert");
x.t("functions","query");
x.t("preceding","query");
x.t("preceding","sql");
x.t("error","occurred");
x.t("queries","predicates");
x.t("sometimes","want");
x.t("equivalent","query");
x.t("equivalent","sql");
x.t("occurs","compare");
x.t("know","whether");
x.t("know","case");
x.t("select","example");
x.t("select","statements");
x.t("select","company");
x.t("select","companies");
x.t("lcase","(b.addressline1)");
x.t("lcase","(name)");
x.t("functionally","equivalent");
x.t("means","case-insenstive");
x.t("guidewire_selectall","var");
x.t("gw.api.database.query","//");
x.t("gw.api.database.query","var");
x.t("literal","values");
x.t("function","implement");
x.t("function","guidewire_selectall");
x.t("function","compare");
x.t("primaryaddress","//");
x.t("whether","company");
x.t("middle","character");
x.t("represents","exactly");
x.t("represents","zero");
x.t("instead","matching");
x.t("match","beginning");
x.t("match","exactly");
x.t("match","portion");
x.t("bind","variables");
x.t("case-insensitive","comparisons");
x.t("case-insensitive","partial");
x.t("case-insensitive","sql");
x.t("important","data");
x.t("reference","guide");
x.t("code","shows");
x.t("code","applies");
x.t("code","selects");
x.t("code","constructs");
x.t("typekey","column");
x.t("typekey","literals");
x.t("often","occurs");
x.t("primary","entity");
x.t("database","acme");
x.t("database","comparing");
x.t("lower","function");
x.t("lower","case");
x.t("b.id","lcase");
x.t("case-insenstive","--");
x.t("occurred","messsage");
x.t("querycompany.join","primaryaddress");
x.t("instances","select");
x.t("instances","specific");
x.t("include","column");
x.t("market","st");
x.t("predicate","method");
x.t("predicate","however");
x.t("predicate","acme");
x.t("predicate","secondary");
x.t("value","example");
x.t("value","means");
x.t("value","including");
x.t("named","acme");
x.t("main","st");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("specific","company");
x.t("--","fetch");
x.t("--","start");
x.t("--","tableaddress");
x.t("--","add");
x.t("--","equivalent");
x.t("--","join");
x.t("--","//");
x.t("--","var");
x.t("builder","apis");
x.t("builder","code");
x.t("builder","predicates");
x.t("generated","sql");
x.t("making","comparisons");
x.t("making","comparison");
x.t("(b.addressline1)","main");
x.t("page","error");
x.t("query","uses");
x.t("query","query.make");
x.t("query","performance");
x.t("query","compareignorecase");
x.t("query","builder");
x.t("query","company");
x.t("query","compare");
x.t("query","object");
x.t("data","loop");
x.t("data","print");
x.t("data","model");
x.t("insensitivity","gosu");
x.t("equals","acme");
x.t("result","query.select");
x.t("result","print");
x.t("result","querycompany.select");
x.t("predicates","applied");
x.t("predicates","fields");
x.t("predicates","bind");
x.t("predicates","character");
x.t("predicates","column");
x.t("predicates","entity");
x.t("values","columns");
x.t("values","field");
x.t("values","want");
x.t("values","name");
x.t("values","know");
x.t("values","literal");
x.t("values","typekey");
x.t("values","comparing");
x.t("values","clause");
x.t("values","addressline1");
x.t("values","sql");
x.t("case","comparison");
x.t("case","making");
x.t("case","insensitivity");
x.t("case","comparing");
x.t("case","character");
x.t("case","applying");
x.t("comparing","typekey");
x.t("comparing","main");
x.t("comparing","column");
x.t("join","address");
x.t("company.primaryaddress.addressline1","choose");
x.t("character","field");
x.t("character","fields");
x.t("character","query");
x.t("character","values");
x.t("character","literals");
x.t("print","(company.name)");
x.t("print","company");
x.t("print","var");
x.t("problem","often");
x.t("choose","case");
x.t("column","compareignorecase");
x.t("column","sets");
x.t("column","attribute");
x.t("column","instead");
x.t("column","lower");
x.t("column","values");
x.t("column","companies");
x.t("note","claimcenter");
x.t("otherwise","query");
x.t("executes","functionally");
x.t("literals","comparison");
x.t("literals","case-insensitive");
x.t("literals","specify");
x.t("clause","example");
x.t("following","example");
x.t("following","wildcard");
x.t("following","gosu");
x.t("following","methods");
x.t("following","sql");
x.t("entity","type");
x.t("entity","pimary");
x.t("entity","fields");
x.t("entity","instances");
x.t("entity","--");
x.t("entity","company");
x.t("model","definition");
x.t("percent","sign");
x.t("using","gosu");
x.t("using","comparison");
x.t("using","functions");
x.t("//","fetch");
x.t("//","true");
x.t("//","--");
x.t("//","query");
x.t("(name)","acme");
x.t("portions","middle");
x.t("company","acme");
x.t("company","primary");
x.t("company","database");
x.t("company","instances");
x.t("company","named");
x.t("company","--");
x.t("company","result");
x.t("company","company.primaryaddress.addressline1");
x.t("company","entity");
x.t("company","var");
x.t("compare","name");
x.t("compare","values");
x.t("compare","character");
x.t("portion","character");
x.t("addressline1","lower");
x.t("addressline1","market");
x.t("sql","example");
x.t("sql","apply");
x.t("sql","statement");
x.t("sql","select");
x.t("sql","lower");
x.t("sql","//");
x.t("sql","operator");
x.t("applying","predicate");
x.t("operator","startswith");
x.t("operator","percent");
x.t("simulate","sql");
x.t("var","querycompany");
x.t("var","tableaddress");
x.t("var","text_val=eval");
x.t("var","query");
x.t("var","result");
x.t("including","case");
x.t("even","acme");
x.t("completely","entire");
x.t("generates","sql");
x.t("companies","table");
x.t("companies","name");
x.t("companies","addresses");
x.t("companies","lcase");
x.t("object","following");
x.t("specify","case-insensitive");
x.t("specify","query");
x.t("specify","column");
x.t("matching","completely");
x.t("contains","accepts");
x.t("contains","addressline1");
x.t("querycompany.select","company");
}
