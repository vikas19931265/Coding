function FileData_Pairs(x)
{
x.t("example","boolean");
x.t("example","code");
x.t("example","submit");
x.t("example","following");
x.t("included","result");
x.t("statements","inside");
x.t("(person)","query.compare");
x.t("columns","rows");
x.t("columns","information");
x.t("method","meet");
x.t("method","preceding");
x.t("provide","programmatic");
x.t("building","simple");
x.t("fetch","information");
x.t("fetch","data");
x.t("fetch","matching");
x.t("relational","databases");
x.t("relational","database");
x.t("meet","restrictions");
x.t("query.compare","city");
x.t("implement","java.lang.iterable");
x.t("functional","performance");
x.t("table","example");
x.t("table","columns");
x.t("table","comparison");
x.t("table","sql");
x.t("table","without");
x.t("result.orderby","row");
x.t("row.postalcode","//");
x.t("instance","result");
x.t("regular","gosu");
x.t("execute","query");
x.t("creates","query");
x.t("uses","iterator");
x.t("uses","gw.api.database.query");
x.t("query.select","result.orderby");
x.t("query.select","result");
x.t("query.select","var");
x.t("line","alternatively");
x.t("text_val.select","link");
x.t("statement","relational");
x.t("statement","response");
x.t("statement","specifies");
x.t("statement","sorts");
x.t("interface","access");
x.t("sample","code");
x.t("type","specified");
x.t("response","relational");
x.t("response","claimcenter");
x.t("response","interator");
x.t("response","preceding");
x.t("satisfy","included");
x.t("sort","result");
x.t("java.lang.iterable","interface");
x.t("binds","constant");
x.t("inside","block");
x.t("apis","building");
x.t("apis","var");
x.t("apis","embed");
x.t("property","city");
x.t("link","directly");
x.t("single","database");
x.t("access","results");
x.t("access","result");
x.t("access","entity");
x.t("want","select");
x.t("want","restrict");
x.t("want","result");
x.t("objects","returned");
x.t("loop","fetch");
x.t("loop","passes");
x.t("loop","iterating");
x.t("loop","application");
x.t("loop","print");
x.t("differences","iterating");
x.t("passes","addresses");
x.t("block","block");
x.t("block","prints");
x.t("consequential","functional");
x.t("messsage","gosu");
x.t("lets","specify");
x.t("simple","queries");
x.t("simple","query");
x.t("guide","query");
x.t("iterator","response");
x.t("iterator","access");
x.t("iterator","loop");
x.t("iterator","iterator.hasnext");
x.t("iterator","result");
x.t("iterator","//");
x.t("iterator","result.iterator");
x.t("results","relational");
x.t("results","uses");
x.t("results","loop");
x.t("results","iterator");
x.t("results","simple");
x.t("applies","predicate");
x.t("(address)","query.compare");
x.t("(address)","query");
x.t("(address)","var");
x.t("directly","page");
x.t("specified","method");
x.t("specified","uses");
x.t("specified","select");
x.t("text_val.focus","text_val.select");
x.t("no","consequential");
x.t("gosu","sample");
x.t("gosu","syntax");
x.t("gosu","collection");
x.t("gosu","reference");
x.t("gosu","application");
x.t("addresses","table");
x.t("addresses","response");
x.t("addresses","select");
x.t("addresses","result");
x.t("addresses","city");
x.t("restricting","results");
x.t("query.make","(person)");
x.t("query.make","(address)");
x.t("codes","addresses");
x.t("performance","differences");
x.t("comparison","preceding");
x.t("comparison","sql");
x.t("iterating","results");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("further","restrictions");
x.t("constructs","executes");
x.t("boolean","expressions");
x.t("boolean","expression");
x.t("alternatively","following");
x.t("address","iterator.next");
x.t("address","instances");
x.t("address","separate");
x.t("address","result");
x.t("address","entity");
x.t("claimcenter","application");
x.t("sets","returned");
x.t("sets","rows");
x.t("orderby","row");
x.t("interator","method");
x.t("prints","address");
x.t("preceding","sample");
x.t("preceding","gosu");
x.t("preceding","sql");
x.t("random","order");
x.t("queries","building");
x.t("queries","fetch");
x.t("queries","function");
x.t("queries","return");
x.t("queries","consider");
x.t("queries","application");
x.t("queries","submit");
x.t("queries","naturally");
x.t("queries","sql");
x.t("error","occurred");
x.t("equivalent","query");
x.t("chicago","response");
x.t("chicago","preceding");
x.t("chicago","ordering");
x.t("chicago","sorts");
x.t("chicago","city");
x.t("chicago","column");
x.t("chicago","order");
x.t("chicago","//");
x.t("chicago","compare");
x.t("chicago","var");
x.t("syntax","result");
x.t("select","statement");
x.t("select","addresses");
x.t("select","var");
x.t("functionally","equivalent");
x.t("collection","contains");
x.t("databases","provide");
x.t("databases","implement");
x.t("databases","return");
x.t("databases","embed");
x.t("guidewire_selectall","var");
x.t("gw.api.database.query","//");
x.t("gw.api.database.query","var");
x.t("function","guidewire_selectall");
x.t("address.postalcode","preceding");
x.t("address.postalcode","note");
x.t("specifies","table");
x.t("expressions","data");
x.t("instead","selecting");
x.t("row","row.postalcode");
x.t("row","comparison");
x.t("row","row");
x.t("row","postalcode");
x.t("accessing","results");
x.t("programmatically","regular");
x.t("programmatically","result");
x.t("begins","loop");
x.t("asserts","addresses");
x.t("seemingly","random");
x.t("bind","application");
x.t("returned","relational");
x.t("returned","claimcenter");
x.t("returned","var");
x.t("address.city","address.postalcode");
x.t("added","response");
x.t("ordering","results");
x.t("programmatic","cursor");
x.t("cursor","access");
x.t("reference","guide");
x.t("rows","columns");
x.t("rows","addresses");
x.t("rows","seemingly");
x.t("rows","contains");
x.t("code","relational");
x.t("code","creates");
x.t("code","uses");
x.t("code","constructs");
x.t("code","begins");
x.t("code","bind");
x.t("code","sorts");
x.t("code","application");
x.t("code","var");
x.t("code","one-by-one");
x.t("iterator.hasnext","var");
x.t("iterator.next","print");
x.t("return","iterator");
x.t("return","database");
x.t("return","information");
x.t("return","result");
x.t("restrict","information");
x.t("database","table");
x.t("database","select");
x.t("database","instead");
x.t("database","sorts");
x.t("database","query");
x.t("database","result");
x.t("database","city");
x.t("database","work");
x.t("database","returns");
x.t("database","fetches");
x.t("database","contains");
x.t("occurred","messsage");
x.t("consider","simple");
x.t("address.addressline1","address.city");
x.t("instances","type");
x.t("instances","fetched");
x.t("instances","result");
x.t("instances","application");
x.t("instances","city");
x.t("instances","order");
x.t("predicate","property");
x.t("predicate","chicago");
x.t("postal_code","comparison");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("selecting","information");
x.t("constant","chicago");
x.t("builder","apis");
x.t("fetched","information");
x.t("fetched","data");
x.t("fetched","result");
x.t("fetched","entity");
x.t("import","query");
x.t("sorts","instances");
x.t("sorts","fetched");
x.t("sorts","result");
x.t("sorts","postal");
x.t("expression","applies");
x.t("expression","asserts");
x.t("page","error");
x.t("separate","line");
x.t("query","relational");
x.t("query","uses");
x.t("query","binds");
x.t("query","access");
x.t("query","(address)");
x.t("query","query.make");
x.t("query","address");
x.t("query","queries");
x.t("query","select");
x.t("query","return");
x.t("query","builder");
x.t("query","query");
x.t("query","compare");
x.t("query","generally");
x.t("information","table");
x.t("information","single");
x.t("information","specified");
x.t("information","queries");
x.t("information","database");
x.t("information","result");
x.t("data","satisfy");
x.t("data","loop");
x.t("data","queries");
x.t("data","following");
x.t("data","sql");
x.t("postalcode","//");
x.t("result","example");
x.t("result","statements");
x.t("result","columns");
x.t("result","query.select");
x.t("result","objects");
x.t("result","iterator");
x.t("result","addresses");
x.t("result","sets");
x.t("result","orderby");
x.t("result","chicago");
x.t("result","accessing");
x.t("result","row");
x.t("result","returned");
x.t("result","database");
x.t("result","query");
x.t("result","print");
x.t("result","postal");
x.t("result","contains");
x.t("result","object");
x.t("equals","chicago");
x.t("submit","programmatically");
x.t("submit","following");
x.t("application","databases");
x.t("application","code");
x.t("application","database");
x.t("application","data");
x.t("city","comparison");
x.t("city","chicago");
x.t("city","expression");
x.t("city","equals");
x.t("city","restricts");
x.t("print","iterator");
x.t("print","address");
x.t("print","address.addressline1");
x.t("executes","functionally");
x.t("column","city");
x.t("note","no");
x.t("work","results");
x.t("order","specified");
x.t("order","postal_code");
x.t("order","clause");
x.t("order","sql");
x.t("naturally","gosu");
x.t("following","gosu");
x.t("following","sql");
x.t("entity","instance");
x.t("entity","instances");
x.t("clause","lets");
x.t("//","fetch");
x.t("//","execute");
x.t("//","import");
x.t("//","specify");
x.t("returns","rows");
x.t("returns","result");
x.t("compare","predicate");
x.t("compare","city");
x.t("postal","codes");
x.t("postal","code");
x.t("restricts","results");
x.t("sql","example");
x.t("sql","statement");
x.t("sql","queries");
x.t("sql","select");
x.t("sql","return");
x.t("sql","query");
x.t("sql","order");
x.t("sql","clause");
x.t("without","further");
x.t("var","iterator");
x.t("var","text_val=eval");
x.t("var","address");
x.t("var","query");
x.t("var","result");
x.t("restrictions","added");
x.t("restrictions","database");
x.t("embed","queries");
x.t("embed","sql");
x.t("one-by-one","loop");
x.t("fetches","address");
x.t("contains","fetched");
x.t("contains","information");
x.t("contains","entity");
x.t("contains","sql");
x.t("object","uses");
x.t("object","gosu");
x.t("object","restricting");
x.t("object","contains");
x.t("generally","want");
x.t("specify","sort");
x.t("specify","want");
x.t("specify","boolean");
x.t("specify","database");
x.t("result.iterator","response");
x.t("result.iterator","//");
x.t("matching","address");
}
