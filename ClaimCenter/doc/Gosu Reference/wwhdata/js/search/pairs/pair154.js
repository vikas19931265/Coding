function FileData_Pairs(x)
{
x.t("example","suppose");
x.t("root","class");
x.t("properties","really");
x.t("properties","directly");
x.t("properties","name");
x.t("properties","documentation");
x.t("properties","dollar");
x.t("properties","defined");
x.t("properties","xsd");
x.t("notes","convention");
x.t("defines","element\u2019s");
x.t("rather","xsd");
x.t("$attributes","$class");
x.t("ambiguous","no");
x.t("create","xmlelement");
x.t("instance","rather");
x.t("instance","instance");
x.t("instance","type");
x.t("instance","property");
x.t("instance","element");
x.t("instance","backs");
x.t("apply","methods");
x.t("apply","non-xsd-based");
x.t("backing","type");
x.t("uses","default");
x.t("text_val.select","link");
x.t("introduction","xml");
x.t("type","example");
x.t("type","instance");
x.t("type","type");
x.t("type","prefix");
x.t("type","access");
x.t("type","anytype");
x.t("type","untyped");
x.t("however","xsd");
x.t("property","name");
x.t("property","names");
x.t("listed","dollar");
x.t("$namespace","$namespacecontext");
x.t("default","type");
x.t("really","part");
x.t("prefix","properties");
x.t("prefix","$attributes");
x.t("prefix","property");
x.t("prefix","element");
x.t("prefix","no");
x.t("link","directly");
x.t("element","listed");
x.t("element","directly");
x.t("element","gosu");
x.t("element","syntax");
x.t("element","simply");
x.t("element","named");
x.t("element","xsd-based");
x.t("element","even");
x.t("access","properties");
x.t("access","directly");
x.t("access","custom");
x.t("access","nillness");
x.t("access","children");
x.t("ambiguity","properties");
x.t("ambiguity","gosu");
x.t("ambiguity","requiring");
x.t("messsage","gosu");
x.t("guide","gosu");
x.t("due","ambiguity");
x.t("applies","properties");
x.t("simple","content");
x.t("directly","no");
x.t("directly","xml");
x.t("directly","element.children");
x.t("directly","page");
x.t("directly","subclass");
x.t("backs","type");
x.t("text_val.focus","text_val.select");
x.t("name","due");
x.t("name","gosu");
x.t("name","dollar");
x.t("no","ambiguity");
x.t("no","overlap");
x.t("no","dollar");
x.t("no","problem");
x.t("no","xsd");
x.t("overlap","namespace");
x.t("gosu","no");
x.t("gosu","provides");
x.t("gosu","xml");
x.t("gosu","reference");
x.t("gosu","disambiguate");
x.t("gosu","dollar");
x.t("gosu","prevents");
x.t("custom","child");
x.t("$comment","$qname");
x.t("xsd-defined","simple");
x.t("xsd-defined","nillable");
x.t("part","type");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("provides","access");
x.t("methods","apply");
x.t("sign","property");
x.t("sign","prefix");
x.t("sign","convention");
x.t("omit","dollar");
x.t("namespace","affects");
x.t("$children","$namespace");
x.t("$namespacecontext","$comment");
x.t("non-xsd-based","xml");
x.t("manipulate","untyped");
x.t("element.$children","access");
x.t("error","occurred");
x.t("suppose","root");
x.t("suppose","xsd");
x.t("syntax","element.$children");
x.t("syntax","element.children");
x.t("nillable","elements");
x.t("affects","following");
x.t("guidewire_selectall","var");
x.t("control","xsd");
x.t("$value","elements");
x.t("function","guidewire_selectall");
x.t("anytype","cases");
x.t("may","control");
x.t("types","properties");
x.t("types","apply");
x.t("types","no");
x.t("types","function");
x.t("types","dollar");
x.t("xml","introduction");
x.t("xml","element");
x.t("xml","nodes");
x.t("xml","elements");
x.t("mentions","gosu");
x.t("format","using");
x.t("simply","access");
x.t("node","uses");
x.t("reference","guide");
x.t("disambiguate","notes");
x.t("element.children","however");
x.t("element.children","non-recommended");
x.t("appear","xml");
x.t("documentation","mentions");
x.t("actual","implementation");
x.t("$qname","$text");
x.t("occurred","messsage");
x.t("$nil","xsd-defined");
x.t("named","children");
x.t("similar","properties");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("implementation","internally");
x.t("element\u2019s","child");
x.t("$class","$children");
x.t("convention","applies");
x.t("convention","convention");
x.t("convention","prevents");
x.t("xmlelement","element");
x.t("xmlelement","directly");
x.t("page","error");
x.t("nodes","case");
x.t("$text","$typeinstance");
x.t("dollar","sign");
x.t("internally","backing");
x.t("graph","xml");
x.t("defined","xsd");
x.t("defined","xsd-based");
x.t("non-recommended","name");
x.t("$typeinstance","$simplevalue");
x.t("case","omit");
x.t("nillness","element");
x.t("children","defined");
x.t("children","xsd-based");
x.t("children","unfortunately");
x.t("problem","may");
x.t("two","similar");
x.t("requiring","special");
x.t("note","create");
x.t("prevents","ambiguity");
x.t("cases","no");
x.t("subclass","object");
x.t("special","properties");
x.t("elements","example");
x.t("elements","xsd-defined");
x.t("elements","note");
x.t("untyped","node");
x.t("untyped","graph");
x.t("following","type");
x.t("using","gosu");
x.t("class","xmlelement");
x.t("xsd","defines");
x.t("xsd","type");
x.t("xsd","manipulate");
x.t("xsd","syntax");
x.t("xsd","types");
x.t("xsd","format");
x.t("xsd-based","element");
x.t("xsd-based","access");
x.t("xsd-based","types");
x.t("$simplevalue","$value");
x.t("child","element");
x.t("unfortunately","two");
x.t("names","ambiguous");
x.t("names","appear");
x.t("var","text_val=eval");
x.t("even","actual");
x.t("content","$nil");
x.t("object","xsd");
}
