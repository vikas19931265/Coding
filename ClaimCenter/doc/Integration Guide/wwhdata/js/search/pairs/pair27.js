function FileData_Pairs(x)
{
x.t("example","method");
x.t("example","required");
x.t("example","uses");
x.t("example","harder");
x.t("example","demonstrates");
x.t("example","wsdl");
x.t("example","overriding");
x.t("example","implements");
x.t("example","invocation");
x.t("example","invoke");
x.t("differently","typical");
x.t("enabling","profiling");
x.t("method-specific","annotations");
x.t("satisfied","web");
x.t("publishing","web");
x.t("method","parameter");
x.t("method","arguments");
x.t("method","calls");
x.t("method","checks");
x.t("method","property");
x.t("method","signature");
x.t("method","want");
x.t("method","info");
x.t("method","unsupported");
x.t("method","name");
x.t("method","gosu");
x.t("method","handles");
x.t("method","argument");
x.t("method","determine");
x.t("method","standard");
x.t("method","_map.get");
x.t("method","calling");
x.t("method","reference");
x.t("method","level");
x.t("method","actual");
x.t("method","invocation");
x.t("method","several");
x.t("method","context");
x.t("method","information");
x.t("method","call");
x.t("method","signatures");
x.t("method","following");
x.t("method","//");
x.t("method","using");
x.t("method","returns");
x.t("method","passing");
x.t("parameter","type");
x.t("parameter","operation");
x.t("parameter","invoke");
x.t("properties","element");
x.t("properties","servlet");
x.t("properties","types");
x.t("available","gosu");
x.t("available","configured");
x.t("else","throw");
x.t("creation","initialization");
x.t("methodinfo","yourclassname");
x.t("right","subtype");
x.t("gw.xml.ws.annotation.wsiwebservice","uses");
x.t("rather","specifying");
x.t("implement","preexisting");
x.t("implement","weather");
x.t("implement","invocation");
x.t("implement","service");
x.t("annotation","@wsiinvocationhandler");
x.t("annotation","need");
x.t("annotation","permissions");
x.t("annotation","@wsiparseoptions");
x.t("annotation","supersedes");
x.t("annotation","run");
x.t("annotation","pass");
x.t("annotation","overrides");
x.t("every","operation");
x.t("within","outer");
x.t("within","invocation");
x.t("caller","result");
x.t("intended","prevent");
x.t("integration","guide");
x.t("tree","path");
x.t("create","right");
x.t("create","separate");
x.t("wsiimplementexistingwsdltestservice.handler","@wsiparseoptions");
x.t("wsiimplementexistingwsdltestservice.handler","class");
x.t("static","methods");
x.t("static","function");
x.t("static","class");
x.t("bypassing","important");
x.t("required","implement");
x.t("required","preexecute");
x.t("required","level");
x.t("instance","getcityforecastbyzipresponse");
x.t("instance","class");
x.t("various","methods");
x.t("source","code");
x.t("gw.xml.ws","uses");
x.t("key","operation");
x.t("once","within");
x.t("arguments","require");
x.t("arguments","return");
x.t("methoda","req");
x.t("methoda","(xmlelement)");
x.t("requestelement","method");
x.t("requestelement","typeis");
x.t("requestelement","first");
x.t("requestelement","xmlelement");
x.t("requestelement","values");
x.t("topic","introduction");
x.t("zip","{requestelement.zip}");
x.t("creates","instance");
x.t("user","preexecute");
x.t("user","permissions");
x.t("methodb","req");
x.t("methodb","(xmlelement)");
x.t("uses","gw.xml.ws.annotation.wsiwebservice");
x.t("uses","type");
x.t("uses","gw.xml.ws.annotation.wsipermissions");
x.t("uses","gosu");
x.t("uses","java.lang.illegalargumentexception");
x.t("uses","gw.xml.xmlelement");
x.t("uses","gw.xml.ws.annotation.wsiavailability");
x.t("uses","gw.xml.ws.annotation.wsiparseoptions");
x.t("uses","gw.xml.ws.annotation.wsiinvocationhandler");
x.t("uses","gw.xml.xmlparseoptions");
x.t("uses","class");
x.t("claimcenter/configuration/gsrc/ws/weather.wsdl","schema");
x.t("line","uses");
x.t("line","declares");
x.t("text_val.select","link");
x.t("necessary","example");
x.t("necessary","argument");
x.t("errors","return");
x.t("support","things");
x.t("type","every");
x.t("type","requestelement");
x.t("type","type");
x.t("type","return");
x.t("type","wsiinvocationcontext");
x.t("type","xmlelement");
x.t("type","inference");
x.t("type","gw.xml.ws.annotation.wsiinvocationhandler");
x.t("type","system");
x.t("type","//");
x.t("introduction","xml");
x.t("best","re-enable");
x.t("preexecute","method");
x.t("preexecute","throws");
x.t("preexecute","enable");
x.t("preexecute","confirms");
x.t("time","example");
x.t(":additionalschemas","ws.weather.util.schemaaccess");
x.t("explicitly",":getcityforecastbyzipresult");
x.t("calls","application");
x.t("external","transaction");
x.t("mymethod","req");
x.t("mymethod","(xmlelement)");
x.t("non-null","preexecute");
x.t("however","necessary");
x.t("however","support");
x.t("inside","web");
x.t("xmlparseoptions",":additionalschemas");
x.t("defaultwsiinvocationhandler","//");
x.t("defaultwsiinvocationhandler","var");
x.t("locale","checks");
x.t("locale","found");
x.t("automatically","determines");
x.t("checks","requested");
x.t("checks","soap");
x.t("default","bypassing");
x.t("default","permissions");
x.t("property","var");
x.t("require","checking");
x.t("link","directly");
x.t("speaking","using");
x.t("signature","static");
x.t("signature","override");
x.t("signature","invoke");
x.t("element","requestelement");
x.t("element","gosu");
x.t("element","next");
x.t("element","types");
x.t("element","appropriate");
x.t("element","var");
x.t("objects","package");
x.t("new","wsiimplementexistingwsdltestservice.handler");
x.t("new","xmlparseoptions");
x.t("new",":success");
x.t("new","illegalargumentexception");
x.t("new","ws.weather.elements.getcityforecastbyzipresponse");
x.t("want","check");
x.t("want","call");
x.t("access","meta");
x.t("@wsiinvocationhandler","annotation");
x.t("@wsiinvocationhandler","new");
x.t("@wsiinvocationhandler","argument");
x.t("gw.xml.ws.annotation.wsipermissions","uses");
x.t(":city","demo");
x.t("re-enable","bypassed");
x.t("messsage","claimcenter");
x.t("determines","generates");
x.t("need","write");
x.t("file","gosu");
x.t("file","resource");
x.t("appropriately","corresponds");
x.t("{requestelement.zip}","return");
x.t("initialization","syntax");
x.t("info","argument");
x.t("info","meta");
x.t("info","metadata");
x.t("info","return");
x.t("info","var");
x.t("found","sets");
x.t("short","name");
x.t("list","permissions");
x.t("(ws-i)","invocation");
x.t("organization","ensure");
x.t("add","annotation");
x.t("add","list");
x.t("add","preexisting");
x.t("qualities","invocation");
x.t("id","intended");
x.t("id","preexecute");
x.t("id","id");
x.t("guide","validate");
x.t("guide","web");
x.t("guide","following");
x.t("guide","xsd-based");
x.t("harder","read");
x.t("harder","catch");
x.t("normally","various");
x.t("normally","corresponding");
x.t("validate","requests");
x.t("check","method-specific");
x.t("check","duplicate");
x.t("check","operation");
x.t("check","web");
x.t("check","additional");
x.t("check","run");
x.t("requested","operation");
x.t("simple","example");
x.t("api","call");
x.t("parse","options");
x.t("sure","carefully");
x.t("ws.weather.elements.getcityforecastbyzip","var");
x.t("features","invocation");
x.t("features","application");
x.t("features","otherwise");
x.t("duplicate","external");
x.t("duplicate","requests");
x.t("soap","headers");
x.t("looking","headers");
x.t("throws","exception");
x.t("directly","method");
x.t("directly","page");
x.t("handle","operation");
x.t("handle","checking");
x.t("handle","additional");
x.t("true",":city");
x.t("desired","method");
x.t("desired","operation");
x.t("specified","locale");
x.t("processed","successfully");
x.t("potential","approach");
x.t("text_val.focus","text_val.select");
x.t("operation","method");
x.t("operation","requestelement");
x.t("operation","introduction");
x.t("operation","normally");
x.t("operation","handle");
x.t("operation","desired");
x.t("operation","name");
x.t("operation","operation");
x.t("operation","corresponds");
x.t("operation","wsdl");
x.t("operation","getcityforecastbyzip");
x.t("operation","perform");
x.t("definition","method");
x.t("definition","perhaps");
x.t("definition","service");
x.t("standardized","wsdl");
x.t("path","source");
x.t("path","claimcenter/configuration/gsrc/ws/weather.wsdl");
x.t("name","method");
x.t("name","zip");
x.t("name","operation");
x.t("name","getcityforecastbyzip");
x.t("name","web");
x.t("name","map");
x.t("name","request");
x.t("name","documented");
x.t("demonstrates","approach");
x.t("wsdl","necessary");
x.t("wsdl","however");
x.t("wsdl","@wsiinvocationhandler");
x.t("wsdl","file");
x.t("wsdl","organization");
x.t("wsdl","operation");
x.t("wsdl","definition");
x.t("wsdl","getcityforecastbyzip");
x.t("wsdl","web");
x.t("wsdl","finally");
x.t("wsdl","function");
x.t("wsdl","implements");
x.t("wsdl","define");
x.t("wsdl","schema");
x.t("wsdl","invocation");
x.t("wsdl","implementation");
x.t("wsdl","called");
x.t("wsdl","service");
x.t("wsdl","following");
x.t("wsdl","generally");
x.t("gosu","uses");
x.t("gosu","type");
x.t("gosu","automatically");
x.t("gosu","gosu");
x.t("gosu","syntax");
x.t("gosu","ws-i");
x.t("gosu","reference");
x.t("gosu","call");
x.t("gosu","class");
x.t("gosu","using");
x.t("gosu","object");
x.t("corresponds","directly");
x.t("corresponds","return");
x.t("handler","instance");
x.t("handler","handles");
x.t("handler","inner");
x.t("handler","determine");
x.t("handler","preexisting");
x.t("handler","web");
x.t("handler","ws-i");
x.t("handler","profiling");
x.t("handler","invocation");
x.t("handler","extends");
x.t("handler","typical");
x.t("handler","assuming");
x.t("handler","context.preexecute");
x.t("handler","following");
x.t("handler","class");
x.t("handler","invoke");
x.t("getcityforecastbyzip","requested");
x.t("getcityforecastbyzip","handle");
x.t("getcityforecastbyzip","code");
x.t("getcityforecastbyzip","implementation");
x.t("enables","profiling");
x.t("exactly","once");
x.t("argument","annotation");
x.t("argument","non-null");
x.t("argument","types");
x.t("argument","return");
x.t("argument","pass");
x.t("argument","invoke");
x.t("handles","operation");
x.t("handles","operations");
x.t("perform","whatever");
x.t("base","class");
x.t("declares","inner");
x.t("part","short");
x.t("text_val=eval","document.linktothisurlform.urlfield");
x.t("inner","class");
x.t("methods","web");
x.t("methods","typical");
x.t("methods","work");
x.t("methods","//");
x.t("checking","method-specific");
x.t("checking","type");
x.t("checking","duplicate");
x.t("checking","class");
x.t("wsiimplementexistingwsdltestservice","methoda");
x.t("wsiimplementexistingwsdltestservice","methodb");
x.t("wsiimplementexistingwsdltestservice","//");
x.t("determine","method");
x.t("determine","operation");
x.t("determine","export");
x.t("standard","wsdl");
x.t("standard","ws-i");
x.t("makes","code");
x.t("makes","sense");
x.t("mistakes","harder");
x.t("unrecognized","element");
x.t("up","map");
x.t("(opname.localpart)","//");
x.t("overriding","default");
x.t("preexisting","wsdl");
x.t("preexisting","service");
x.t("web","services");
x.t("web","service");
x.t("typeis","ws.weather.elements.getcityforecastbyzip");
x.t("map","key");
x.t("map","store");
x.t("map","value");
x.t("claimcenter","integration");
x.t("ten","different");
x.t("write","web");
x.t("write","invocation");
x.t("entire","wsdl");
x.t("returnresult","new");
x.t("returnresult","//");
x.t("meta","data");
x.t("sets","specified");
x.t("local","part");
x.t("resource","path");
x.t("permissions","satisfied");
x.t("permissions","method");
x.t("permissions","static");
x.t("permissions","potential");
x.t("permissions","@wsipermissions");
x.t("permissions","transaction");
x.t("permissions","service");
x.t("permissions","even");
x.t("earlier","reference");
x.t("defining","invocation");
x.t("http://guidewire.com/px/ws/gw/xml/ws/wsiimplementexistingwsdltestservice","@wsipermissions");
x.t("request","element");
x.t("request","headers");
x.t("request","context");
x.t("servlet","request");
x.t("present","however");
x.t("metadata","required");
x.t("metadata","arguments");
x.t("metadata","argument");
x.t("store","method");
x.t("_map","myoperationname1");
x.t("error","occurred");
x.t("error","prone");
x.t("whatever","logic");
x.t("whatever","return");
x.t("logic","makes");
x.t("configured","checks");
x.t("supported","wsiinvocationcontext");
x.t("finally","wsdl");
x.t("finally","code");
x.t("syntax","properties");
x.t("syntax","ws.weather.util.schemaaccess");
x.t("outer","class");
x.t("next","example");
x.t("next","line");
x.t("_map.get","(opname.localpart)");
x.t("{requestelement}","xmlelement");
x.t("ws-i","parse");
x.t("ws-i","features");
x.t("ws-i","operation");
x.t("ws-i","web");
x.t("ws-i","implementation");
x.t("first","web");
x.t("first","invoke");
x.t("options","example");
x.t("options","annotation");
x.t("schemas","parse");
x.t("weather","wsdl");
x.t("throw","new");
x.t("headers","locale");
x.t("headers","looking");
x.t("headers","ws-i");
x.t("headers","unique");
x.t("feature","method");
x.t("opname","requestelement.qname");
x.t("handlers","implementing");
x.t("guidewire_selectall","var");
x.t("demo","city");
x.t("getcityforecastbyzipresponse","xml");
x.t("function","methoda");
x.t("function","methodb");
x.t("function","mymethod");
x.t("function","guidewire_selectall");
x.t("function","invoke");
x.t("implements","web");
x.t("implements","operations");
x.t("approach","method");
x.t("approach","implement");
x.t("approach","@wsiinvocationhandler");
x.t("approach","makes");
x.t("approach","up");
x.t("profiling","method");
x.t("profiling","available");
x.t("profiling","run");
x.t("annotations","run");
x.t("different","systems");
x.t("conforms","preexisting");
x.t("conforms","externally-defined");
x.t("define","methods");
x.t("define","web");
x.t("carefully","create");
x.t(":getcityforecastbyzipresult","new");
x.t("unique","transaction");
x.t("externally-defined","standard");
x.t("instead","invocation");
x.t("requests","transaction");
x.t("requests","using");
x.t("implementing","preexisting");
x.t("types","available");
x.t("types","gosu");
x.t("types","return");
x.t("types","created");
x.t("types","using");
x.t("types","sent");
x.t("compile","time");
x.t("xml","element");
x.t("xml","elements");
x.t("xml","object");
x.t("things","enables");
x.t("things","web");
x.t("important","ws-i");
x.t("calling","desired");
x.t("calling","exactly");
x.t("code","tree");
x.t("code","creates");
x.t("code","harder");
x.t("code","error");
x.t("code","returns");
x.t("reference","method");
x.t("reference","guide");
x.t("reference","wsiinvocationcontext");
x.t("@wsipermissions","annotation");
x.t("@wsipermissions","add");
x.t("@wsipermissions","@wsiavailability");
x.t("wsi","request");
x.t("enable","ws-i");
x.t("return","type");
x.t("return","returnresult");
x.t("return","types");
x.t("return","method.callhandler.handlecall");
x.t("return","null");
x.t("return","value");
x.t("return","result");
x.t("return","values");
x.t("return","object");
x.t("override","function");
x.t("instantiate","xml");
x.t("ids","method");
x.t("ids","write");
x.t("ids","present");
x.t("level","annotation");
x.t("level","required");
x.t("level","preexecute");
x.t("level","permissions");
x.t("level","@wsipermissions");
x.t("level","@wsiavailability");
x.t("level","application");
x.t("level","service");
x.t("disabled","invocation");
x.t("successfully","add");
x.t("successfully","bundle");
x.t("schema","file");
x.t("schema","described");
x.t("(none)","@wsiinvocationhandler");
x.t("ensure","types");
x.t("wsiinvocationcontext","xmlelement");
x.t("wsiinvocationcontext","object\u2019s");
x.t("wsiinvocationcontext","contains");
x.t("wsiinvocationcontext","object");
x.t("actual","dispatch");
x.t("@wsiavailability","annotation");
x.t("@wsiavailability","(none)");
x.t("bundle","committed");
x.t("occurred","messsage");
x.t("null","static");
x.t("null","preexecute");
x.t("null","supported");
x.t("null","{requestelement}");
x.t("method.callhandler.handlecall","null");
x.t("dispatch","work");
x.t("java.lang.illegalargumentexception","@wsiwebservice");
x.t("req","xmlelement");
x.t("additional","requestelement");
x.t("additional","schemas");
x.t("additional","context");
x.t("additional","operations");
x.t("value","method");
x.t("value","xmlelement");
x.t("invocation","handler");
x.t("invocation","handlers");
x.t("invocation","context");
x.t("invocation","handler's");
x.t("document.linktothisurlform.urlfield","text_val.focus");
x.t("implementation","gosu");
x.t("implementation","instead");
x.t("implementation","override");
x.t("implementation","classes");
x.t("implementation","class");
x.t("@wsiparseoptions","new");
x.t("@wsiparseoptions","pass");
x.t("gw.xml.xmlelement","uses");
x.t("several","things");
x.t("already","processed");
x.t("perhaps","ten");
x.t("extends","type");
x.t("extends","defaultwsiinvocationhandler");
x.t("xmlelement","appropriately");
x.t("xmlelement","base");
x.t("xmlelement","whatever");
x.t("xmlelement","invocation");
x.t("xmlelement","xmlelement");
x.t("xmlelement","context");
x.t("xmlelement","//");
x.t("xmlelement","invoke");
x.t("xmlelement","object");
x.t("generate","successfully");
x.t(":success","true");
x.t("exception","method");
x.t("exception","checking");
x.t("exception","call");
x.t("supersedes","class");
x.t("services","publishing");
x.t("services","(ws-i)");
x.t("systems","implement");
x.t("conform","standard");
x.t("read","code");
x.t("subtype","xmlelement");
x.t("page","error");
x.t("output","wsdl");
x.t("separate","static");
x.t("separate","wsdl");
x.t("separate","methods");
x.t("context","parameter");
x.t("context","wsi");
x.t("context","wsiinvocationcontext");
x.t("context","invocation");
x.t("specifying","explicitly");
x.t("typical","web");
x.t("typical","cases");
x.t("gw.xml.ws.annotation.wsiavailability","uses");
x.t("correct","type");
x.t("data","method");
x.t("data","feature");
x.t("yourclassname","mymethod");
x.t("information","map");
x.t("defined","gosu");
x.t("defined","separate");
x.t("received","conform");
x.t("appropriate","type");
x.t("appropriate","finally");
x.t("ws.weather.elements","method");
x.t("inference","instantiate");
x.t("result","api");
x.t("result","return");
x.t("assuming","want");
x.t("values","handle");
x.t("values","defined");
x.t("illegalargumentexception","unrecognized");
x.t("application","enabling");
x.t("application","check");
x.t("documented","earlier");
x.t("prevent","duplicate");
x.t("described","topic");
x.t("ws.weather.util.schemaaccess","element");
x.t("ws.weather.util.schemaaccess","class");
x.t("city","name");
x.t("called","getcityforecastbyzip");
x.t("confirms","user");
x.t("confirms","run");
x.t("context.preexecute","requestelement");
x.t("export","wsdl");
x.t("classes","method");
x.t("classes","first");
x.t("sense","web");
x.t("gw.xml.ws.annotation.wsiparseoptions","uses");
x.t("transaction","id");
x.t("transaction","ids");
x.t("transaction","already");
x.t("otherwise","disabled");
x.t("typically","ws-i");
x.t("gw.xml.ws.annotation.wsiinvocationhandler","implement");
x.t("gw.xml.ws.annotation.wsiinvocationhandler","uses");
x.t("work","web");
x.t("work","//");
x.t("gw.xml.xmlparseoptions","uses");
x.t("cases","best");
x.t("based","operation");
x.t("object\u2019s","preexecute");
x.t("call","method");
x.t("call","preexecute");
x.t("call","desired");
x.t("call","methods");
x.t("call","profiling");
x.t("call","additional");
x.t("call","based");
x.t("call","using");
x.t("created","wsdl");
x.t("package","gw.xml.ws");
x.t("package","ws.weather.elements");
x.t("service","differently");
x.t("service","user");
x.t("service","default");
x.t("service","definition");
x.t("service","operation");
x.t("service","gosu");
x.t("service","checking");
x.t("service","permissions");
x.t("service","approach");
x.t("service","conforms");
x.t("service","return");
x.t("service","implementation");
x.t("service","invocation");
x.t("service","generate");
x.t("service","defined");
x.t("service","using");
x.t("service","class");
x.t("service","adding");
x.t("service","operations");
x.t("service","even");
x.t("signatures","determine");
x.t("following","example");
x.t("following","line");
x.t("following","signature");
x.t("following","qualities");
x.t("system","objects");
x.t("elements","sure");
x.t("corresponding","method");
x.t("run","level");
x.t("run","levels");
x.t("class","within");
x.t("class","static");
x.t("class","create");
x.t("class","inside");
x.t("class","add");
x.t("class","definition");
x.t("class","handler");
x.t("class","wsiimplementexistingwsdltestservice");
x.t("class","implements");
x.t("class","define");
x.t("class","xml");
x.t("class","level");
x.t("class","invocation");
x.t("class","extends");
x.t("class","typically");
x.t("class","overrides");
x.t("class","invoke");
x.t("using","method");
x.t("using","standardized");
x.t("using","ws-i");
x.t("using","approach");
x.t("using","additional");
x.t("using","invocation");
x.t("using","symbol");
x.t("@wsiwebservice","http://guidewire.com/px/ws/gw/xml/ws/wsiimplementexistingwsdltestservice");
x.t("//","example");
x.t("//","rather");
x.t("//","implement");
x.t("//","check");
x.t("//","operation");
x.t("//","local");
x.t("//","defining");
x.t("//","next");
x.t("//","separate");
x.t("//","call");
x.t("//","following");
x.t("symbol","access");
x.t("committed","id");
x.t("adding","invocation");
x.t("catch","errors");
x.t("catch","compile");
x.t("pass","entire");
x.t("pass","null");
x.t("pass","invocation");
x.t("overrides","method");
x.t("overrides","invoke");
x.t("xsd-based","properties");
x.t("xsd-based","types");
x.t("returns","xml");
x.t("returns","object");
x.t("levels","permissions");
x.t("levels","even");
x.t("bypassed","ws-i");
x.t("requestelement.qname","//");
x.t("prone","mistakes");
x.t("invoke","method");
x.t("invoke","requestelement");
x.t("invoke","call");
x.t("operations","else");
x.t("operations","normally");
x.t("operations","simple");
x.t("operations","web");
x.t("operations","package");
x.t("handler's","invoke");
x.t("(xmlelement)",".methodinfo");
x.t("var","methodinfo");
x.t("var","method");
x.t("var","text_val=eval");
x.t("var","returnresult");
x.t("var","_map");
x.t("var","opname");
x.t("passing","requestelement");
x.t("myoperationname1","wsiimplementexistingwsdltestservice");
x.t("generates","output");
x.t("sent","received");
x.t("ws.weather.elements.getcityforecastbyzipresponse","//");
x.t("even","web");
x.t("even","using");
x.t("myoperationname2","wsiimplementexistingwsdltestservice");
x.t("generally","speaking");
x.t("object","example");
x.t("object","creation");
x.t("object","method");
x.t("object","caller");
x.t("object","type");
x.t("object","correct");
x.t("object","appropriate");
x.t("object","xsd-based");
x.t("contains","properties");
x.t(".methodinfo","calling");
x.t(".methodinfo","override");
x.t(".methodinfo","myoperationname2");
}
