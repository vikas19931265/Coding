package dSerializationExternalization;

/*

serialVersionUID
=========================

In Serialization both the sender and the receiver need not be same person , need not
to use same machine and need not be from the same location. The person may be different,
the machines may be different and location may be different as well.

In Serialization both sender and receiver should have dot class file  at the beginning
only. Just the state of object is travelling from sender to the receiver.

At the time of the serialization with the every object sender side JVM will save a unique
identifier. JVM is responsible to generate this unique identifier based upon dot class file.

At the time of the deserilization receiver side JVM will compare unique identifier associated
with the object with local class unique identifier. If both are matched then only deserialization
will be performed otherwise we will get the run time exception saying InvalidClassException.
This unique identifier is nothing but serialVersionUID.


Problems of depending upon default serial version UID generated by the JVM
===========================================================================


1. Both the sender and receiver should use same JVM with respect to the vendor and
   the platform and version otherwise receiver will be unable to deserialize because of
   different serial version UIDs.
   
2.Both the sender and receiver should use same dot class file version. After the
  serialization if there is any change in the dot class file at the receiver side
  then receiver is unable to deserialize
  
3. To generate serial version uid , internally jvm may use complex algorithm, which may
   create performance problems.
   
   
 We can solve the above problems by configuring our our serial verion uid.We can 
 configureown own serialVersionUID as follows.
 
 
        private static final long serialVersionUID=1l;
   
*/

import java.io.*;

class Dog1 implements Serializable
{
    private static final long serialVersionUID=1l;
    int i =10;
    int j =20;
}


class Sender
{
    public static void main(String[] args)  throws Exception
    {
        Dog1 d1= new Dog1();
        FileOutputStream fos = new FileOutputStream("abc.ser");
        ObjectOutputStream oos = new ObjectOutputStream(fos);
        oos.writeObject(d1);
        
    }
}


 class Recevier
{
    public static void main(String[] args) throws Exception
    {
        FileInputStream fis = new FileInputStream("abc.ser");
        ObjectInputStream ois = new ObjectInputStream(fis);
        Dog1 d2=(Dog1)ois.readObject();
        System.out.println(d2.i+"...."+d2.j);
    }
}


/*
In this program after serialization , if we perform any change to the dot 
class file at the receiver file. We wont get any problem at the time of deserilaization. 

In this case sender and receiver are not required to maintain same JVM versions


note

  Some IDE prompt the programmer to enter serialVersionUID explicitly.
  
  Some very intelligent IDE may generate serialVersionUID automatically.

*/








