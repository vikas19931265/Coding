
package cSerializationWithInheritence;

/*

Case 2: ( if parent is non serializable but child is serializable)
---------------------------------------------------------------

Even though parent class does not implement serialization we can serialize child class
object if child class implements serializable interface that is to serialize child class
object parent class need not be serializable



At the time of serialization jvm will check if there is any variable inheriting from
non serializable parent or not. If any variable inheriting from non serializable parent
then jvm ignores orignial value and  saves default value to the file



At the time of deserialization jvm will check if there is any parent class non serializable or not.
If any parent class is non serilizable then JVM will execute instance control flow in every 
non serializable parent and share its instance variables to the current object.


While executing instance control flow of non serializable parent.JVM will always call the
no-args constructor. Hence every non serializable class should compulsary contain the 
no-agrs constructor. It may be default constrcutor compiler generated by compiler or 
customized constructor explicity provided by the programmer.

Otherwise we will get run time exception saying: invalid class exception


*/

import java.io.*;

class Animals 
{
    int i =10;
    
    Animals() //mandatary to have no-args constructor or else will get invalid class exception
    {
        System.out.println("Animal Constructor called");
    }
}

class Dogs extends Animals implements Serializable
{
    int j =20;
    
    Dogs(){
        
        System.out.println("Dog constructor called");
        
    }

}

 class SerializeDemo6
{
    public static void main(String[] args) throws Exception

    {
       
       System.out.println("Checking");
       
        Dog d1= new Dog();
        
            /*
            
            Firstly we created a Dog object with the values int i=10 and int j=20.
            Here i value of 10 is coming from the parent class.
            
            Whenever we are executing Dog() constructor dog and animal class both of the
            constructors will get executed.
        
        
            o/p
            
                Animal Constructor called---> first parent constructor is called
                Dog Constructor called
        
        
            */
        
        d1.i=888; // We have changed the values of i and j
        d1.j=999;//now i value is 888 and j value is 999
        System.out.println(d1.i+"......"+d1.j);
        
            /*
            
                 Animal Constructor called---> first parent constructor is called
                 Dog Constructor called
                 888....999
            
            */
        
        
        //Serialization
            /*
            
            While trying to do serialization jvm is going to now check if there is any
            variable which is coming from non serializable parent class. If yes then
            the default value of that variable will be set in the file.
            
            Hence i value becomes 0 and j values is 999
            
            
            */
        FileOutputStream fos = new FileOutputStream("abc.ser");
        ObjectOutputStream oos= new ObjectOutputStream(fos);
        oos.writeObject(d1);
    
         /*
         //Deserialization
         
         Now when we are trying to deserialize , jvm will check if there is any parent 
         class non serializable or not. If yes then it will execute the instance control
         flow of that particular class and share its value to object.
         
         
         So now jvm executes instance control flow in the Animal class which sets the
         value of i variable to 10 and also calls the constructor of the animal class as well.
         
         
         Finally the value of 10 is given to the main deserialized object.
         
        o/p
        ----
        
        Animal Constructor called---> first parent constructor is called
        Dog Constructor called
        888....999
        Animal Constructor called
        10.....999
 
         
         
         */
       
       
       
       
       
        FileInputStream fis= new FileInputStream("abc.ser");
        ObjectInputStream ois = new ObjectInputStream(fis);
        Dog d2=(Dog)ois.readObject();
        System.out.println(d2.i+"....."+d2.j);
        
        
        
    }
    
}

/*
$javac SerializeDemo6.java
$java -Xmx128M -Xms16M SerializeDemo6
Checking
Animal Constructor called
Dog constructor called
888......999
Animal Constructor called
10.....999
*/