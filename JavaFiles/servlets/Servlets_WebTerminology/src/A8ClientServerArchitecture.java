/*

Client-Server Architecture
==================================

    It is a 2 tier architecture and it is minimum architecture for the enterprise applications.

In client server architecture there are three major parts
    
    1. Client
    2. Protocol
    3. Server



                                                                            1. CLIENT :
                                                                         =====================


a. The main purpose of the Client in client-server architecture is to send request to the server and to
   get the responses from server.

b. Tab in the browser is acting as the client.

c. To send request and to get response from server we need to use a tool at client machine called as
   Browser. In client-server application browser is acting as client.

d. To access a particular resource available at server from client browser we need to specify a
   particular string at browser address bar called URI.


There are two types of URI

  1. URL      2. URN


Q: What are the differences between URI, URL and URN?
==================================================================================


ANS: 

 a. URI is a string specification provided at client address bar, it can be used to refer a particular
    resource available at server machine.

 b. URL is a string specification provided at client address bar, it can be used to refer a particular resource
    available at server machine through its logical name or alias name or URL pattern.
    It defines a way to fetch a resource from the server machine.

 c. URN is a string specification, it can be used to refer a particular resource available at server machine
    through its logical name. It does not define a way to fetch resource from server machine. Example logical
    name used in servlets web.xml file for servlets is acting like URN which just specifies name of resource.

    NOTE 1: In case of servlets, locator is an URL pattern defined in web.xml file.

    NOTE 2: In case of servlets, logical name is a name specified along with <servlet-name> tag in
    web.xml file.

    Note 3: Almost all the servers are able to accept URL kind of request, but almost all the servers are not
    accept URN kind of request.

    If we want to provide URL at client address bar then we have to use the following syntax.

    Protocol_Name://Server_IP_Address:Server_Port_No/Application_Context/Resource_Name[
    Query_String]

    EX: http://121.120.92.98.8080/loginapp/logon?uname=abc&upwd=abc

    Here Query_String, i.e. uname=abc&upwd=abc is optional.


http--->Protocol name

    localhost: Server IP address, if server software is available at the same client machine 
    then we can specify localhost as the server IP address. Otherwise official IP address is
    available that is 127.0.0.1

8080---> 
    Server port Number , we can also call it as HTTP port number. For FTP the port number will vary.

For every server fixed port numbers are available

    8080  tomcat
    7001  Weblogic

Loginapp-->Web application name

Login--->Location for login servlet. This will be the physical/logical name mapped to the servlet.

?uname=abc&upw=abc123--->Query String


Q) What is the difference between IP Address and Port Number??
===================================================================

   For each and every process running into a system a unique id is generated by the OS manager 
   that is called as Port number. This is used for the purpose of the process identity.

   IP Address is an unique identification for each and every machine over Network, which will be
   provided by Network Manager at the time of Network Configuration.

   Port Number is an unique identification to each and every process being executed at the same machine
   and which could be provided by the local operating system.
    

Q: What is Query String and what is the purpose of Query String in web applications?
==============================================================================================

ANS: 
    Query String is a collection of name-value pair appended to the URL, which can be used to pass
    input parameters to the respective server side resource in order to perform the required server side
    action.


                                                                         2. PROTOCOL:
                                                                   ============================


a. The main job of the Protocol in client-server architecture is to carry the request data from client to
   server and to carry the response data from server to client.


b. Protocol is a set of rules and regulations, which can be used to carry the data from one machine to
  another machine over the Network.

EX: TCP/IP, FTP, HTTP, SMTP, ARP, RARP........

In general in web applications, we will use http protocol to send request from client to server and to set
response from server to client.


Q: What is the requirement of http protocol in web applications?
=============================================================================================

ANS:

a. In web applications, to transfer the data between client and server we require a protocol, it
   should be.

    1. A Connection less Protocol
    2. A Stateless Protocol
    3. A compatible Protocol to carry hypertext data.

b.  Where Connection less Protocol is protocol, it should not require a physical connection, but require a
    logical connection to carry the data.

c. Where Stateless Protocol is a protocol, which should not remember previous request data at the time of
   processing the later request.

d. Protocol should not remember previous state data at the time of processing the present request. 
   If the protocol remembers previous data while processing current data then in that case automatically 
   then that protocol is not stateful protocol. If protocol has to remember all the previous data then complexity will occur.

e. In general in client server application, request data will be transferred from client to server in the form
   of hypertext data and the response data will be transferred from server to client in the form of
   hypertext data so that we require a Compatible Protocol to carry hypertext data between client and
   server.

Among all the protocols http protocol is able to satisfy all the above requirements so that we will use
http protocol in web applications.



Q: How http protocol is able to manage stateless nature?
=============================================================

ANS: 

a. In client server applications, when we send a request from client to server protocol will pick up
   the request and perform the following actions.

b. Protocol will establish a virtual socket connection between client and server as per the server IP
   address and protocol which we provided in URL.

c. Protocol will prepare the request format with header part and body part, where header part will
   manage all the request headers(metadata about client) and body part will manage request
   parameters(the data which was provided by the user at client browser).

d. After preparing request format protocol will carry request format to server through the virtual
   socket connection.

e. Upon receiving request from protocol server will identify the request resource, execute generate
   dynamic response and dispatch that dynamic response to client. 

f. When server dispatch the dynamic response to the client protocol will pick up the response and perform the following actions.

g. Protocol will prepare response format with header part and body part, where header part will
   manage response headers(metadata about the dynamic response) and body part will manage the
   actual dynamic response.

h. After setting response format protocol will carry response format to client.

i. When the dynamic response reached to client protocol will terminate the virtual socket connection,
   with this protocol will eliminate the present request data from its memory.

j. In the above context, the present request data will be managed by the protocol up to the connections
   existence, will protocol connection has terminated then protocol will not manage request data .


NOTE: If we use http protocol, a stateless protocol in our web applications then we are unable to
manage clients previous request data, but as per the application requirements we need to manage
clients previous request data at the time of processing later request. In this context, to achieve the
application requirement we have to use a set of explicit mechanism at server side called as *** Session
Tracking Mechanisms.

                                                                        
Request Types
===========================


In web applications, with http protocol we are able to specify different types of requests at client
browser. The above flexibility is possible for the http protocol due to the availability of 7 number of
http methods called as BIG 7 http methods.

Http protocol has provided the following http methods along with http1.0 version.

1. GET
2. POST
3. HEAD

Http protocol has provided the following http methods as per http1.1 version.

OPTIONS
PUT
TRACE
DELETE

Http1.1 version has provided a reserved http method i.e. CONNECT.



Q: What are the differences between GET and POST methods?

or

What are the differences between doGet(_,_) and doPost(_,_) methods?
===========================================================================================================


ANS: 

1.  GET request type is default request type in web applications, but POST request type is not
    default request type.

2.  GET request type should not have body part in the request format, but POST request type should
    have body part in the request format.

3.  If we specify request parameters along with GET request then that request parameters will be
    transferred to server through request format header part due to the lack of body part.

4.  In general request format header part will have memory limitation so that it is able to carry
    maximum 256 no. of characters. Therefore, GET request is able to carry less data from client to
    server

5.  Due to the availability of body part in POST request all the request parameters will be transferred to
    server through request format body part, here there is no memory limitation in request format body
    part so that the POST request is able to carry large data from client to server.

6.  If we specify request parameters along with GET request then GET request will display all the
    request parameters at client address bar as query string. Therefore, GET request is able to provide
    less security for the client data.

7.  If we provide request parameters along with POST request then POST request will not display the
    request parameters at client address bar. Therefore, POST request is able to provide very good
    security for the client data.

8. In general in web applications, GET request can be used to get the data from server i.e. download
   the data from server.

9.  In general in web applications, POST request can be used to post the data to server i.e. upload the
    data on to the server.

10. GET request is supporting ASCII characters data but not binary data but POST request will support all kinds of data. 

11. GET reqeust can be cached  that is the data will be managed by the browser. In the browser cache 
    is present and that cache will manage  the get request but the POST request data will not be stored in the browsers hence no cache.
    We can say that GET request data is managed in browsers history , but the POST request data is not present in the browsers history

NOTE: Bookmarks are supported by GET request and which are not supported by POST request.


Q: What is the difference between GET request and HEAD request?
======================================================================================

1.  If we send Get request for a particular resource available at server machine then server will send
    only the requested resource as a response to client.

2.  If we send HEAD request for a particular resource available at server then server will send requested
    resource as well as the metadata about the requested resource as response.

NOTE: Internally HEAD request uses GET request to get the requested resource from server.


OPTIONS REQUEST:
======================================================================================


1.  The main purpose of the OPTIONS request type is to get the http methods which are supported by the
    present server.

NOTE: In general http protocol has provided by 7 http methods conceptually, supporting all the
methods or some of the methods or none is completely depending on the server implementation
provided by the server providers.

2.  With this convention we are unable to credit how many number of http methods are supported by the
    present application server, where to credit the http methods which are supported by the present server
    we have to use OPTIONS request type.


Q: What is the difference between POST request and PUT request?
=========================================================================================


ANS:

Both POST request and PUT request can be used to upload the data on the server machine. To
upload the data on server machine if we use POST request then it is not mandatory to specify
particular address location along with POST request.

To upload the data on server machine if we use PUT request then it is mandatory to specify server side
location along with PUT request.

PUT is also used to POST the data, but , it used mainly for the replacement of type of resource at the server.
In case of PUT request the data will get overridden.

PUT puts a file or resource at a specific URI, and exactly at that URI. If there's already a 
file or resource at that URI, PUT replaces that file or resource. If there is no file or resource there, PUT creates one.


TRACE REQUEST:
===================================================================================

The main purpose of the TRACE request is to get the working status of a particular resource available
at the server machine. TRACE request type is able to execute its functionality like echo server.

To know the tracing part of the resource path we need to use the TRACE request. 
IT can be used to check weather resources are working fine or not which are available at server. 
It is working on the basis of ECHO server nature.


DELETE REQUEST:
===============================================================================

The main purpose of this request type is to delete a particular resource available at server machine.

NOTE: Almost all the servers may not support PUT, DELETE and request types as per their security
constraints. In general almost all the servers are able to support GET and POST request types .


STATUS CODES:
===============================================================================

In web applications, the main purpose of the status codes is to give the status of the request processing
to the client.

Http1.1 version has provided all the status codes in the form of number representations. As per the web
application requirement http1.1 version has provided the following status codes.

1xx -- 100 to 199 --  Informational status codes
2xx -- 200 to 299 -- Success related status codes
3xx -- 300 to 399 -- Re directional status codes
4xx --  400 to 499 --  Client side error status codes
5xx --  500 to 599 --  Server side error status codes


a. In general in web applications, when we send a request from client to server, server will identify the
   requested resource, execute it and generate dynamic response to client.

b. In the above context, when server dispatches the response protocol will pick up the response and
   prepare response format, where the dynamic response will be stored in the response format body part.

c.  At the time of processing response format server will provide the respective status code value in the
    response format header part i.e. with status line field.

d.  When protocol carry the response format to the client then client will pick up the status code value
    from status line field, prepare itself to get the response from response format body part.


by vikas
+++++++++++++++

a.  We have a client and server, and a protocol. Protocol will establish a connection and when we send  a request 
    then data will be transferred in the form of request format.

b.  Request format as we know have header part and body part. 

c.  Finally some response will be generated by server and protocol will prepare the response format. 

d.  So note that it is work of protocol to make the request format as well as the response format.

e.  In the header part there is field called as status line field.

f.  This status line field is able to include a three digit number which represents the type of response which is given by the server. 

g.  This status line is present as part of the header information. Now this will be transferred to the client. 

h.  Client will first take the status line field value and identify the number. Client will check whether 
    it is any error response or normal response . After recognizing the type of number and status of request 
    processing then only the response will be taken to the respective client.

i.  This number is called as the status code. Status code is the number representing the status of request processing.
    It checks if there is any error , or if we submit  a request but the required page is not present then 
    the request could be taken to another page. It will check all these things.

What are exactly the number of status codes present and what is the purpose of each of the status codes.

1XX-----100 to 199->  this are called informational status codes

2XX----200 to 299-->  this are Success related status codes saying the request is processed successfully.

3XXX- 300 to 399  -->This are re directional status code which represents that page is not present at requested site and 
                  the request has been taken to another web application.

4XX--- 400 to 499-> These are the client side error as the mistake is coming from the client side is only.

5xx-- 500 to 599-->Server side error , if there is some problem with server side processing then we are going to get this kind of error codes.


                                                                           3. SERVER:
                                                                          ==================

a.  The main purpose of the server in client server applications is to pick up the request from client,
    identify the requested resource, generate the dynamic response and dispatch dynamic response to
    client.

NOTE: Servlet is a program available at server machine, it is not capable to pick up the request and
dispatch response to client, if server execute servlet program then some dynamic response will be
generated.

Examples of Servers: Apache Tomcat, BEA Weblogic, IBM Websphere, Macromedia JRun, SUN
Sunone, J2EE, GlassFish and so on.

There are 2 types of servers to execute enterprise applications.
1. Web Servers
2. Application Servers



Q: What are the differences between Web Servers and Application Servers?
========================================================================================


ANS: 

1.  Web Server is a server, which will provide very good environment to execute web
    applications only. But Application servers will provide very good environment to execute any type of
    J2EE applications like web applications, distributed applications and so on.

2.  In general web servers will not provide all the middle ware services. But application servers will
    provide all the middle ware services like JND, Jdbc and so on as in-built support.
    Application server = Web server + Middleware services

NOTE: Initially the main intention of web servers is to execute static resources in order to generate
static response and the main intention of application servers is to execute dynamic resources in order to
generate dynamic response.

If we want to specify a particular machine has server machine then we have to install a particular
server software, when we install server software on server machine automatically that server software
will be available in the form of the following 2 modules.

Main Server
Container



Q: What is the difference between Main server and Container?
==========================================================================

ANS: 

a.  When we send a request from client to server then main server will pick up the request from
    protocol and check whether the request data is in well-formed format or not, if it is not in well-formed
    format then main server will stop request their itself and generate the respective response to client.

b.  If the request data is in well-formed format then that request will by pass to container, where
    container will identify the requested resource, execute it, generate dynamic response and dispatch
    dynamic response to main server, where main server will bypass response to client through the
    protocol.

In general containers could be classified into the following 2 ways.

As per the technology which we used to design server side component. There are some containers

1. Servlet Container -- To execute servlets
2. Jsp Container -- To execute JSP
3. EJB Container -- To execute EJBs

NOTE: All the above specified containers can be used to execute the respective components because
the above containers have implemented the respective technology API.


by vikas
++++++++++++++

We have an example here to understand the difference between the main server and the container.

1.  Lets say we have a client and and we have a server. Inside the server we will be having a container.
    Main server will be existed outside container. Between the client and server we will be having as usual protocol.
    Inside the container we will have application in which the resources will be present. This are the web resources 
    which can be html files, or css files.

2.  In between the client and the server we have a protocol. First client will send a request to the server and protocol 
    will take request and then protocol will establish the connection between client and server and then protocol will
    prepare the request format, this request format will contain the header part and the body part.

3.  The request format will be taken to the server. This request format will as usual contain header and body part. 
    Now this request firstly will be taken by the main server. Main server will check whether the request is valid or not to access the web resources. 
    This work is done by main server. If the request is valid request then main server will identify the container and main server
    will send the request to the container. Now container will check the application name and resource name , then container will execute that particular web resource , 
    by the execution of the web resource dynamic response will be generated.  When response is generated the response is given 
    back to the main server. Now the main server only knows how to transfers the response via protocol to the client. Now protocol will prepare the response format.
    When response format is coming to the client , then client is able to take the data and client is able to display the respective data.


4.  We need to understand the actual responsibility of main server and container

5.  Main server is to check request from client and validate the request, if it is fine then container will 
    be identified and request will be given to container.

6.  Now the container will take the request and identify the web resource and execute the resource and generate
    the dynamic response and give it back to container taken again to main server.

7.  Container is responsible to execute server side applications. Here main server is not aware how to execute 
    the server side resources because server side resources are having lifecycle to execute and those lifecycles
    are implemented in container only but not inside the main server.
    Main server does not have lifecycle implementations but container has.



   As per the containers physical existence there are 3 types of containers.

1. STANDALONE CONTAINER:
   
    It is an integration of main server and container as a single program.

2. INPROCESS CONTAINER:

    It is a container existed inside the main server.

3. OUT OF PROCESS CONTAINER:

    It is a container existed outside of the main server.




*/