package gw.bizrules

uses gw.api.databuilder.bizrules.ReserveCommandDefinitionBuilder
uses gw.api.databuilder.bizrules.reserve.ReserveRuleBuilder
uses gw.api.databuilder.bizrules.reserve.ReserveRuleHeadBuilder
uses gw.bizrules.databuilder.RuleConditionBuilder

@Export
class DefaultReserveBizrules extends DefaultAbstractBizrulesBase {
  /**
   * Creates all the Rules and saves them to the database
   */
  public static function createRules() {
    createIRR01110Rule()
    createIRR01120Rule()
    createIRR01130Rule()
    createIRR01140Rule()
    createIRR01150Rule()

  }

  private static function createIRR01110Rule() {
    var head = new ReserveRuleHeadBuilder()
        .withGlobalRuleID("a1dadf2f-81f0-4684-ae96-852d0a2a59ce")
        .withSystemId("base-configuration")
        .withStatus(RuleStatus.TC_STAGED)
        .withRule(new ReserveRuleBuilder()
            .withName("IRR01110 - Auto Vehicle Damage Minor")
            .withDescription("Create initial reserve for vehicle damage exposure with low segment")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_EXPOSURE)
            .withTriggeringPointKey(TriggeringPointKey.TC_CREATION)
            .withLossType(LossType.TC_AUTO)
            .withExposureType(ExposureType.TC_VEHICLEDAMAGE)
            .withClaimSegment(ClaimSegment.TC_AUTO_LOW)
            .withRuleCondition(new RuleConditionBuilder().withRuleConditionType(RuleConditionType.TC_ALWAYSTRUE))
            .addRuleCommandDefinition(new ReserveCommandDefinitionBuilder()
                .withCostType(CostType.TC_CLAIMCOST)
                .withCostCategory(CostCategory.TC_BODY)
                .withAmount("Util.InitialReserveForAutoMinorVehicleDamageBody")
                .withCurrency("Util.DefaultApplicationCurrency")
                .withRespectFinancialHolds(true)
                .withOrderNumber(0)
                .createCommandDefinition()
            )
        )
        .createAndCommit()
    isRuleValid(head)
  }

  private static function createIRR01120Rule() {
    var head = new ReserveRuleHeadBuilder()
        .withGlobalRuleID("1cb88cbc-a91f-49b1-90ce-a15a705e8041")
        .withSystemId("base-configuration")
        .withStatus(RuleStatus.TC_STAGED)
        .withRule(new ReserveRuleBuilder()
            .withName("IRR01120 - Auto Vehicle Damage Medium")
            .withDescription("Create initial reserves for vehicle damage exposure with medium segment")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_EXPOSURE)
            .withTriggeringPointKey(TriggeringPointKey.TC_CREATION)
            .withLossType(LossType.TC_AUTO)
            .withExposureType(ExposureType.TC_VEHICLEDAMAGE)
            .withClaimSegment(ClaimSegment.TC_AUTO_MID)
            .withRuleCondition(new RuleConditionBuilder().withRuleConditionType(RuleConditionType.TC_ALWAYSTRUE))
            .addRuleCommandDefinition(new ReserveCommandDefinitionBuilder()
                .withCostType(CostType.TC_CLAIMCOST)
                .withCostCategory(CostCategory.TC_BODY)
                .withAmount("Util.InitialReserveForAutoMediumVehicleDamageBody")
                .withCurrency("Util.DefaultApplicationCurrency")
                .withRespectFinancialHolds(true)
                .withOrderNumber(0)
                .createCommandDefinition()
            )
            .addRuleCommandDefinition(new ReserveCommandDefinitionBuilder()
                .withCostType(CostType.TC_AOEXPENSE)
                .withCostCategory(CostCategory.TC_INSPECTION)
                .withAmount("Util.InitialReserveForAutoMediumVehicleDamageInspection")
                .withCurrency("Util.DefaultApplicationCurrency")
                .withRespectFinancialHolds(false)
                .withOrderNumber(1)
                .createCommandDefinition()
            )
        )
        .createAndCommit()
    isRuleValid(head)
  }

  private static function createIRR01130Rule() {
    var head = new ReserveRuleHeadBuilder()
        .withGlobalRuleID("73a81e42-8123-4ec3-a307-b19edd8fa61b")
        .withSystemId("base-configuration")
        .withStatus(RuleStatus.TC_STAGED)
        .withRule(new ReserveRuleBuilder()
            .withName("IRR01130 - Auto Vehicle Damage High")
            .withDescription("Create initial reserves for vehicle damage exposure with high segment")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_EXPOSURE)
            .withTriggeringPointKey(TriggeringPointKey.TC_CREATION)
            .withLossType(LossType.TC_AUTO)
            .withExposureType(ExposureType.TC_VEHICLEDAMAGE)
            .withClaimSegment(ClaimSegment.TC_AUTO_HIGH)
            .withRuleCondition(new RuleConditionBuilder().withRuleConditionType(RuleConditionType.TC_ALWAYSTRUE))
            .addRuleCommandDefinition(new ReserveCommandDefinitionBuilder()
                .withCostType(CostType.TC_CLAIMCOST)
                .withCostCategory(CostCategory.TC_BODY)
                .withAmount("Util.InitialReserveForAutoMajorVehicleDamageBody")
                .withCurrency("Util.DefaultApplicationCurrency")
                .withRespectFinancialHolds(true)
                .withOrderNumber(0)
                .createCommandDefinition()
            )
            .addRuleCommandDefinition(new ReserveCommandDefinitionBuilder()
                .withCostType(CostType.TC_AOEXPENSE)
                .withCostCategory(CostCategory.TC_INSPECTION)
                .withAmount("Util.InitialReserveForAutoMajorVehicleDamageInspection")
                .withCurrency("Util.DefaultApplicationCurrency")
                .withRespectFinancialHolds(false)
                .withOrderNumber(1)
                .createCommandDefinition()
            )
        )
        .createAndCommit()
    isRuleValid(head)
  }

  private static function createIRR01140Rule() {
    var head = new ReserveRuleHeadBuilder()
        .withGlobalRuleID("71ddb690-f7f2-4413-9fbf-f6eaa6f68db5")
        .withSystemId("base-configuration")
        .withStatus(RuleStatus.TC_STAGED)
        .withRule(new ReserveRuleBuilder()
            .withName("IRR01140 - Travel MultiCurrency")
            .withAvailableToRun(false)
            .withDescription("This is an example for when MulticurrencyDisplayMode is 'Multiple', and EnableMulticurrencyReserving is set to 'TRUE', so reserves on a claim can be in any currency. " +
                "When an exposure of the appropriate type is created, a reserve will be created based on the Coverage from the Policy. " +
                "The amount will be the Coverage Exposure Limit, and the currency will be the Coverage Currency.")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_EXPOSURE)
            .withTriggeringPointKey(TriggeringPointKey.TC_CREATION)
            .withLossType(LossType.TC_TRAV)
            .withRuleCondition(new RuleConditionBuilder().withRuleConditionType(RuleConditionType.TC_ALWAYSTRUE))
            .addRuleCommandDefinition(new ReserveCommandDefinitionBuilder()
                .withCostType(CostType.TC_CLAIMCOST)
                .withCostCategory(CostCategory.TC_TRIP_CANCEL_DELAY)
                .withAmount("exposure.ExposureLimit")
                .withCurrency("exposure.Coverage.Currency")
                .withRespectFinancialHolds(true)
                .withOrderNumber(0)
                .createCommandDefinition()
            )
        )
        .createAndCommit()
    isRuleValid(head)
  }

  private static function createIRR01150Rule() {
    var head = new ReserveRuleHeadBuilder()
        .withGlobalRuleID("87f6769b-bd61-49f7-a07e-ee3a91287840")
        .withSystemId("base-configuration")
        .withStatus(RuleStatus.TC_STAGED)
        .withRule(new ReserveRuleBuilder()
            .withName("IRR01150 - Multi-Region Baggage Reserve")
            .withAvailableToRun(false)
            .withDescription("This is an example for when MulticurrencyDisplayMode is 'Multiple', but EnableMulticurrencyReserving is set to 'FALSE', so reserves on a claim can only be in Claim Currency. " +
                "When an exposure of the appropriate type is created, only the reserve which has a currency that matches the Claim Currency will be created. The other rule actions will be reported in the log, but not executed. " +
                "Note that this allows a different amount to be set for each currency.")
            .withRuleContextDefinitionKey(RuleContextDefinitionKey.TC_EXPOSURE)
            .withTriggeringPointKey(TriggeringPointKey.TC_CREATION)
            .withLossType(LossType.TC_TRAV)
            .withPolicyType(PolicyType.TC_TRAVEL_PER)

            .withExposureType(ExposureType.TC_BAGGAGE)
            .withRuleCondition(new RuleConditionBuilder().withRuleConditionType(RuleConditionType.TC_ALWAYSTRUE))
            .addRuleCommandDefinition(new ReserveCommandDefinitionBuilder()
                .withCostType(CostType.TC_CLAIMCOST)
                .withCostCategory(CostCategory.TC_BAGGAGE)
                .withAmount("280")
                .withCurrency(Currency.TC_CAD)
                .withRespectFinancialHolds(true)
                .withOrderNumber(0)
                .createCommandDefinition()
            )
            .addRuleCommandDefinition(new ReserveCommandDefinitionBuilder()
                .withCostType(CostType.TC_CLAIMCOST)
                .withCostCategory(CostCategory.TC_BAGGAGE)
                .withAmount("250")
                .withCurrency(Currency.TC_USD)
                .withRespectFinancialHolds(true)
                .withOrderNumber(1)
                .createCommandDefinition()
            )
            .addRuleCommandDefinition(new ReserveCommandDefinitionBuilder()
                .withCostType(CostType.TC_CLAIMCOST)
                .withCostCategory(CostCategory.TC_BAGGAGE)
                .withAmount("150")
                .withCurrency(Currency.TC_GBP)
                .withRespectFinancialHolds(true)
                .withOrderNumber(2)
                .createCommandDefinition()
            )
        )
        .createAndCommit()
    isRuleValid(head)
  }

}