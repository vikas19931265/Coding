<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <Screen
    id="FNOLWizard_NewLossDetailsScreen"
    mode="Trav">
    <Require
      name="Claim"
      type="Claim"/>
    <Require
      name="Wizard"
      type="gw.api.claim.NewClaimWizardInfo"/>
    <Variable
      initialValue="Claim.Officials.length &gt; 0"
      name="Officials"
      type="boolean"/>
    <Variable
      initialValue="Claim.MetroReports.length &gt; 0"
      name="PoliceReport"
      type="boolean"/>
    <Toolbar>
      <WizardButtons/>
    </Toolbar>
    <DetailViewPanel
      id="LossDetailsAddressDV">
      <InputColumn>
        <TextAreaInput
          editable="true"
          id="Description"
          label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.LossDetailsAddressDV.WhatHappened.Label&quot;)"
          numRows="3"
          value="Claim.Description"/>
        <DateInput
          dateFormat="short"
          id="Claim_LossDate"
          label="DisplayKey.get(&quot;NVV.Claim.SubView.NewClaimLossDetailsTrav.Claim.LossDate&quot;)"
          timeFormat="short"
          validationExpression="Claim.LossDate != null || Claim.LossDate &lt; gw.api.util.DateUtil.currentDate() ? null : DisplayKey.get(&quot;Java.Validation.Date.ForbidFuture&quot;)"
          value="Claim.LossDate"/>
        <TypeKeyInput
          editable="true"
          id="Claim_LossCause"
          label="DisplayKey.get(&quot;NVV.Claim.SubView.NewClaimLossDetailsTrav.Claim.LossCause&quot;)"
          required="true"
          value="Claim.LossCause"
          valueType="typekey.LossCause"/>
        <CheckBoxInput
          editable="true"
          id="IncidentOnly"
          label="DisplayKey.get(&quot;NVV.Claim.SubView.NewClaimLossDetailsTrav.Claim.Status.IncidentReport&quot;)"
          value="Claim.IncidentReport"/>
      </InputColumn>
      <InputColumn maxWidth="480px">
        <InputSetRef
          def="CCAddressInputSet(Claim.AddressOwner)"
          id="AddressDetailInputSetRef"/>
      </InputColumn>
    </DetailViewPanel>
    <PanelRef
      id="IncidentPanelRef">
      <TitleBar
        title="DisplayKey.get(&quot;Web.NewLossDetailsScreen.TripBaggageLabel&quot;)"/>
      <Toolbar>
        <ToolbarButton
          action="TripIncidentPopup.push(Claim)"
          icon="gw.api.claim.IncidentIconSet.TRIP.ButtonIcon"
          iconType="svgFileName"
          id="AddTripButton"
          label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.IncidentPanelRef.AddTripButton.Label&quot;)"
          shortcut="T"/>
        <ToolbarButton
          action="BaggageIncidentPopup.push(Claim)"
          icon="gw.api.claim.IncidentIconSet.BAGGAGE.ButtonIcon"
          iconType="svgFileName"
          id="AddBaggageDamageButton"
          label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.IncidentPanelRef.AddBaggageDamageButton.Label&quot;)"
          shortcut="B"/>
        <ToolbarButton
          action="NewInjuryIncidentPopup.push(Claim)"
          icon="gw.api.claim.IncidentIconSet.INJURY.ButtonIcon"
          iconType="svgFileName"
          id="AddInjuriesButton"
          label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.IncidentPanelRef.AddInjuryButton.Label&quot;)"
          shortcut="I"/>
        <ToolbarButton
          action="FNOLVehicleIncidentPopup.push(Claim, Wizard)"
          icon="gw.api.claim.IncidentIconSet.VEHICLE.ButtonIcon"
          iconType="svgFileName"
          id="AddVehicleButton"
          label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.IncidentPanelRef.AddVehicleButton.Label&quot;)"
          shortcut="V"/>
        <ToolbarButton
          action="NewFixedPropertyIncidentPopup.push(Claim)"
          icon="gw.api.claim.IncidentIconSet.PROPERTY_LIABILITY.ButtonIcon"
          iconType="svgFileName"
          id="AddPropertyDamageButton"
          label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.IncidentPanelRef.AddPropertyDamageButton.Label&quot;)"/>
      </Toolbar>
      <PanelSet>
        <Variable
          initialValue="Claim.TripIncidentsOnly"
          name="tripIncidents"
          recalculateOnRefresh="true"
          type="entity.TripIncident[]"/>
        <Variable
          initialValue="Claim.BaggageIncidentsOnly"
          name="baggageIncidents"
          recalculateOnRefresh="true"
          type="entity.BaggageIncident[]"/>
        <Variable
          initialValue="Claim.InjuryIncidentsOnly"
          name="injuryIncidents"
          recalculateOnRefresh="true"
          type="entity.InjuryIncident[]"/>
        <Variable
          initialValue="Claim.VehicleIncidentsOnly"
          name="vehicleIncidents"
          recalculateOnRefresh="true"
          type="entity.VehicleIncident[]"/>
        <Variable
          initialValue="Claim.FixedPropertyIncidentsOnly"
          name="fixedPropertyIncidents"
          recalculateOnRefresh="true"
          type="entity.FixedPropertyIncident[]"/>
        <PanelRow>
          <PanelColumn
            visible="tripIncidents.HasElements">
            <PanelIterator
              elementName="TripIncident"
              id="TripIncidentIterator"
              value="tripIncidents"
              valueType="entity.TripIncident[]">
              <IteratorSort
                sortBy="TripIncident.TripRU"
                sortOrder="1"/>
              <DetailViewPanel
                border="true"
                columnDivider="false"
                id="TripIncidentDV"
                inline="true"
                width="320px">
                <InputColumn
                  width="30px">
                  <Label
                    icon="TripIncident.PanelIcon"
                    iconType="svgFileName"
                    id="tripIcon"/>
                </InputColumn>
                <InputColumn
                  width="250px">
                  <TextInput
                    action="TripIncidentPopup.push(TripIncident, true)"
                    boldValue="true"
                    hideChildrenIfReadOnly="false"
                    id="TripName"
                    labelAbove="true"
                    value="TripIncident.TripRU.DisplayName.elide(25)"
                    valueType="String">
                    <MenuItem
                      action="TripIncidentPopup.push( TripIncident, true )"
                      id="EditTripMenu"
                      label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.TripIncidentIterator.EditTripMenuItem.Label&quot;)"/>
                    <MenuItem
                      action="removeTripIncident( TripIncident)"
                      confirmMessage="DisplayKey.get(&quot;Web.NewLossDetailsScreen.TripIncidentIterator.RemoveTripMenuItem.ConfirmMessage&quot;)"
                      id="RemoveTripMenu"
                      label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.TripIncidentIterator.RemoveTripMenuItem.Label&quot;)"
                      visible="TripIncident.Exposures.IsEmpty"/>
                  </TextInput>
                  <TextAreaInput
                    id="TripIncidentDescription"
                    labelAbove="true"
                    value="TripIncident.Description"
                    valueType="String"
                    visible="TripIncident.Description.HasContent"/>
                </InputColumn>
              </DetailViewPanel>
              <Spacer
                height="8px"/>
            </PanelIterator>
          </PanelColumn>
          <PanelColumn
            visible="baggageIncidents.HasElements">
            <PanelIterator
              elementName="BaggageIncident"
              id="BaggageIncidentIterator"
              value="baggageIncidents"
              valueType="entity.BaggageIncident[]">
              <DetailViewPanel
                border="true"
                columnDivider="false"
                id="BaggageIncidentDV"
                inline="true"
                width="320px">
                <InputColumn
                  width="30px">
                  <Label
                    icon="BaggageIncident.PanelIcon"
                    iconType="svgFileName"
                    id="BaggageIcon"/>
                </InputColumn>
                <InputColumn
                  width="250px">
                  <TypeKeyInput
                    action="BaggageIncidentPopup.push( BaggageIncident, true )"
                    boldValue="true"
                    hideChildrenIfReadOnly="false"
                    id="Baggage"
                    labelAbove="true"
                    value="BaggageIncident.BaggageType"
                    valueType="typekey.BaggageType">
                    <MenuItem
                      action="BaggageIncidentPopup.push( BaggageIncident, true )"
                      id="EditBaggage"
                      label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.BaggageIncidentIterator.EditBaggageMenuItem.Label&quot;)"/>
                    <MenuItem
                      action="removeBaggageIncident( BaggageIncident )"
                      confirmMessage="DisplayKey.get(&quot;Web.NewLossDetailsScreen.BaggageIncidentIterator.RemoveBaggageMenuItem.ConfirmMessage&quot;)"
                      id="RemoveBaggage"
                      label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.BaggageIncidentIterator.RemoveBaggageMenuItem.Label&quot;)"
                      visible="BaggageIncident.Exposures.IsEmpty"/>
                  </TypeKeyInput>
                  <TextAreaInput
                    id="BaggageIncidentDescription"
                    labelAbove="true"
                    value="BaggageIncident.Description"
                    visible="BaggageIncident.Description.HasContent"/>
                </InputColumn>
              </DetailViewPanel>
              <Spacer
                height="8px"/>
            </PanelIterator>
          </PanelColumn>
          <PanelColumn
            visible="injuryIncidents.HasElements">
            <PanelIterator
              elementName="InjuryIncident"
              id="InjuryIncidentIterator"
              value="injuryIncidents"
              valueType="entity.InjuryIncident[]">
              <DetailViewPanel
                border="true"
                columnDivider="false"
                id="InjuryIncidentDV"
                inline="true"
                width="320px">
                <InputColumn
                  width="30px">
                  <Label
                    icon="InjuryIncident.PanelIcon"
                    iconType="svgFileName"
                    id="InjuryIcon"/>
                </InputColumn>
                <InputColumn
                  width="250px">
                  <TextInput
                    action="EditInjuryIncidentPopup.push(InjuryIncident, CurrentLocation.InEditMode)"
                    boldValue="true"
                    hideChildrenIfReadOnly="false"
                    id="InjuryName"
                    labelAbove="true"
                    value="InjuryIncident.injured.DisplayName.elide(25)"
                    valueType="String">
                    <MenuItem
                      action="EditInjuryIncidentPopup.push(InjuryIncident, true)"
                      id="EditInjury"
                      label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.InjuryIncidentIterator.EditInjuryMenuItem.Label&quot;)"/>
                    <MenuItem
                      action="removeInjuryIncident( InjuryIncident )"
                      confirmMessage="DisplayKey.get(&quot;Web.NewLossDetailsScreen.InjuryIncidentIterator.RemoveInjuryMenuItem.ConfirmMessage&quot;)"
                      id="RemoveInjury"
                      label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.InjuryIncidentIterator.RemoveInjuryMenuItem.Label&quot;)"
                      visible="InjuryIncident.Exposures.IsEmpty"/>
                  </TextInput>
                  <TextAreaInput
                    id="InjuryIncidentDescription"
                    labelAbove="true"
                    value="InjuryIncident.Description"
                    visible="InjuryIncident.Description.HasContent"/>
                </InputColumn>
              </DetailViewPanel>
              <Spacer
                height="8px"/>
            </PanelIterator>
          </PanelColumn>
          <PanelColumn
            visible="vehicleIncidents.HasElements">
            <PanelIterator
              elementName="VehicleIncident"
              id="VehicleIncidentIterator"
              value="vehicleIncidents"
              valueType="entity.VehicleIncident[]">
              <IteratorSort
                sortBy="VehicleIncident.LossParty"
                sortOrder="1"/>
              <Variable
                initialValue="new gw.api.claim.VehicleIncidentUIHelper(VehicleIncident)"
                name="vehicleIncidentHelper"
                type="gw.api.claim.VehicleIncidentUIHelper"/>
              <Variable
                initialValue="vehicleIncidentHelper.VehicleOccupants"
                name="vehicleOccupants"
                type="ArrayList&lt;Person&gt;"/>
              <DetailViewPanel
                border="true"
                columnDivider="false"
                id="VehicleIncidentDV"
                inline="true"
                width="320px">
                <InputColumn
                  width="30px">
                  <Label
                    icon="VehicleIncident.PanelIcon"
                    iconType="svgFileName"
                    id="VehicleIcon"/>
                </InputColumn>
                <InputColumn
                  width="250px">
                  <TextInput
                    action="FNOLVehicleIncidentPopup.push(VehicleIncident, Wizard);"
                    boldValue="true"
                    hideChildrenIfReadOnly="false"
                    id="VehicleName"
                    labelAbove="true"
                    value="isNewlyCreatedVehicleIncident( VehicleIncident ) ? DisplayKey.get(&quot;Web.NewLossDetailsScreen.VehicleIncidentIterator.UnknownVehicle.Value&quot;) : VehicleIncident.Vehicle.ShortDisplayName.elide(25)">
                    <MenuItem
                      action="FNOLVehicleIncidentPopup.push(VehicleIncident, Wizard)"
                      id="EditVehicleMenu"
                      label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.VehicleIncidentIterator.EditVehicleMenuItem.Label&quot;)"/>
                    <MenuItem
                      action="removeVehicleIncident(VehicleIncident)"
                      confirmMessage="DisplayKey.get(&quot;Web.NewLossDetailsScreen.VehicleIncidentIterator.RemoveVehicleMenu.ConfirmMessage&quot;)"
                      id="RemoveVehicleMenu"
                      label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.VehicleIncidentIterator.RemoveVehilcleMenuItem.Label&quot;)"
                      visible="VehicleIncident.Exposures.IsEmpty"/>
                  </TextInput>
                  <TypeKeyInput
                    filter="VALUE.hasCategory(JurisdictionType.TC_VEHICLE_REG)"
                    id="VehicleState"
                    labelAbove="true"
                    value="VehicleIncident.Vehicle.State"
                    valueType="typekey.Jurisdiction"
                    visible="VehicleIncident.Vehicle.State != null"/>
                  <TextInput
                    id="VehiclePlateNumber"
                    labelAbove="true"
                    value="VehicleIncident.Vehicle.LicensePlate"
                    visible="VehicleIncident.Vehicle.LicensePlate.length &gt; 0"/>
                  <TextInput
                    id="VehicleVIN"
                    labelAbove="true"
                    value="VehicleIncident.Vehicle.Vin"
                    visible="VehicleIncident.Vehicle.LicensePlate.length == 0 and VehicleIncident.Vehicle.Vin.length &gt; 0"/>
                  <TextAreaInput
                    id="VehicleIncidentDescription"
                    labelAbove="true"
                    value="VehicleIncident.Description"
                    visible="VehicleIncident.Description.HasContent"/>
                  <ListViewInput
                    def="VehicleIncidentOccupantsLV(vehicleOccupants, VehicleIncident, Wizard)"
                    label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.VehicleIncidentIterator.Occupants.Title&quot;)"
                    labelAbove="true"
                    visible="!vehicleOccupants.Empty">
                    <Toolbar/>
                  </ListViewInput>
                </InputColumn>
              </DetailViewPanel>
              <Spacer
                height="8px"/>
            </PanelIterator>
          </PanelColumn>
          <PanelColumn
            visible="fixedPropertyIncidents.HasElements">
            <PanelIterator
              elementName="PropertyIncident"
              id="PropertyIncidentIterator"
              value="fixedPropertyIncidents"
              valueType="entity.FixedPropertyIncident[]">
              <DetailViewPanel
                border="true"
                columnDivider="false"
                id="PropertyIncidentDV"
                inline="true"
                width="320px">
                <InputColumn
                  width="30px">
                  <Label
                    icon="PropertyIncident.PanelIcon"
                    iconType="svgFileName"
                    id="PropertyIcon"/>
                </InputColumn>
                <InputColumn
                  width="250px">
                  <TextInput
                    action="EditFixedPropertyIncidentPopup.push(PropertyIncident, true)"
                    boldValue="true"
                    hideChildrenIfReadOnly="false"
                    id="PropertyName"
                    labelAbove="true"
                    value="PropertyIncident.DisplayName == &quot;&quot; ? DisplayKey.get(&quot;Web.NewLossDetailsScreen.PropertyIncidentIterator.Property.Value&quot;) : PropertyIncident.DisplayName.elide(25)">
                    <MenuItem
                      action="EditFixedPropertyIncidentPopup.push(PropertyIncident, true)"
                      id="EditProperty"
                      label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.PropertyIncidentIterator.Property.PropertyDamage.Edit&quot;)"/>
                    <MenuItem
                      action="Claim.removeFromIncidents(PropertyIncident)"
                      confirmMessage="DisplayKey.get(&quot;Web.NewLossDetailsScreen.PropertyIncidentIterator.RemovePropertyMenu.ConfirmMessage&quot;)"
                      id="RemoveProperty"
                      label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.PropertyIncidentIterator.Property.PropertyDamage.Remove&quot;)"
                      visible="PropertyIncident.Exposures.IsEmpty"/>
                  </TextInput>
                  <TextAreaInput
                    id="PropertyIncidentDescription"
                    labelAbove="true"
                    value="PropertyIncident.Description"
                    visible="PropertyIncident.Description.HasContent"/>
                </InputColumn>
              </DetailViewPanel>
              <Spacer
                height="8px"/>
            </PanelIterator>
          </PanelColumn>
        </PanelRow>
      </PanelSet>
    </PanelRef>
    <PanelRef>
      <TitleBar
        title="DisplayKey.get(&quot;Web.NewLossDetailsScreen.AtTheSceneDV.AtTheSceneLabel&quot;)"/>
      <DetailViewPanel
        id="AtTheSceneDV">
        <InputColumn>
          <ListViewInput
            def="EditableWitnessesLV(Claim.getClaimContactRolesByRole(ContactRole.TC_WITNESS), Claim, ContactRole.TC_WITNESS)"
            editable="true"
            id="WitnessLV"
            label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.AtTheSceneDV.AnyWitnesses.Label&quot;)"
            labelAbove="true">
            <Toolbar>
              <IteratorButtons
                iterator="WitnessLV.EditableWitnessesLV"/>
            </Toolbar>
          </ListViewInput>
          <ListViewInput
            def="EditableOfficialsLV(Claim)"
            editable="true"
            id="Claim_Officials"
            label="DisplayKey.get(&quot;Web.NewLossDetailsScreen.AtTheSceneDV.Officials.Label&quot;)"
            labelAbove="true">
            <Toolbar>
              <IteratorButtons
                iterator="Claim_Officials.EditableOfficialsLV"/>
            </Toolbar>
          </ListViewInput>
        </InputColumn>
      </DetailViewPanel>
    </PanelRef>
    <PanelRef>
      <TitleBar
        title="DisplayKey.get(&quot;Web.NewLossDetailsScreen.CategorizationDV.CategorizationLabel&quot;)"/>
      <DetailViewPanel
        id="CategorizationDV">
        <InputColumn>
          <TypeKeyInput
            editable="true"
            id="Notification_Fault"
            label="DisplayKey.get(&quot;NVV.Claim.SubView.NewClaimLossDetailsTrav.Claim.Notification.Fault&quot;)"
            value="Claim.FaultRating"
            valueType="typekey.FaultRating"/>
          <TypeKeyInput
            editable="true"
            id="Claim_Weather"
            label="DisplayKey.get(&quot;NVV.Claim.SubView.NewClaimLossDetailsTrav.Claim.Weather&quot;)"
            value="Claim.Weather"
            valueType="typekey.WeatherType"/>
          <RangeInput
            editable="true"
            id="Catastrophe_CatastropheNumber"
            label="DisplayKey.get(&quot;NVV.Claim.SubView.NewClaimLossDetailsTrav.Claim.Catastrophe.CatastropheNumber&quot;)"
            required="false"
            value="Claim.Catastrophe"
            valueRange="gw.api.admin.CatastropheUtil.getCatastrophes()"
            valueType="entity.Catastrophe"/>
          <RangeInput
            editable="true"
            id="Claim_PermissionRequired"
            label="DisplayKey.get(&quot;NVV.Claim.SubView.NewClaimLossDetailsTrav.Claim.PermissionRequired&quot;)"
            required="false"
            value="Claim.PermissionRequired"
            valueRange="gw.api.claim.ClaimUtil.getAvailableTypes()"
            valueType="typekey.ClaimSecurityType"/>
        </InputColumn>
      </DetailViewPanel>
    </PanelRef>
    <Code><![CDATA[
function removeTripIncident(tripIncidentParam : TripIncident) {
  tripIncidentParam.Claim.removeFromIncidents(tripIncidentParam)
}

function removeBaggageIncident(baggageIncidentParam : BaggageIncident) {
  baggageIncidentParam.Claim.removeFromIncidents(baggageIncidentParam)
}

function removeInjuryIncident(injuryIncidentParam : InjuryIncident) {
  injuryIncidentParam.Claim.removeFromIncidents(injuryIncidentParam)
}

function removeVehicleIncident(vehicleIncidentParam : VehicleIncident) {
  vehicleIncidentParam.Claim.removeFromIncidents(vehicleIncidentParam)

}

function isNewlyCreatedVehicleIncident(vi : VehicleIncident) : boolean {
  return vi != null and vi.Vehicle.ShortDisplayName == DisplayKey.get("Java.DisplayName.NewlyCreated")
}

    ]]></Code>
  </Screen>
</PCF>