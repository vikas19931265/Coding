<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <PanelSet
    id="SubrogationMainPanelSet">
    <Require
      name="claim"
      type="Claim"/>
    <Require
      name="selectSubrogationFinancialsCard"
      type="boolean"/>
    <Variable
      initialValue="claim.SubrogationSummary"
      name="subrogationSummary"
      type="SubrogationSummary"/>
    <Variable
      initialValue="not subrogationSummary.SubrogateIndividualExposures and subrogationSummary.Status == TC_CLOSED"
      name="showCloseFields"
      recalculateOnRefresh="true"
      type="boolean"/>
    <Variable
      initialValue="new gw.document.DocumentsActionsUIHelper()"
      name="documentsActionsHelper"
      type="gw.document.DocumentsActionsUIHelper"/>
    <CardViewPanel>
      <Card
        id="GeneralTab"
        title="DisplayKey.get(&quot;Web.Subrogation.Tab.General&quot;)">
        <PanelRow>
          <PanelColumn>
            <PanelRef>
              <Toolbar>
                <EditButtons/>
                <ToolbarButton
                  action="ReferSubrogationPopup.push(claim)"
                  available="perm.System.editsubrodetails"
                  id="ReferForSubrogation"
                  label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.EscalateSubro&quot;)"
                  visible="(gw.api.print.PrintUtil.isPrintingPDF() or not CurrentLocation.InEditMode) and not claim.SubrogationSummary.EscalateSubro and claim.SubrogationStatus != SubrogationStatus.TC_CLOSED"/>
                <ToolbarButton
                  action="AssignSubrogationPopup.push(new gw.api.subrogation.SubrogationAssignmentPopup(claim.SubrogationSummary))"
                  available="perm.System.editsubrodetails"
                  id="AssignClaimLevelSubrogation"
                  label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.Assign.Title&quot;)"
                  visible="(gw.api.print.PrintUtil.isPrintingPDF() or not CurrentLocation.InEditMode) and claim.SubrogationSummary.EscalateSubro and not claim.SubrogationSummary.SubrogateIndividualExposures"/>
              </Toolbar>
              <DetailViewPanel>
                <InputColumn>
                  <Label
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation&quot;)"/>
                  <TextInput
                    id="Jurisdiction"
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.SubrogationStatus.Jurisdiction&quot;)"
                    value="claim.JurisdictionState"
                    valueType="typekey.Jurisdiction"/>
                  <TypeKeyInput
                    editable="true"
                    id="Notification_Fault"
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.SubrogationStatus.Fault&quot;)"
                    value="claim.FaultRating"
                    valueType="typekey.FaultRating">
                    <PostOnChange
                      deferUpdate="false"/>
                  </TypeKeyInput>
                  <TextInput
                    editable="true"
                    formatType="percentagePoints"
                    id="Notification_AtFaultPercentage"
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.SubrogationStatus.AtFaultPercentage&quot;)"
                    value="claim.Fault"
                    valueType="java.math.BigDecimal"
                    visible="claim.FaultRating == FaultRating.TC_1 "/>
                  <TypeKeyInput
                    editable="not subrogationSummary.SubrogateIndividualExposures"
                    id="Status"
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.SubrogationStatus&quot;)"
                    required="true"
                    value="subrogationSummary.Status"
                    valueType="typekey.SubrogationStatus">
                    <PostOnChange/>
                  </TypeKeyInput>
                  <DateInput
                    id="CloseDate"
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.CloseDt&quot;)"
                    required="true"
                    value="subrogationSummary.CloseDate"
                    visible="showCloseFields"/>
                  <TextInput
                    editable="subrogationSummary.Subrogations.first().isFieldChanged(Subrogation#Status)"
                    id="CloseComment"
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.CloseComment&quot;)"
                    value="subrogationSummary.CloseComment"
                    visible="showCloseFields"/>
                  <TypeKeyInput
                    editable="subrogationSummary.Subrogations.first().isFieldChanged(Subrogation#Status)"
                    id="Outcome"
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.Outcome&quot;)"
                    required="true"
                    value="subrogationSummary.ClosedOutcome"
                    valueType="typekey.SubroClosedOutcome"
                    visible="showCloseFields"/>
                  <BooleanRadioInput
                    editable="true"
                    id="SubroExternalOwner"
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.SubrogationExternallyOwned&quot;)"
                    required="true"
                    value="subrogationSummary.ExtOwned"
                    visible="true">
                    <PostOnChange
                      onChange="if (!subrogationSummary.ExtOwned) { subrogationSummary.Claim.subrogator = null}"/>
                  </BooleanRadioInput>
                  <!-- onChange="if (true) { subrogationSummary.Claim.Subrogator = null}" -->
                  <ClaimContactInput
                    claim="claim"
                    editable="true"
                    id="Subrogator"
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.Subrogator&quot;)"
                    required="subrogationSummary.ExtOwned"
                    value="claim.subrogator"
                    valueRange="claim.RelatedContacts"
                    visible="subrogationSummary.ExtOwned"/>
                </InputColumn>
                <InputColumn>
                  <InputSet
                    id="SubroReferralInfo"
                    visible="subrogationSummary.EscalateSubro">
                    <Label
                      label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Referral&quot;)"/>
                    <TextInput
                      id="SubroReferralOwner"
                      label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.ReferralOwner&quot;)"
                      value="subrogationSummary.Subrogations.singleWhere( \ subrogation -&gt; subrogation.Exposure == null).AssignedUser"
                      valueType="entity.User"
                      visible="not subrogationSummary.SubrogateIndividualExposures"/>
                    <DateInput
                      dateFormat="short"
                      id="SubroReferralDate"
                      label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.ReferralDate&quot;)"
                      timeFormat="short"
                      value="subrogationSummary.SubroReferralDate"/>
                    <TextAreaInput
                      id="SubroReferralComment"
                      label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.ReferralComment&quot;)"
                      numRows="2"
                      required="true"
                      value="subrogationSummary.SubroReferralComment"
                      visible="subrogationSummary.EscalateSubro"/>
                  </InputSet>
                  <InputSet
                    visible="not subrogationSummary.SubroAdverseParties.IsEmpty">
                    <Label
                      label="DisplayKey.get(&quot;Web.Subrogation.Deductible&quot;)"/>
                    <BooleanRadioInput
                      editable="true"
                      id="ProrateDeductible"
                      label="DisplayKey.get(&quot;Web.Subrogation.Deductible.Prorate&quot;)"
                      required="true"
                      value="subrogationSummary.ProrateDeductible">
                      <PostOnChange
                        deferUpdate="false"/>
                    </BooleanRadioInput>
                    <CurrencyInput
                      id="DeductibleToRepay"
                      label="DisplayKey.get(&quot;Web.Subrogation.Deductible.ToRepay&quot;)"
                      value="subrogationSummary.DeductibleToRepay"/>
                    <CurrencyInput
                      id="DeductibleRepaid"
                      label="DisplayKey.get(&quot;Web.Subrogation.Deductible.Repaid&quot;)"
                      value="subrogationSummary.DeductibleRepaid"/>
                  </InputSet>
                </InputColumn>
              </DetailViewPanel>
            </PanelRef>
          </PanelColumn>
        </PanelRow>
        <PanelDivider/>
        <PanelRow>
          <PanelColumn>
            <DetailViewPanel>
              <InputColumn>
                <ListViewInput
                  boldLabel="true"
                  def="EditableAdverseGeneralLV(claim)"
                  editable="true"
                  id="AdversePartyInfo"
                  label="DisplayKey.get(&quot;NVV.Claim.Subro.AdverseParties&quot;)"
                  labelAbove="true">
                  <Toolbar>
                    <AddButton
                      hideIfReadOnly="true"
                      id="AddResponsibleParty"
                      iterator="AdversePartyInfo.EditableAdverseGeneralLV"
                      label="DisplayKey.get(&quot;Web.Subrogation.ResponsibleParties.Add&quot;)"
                      pickLocation="NewSubroAdversePartyPopup.push(claim)"
                      visible="perm.System.editsubrodetails"/>
                    <IteratorButtons
                      addVisible="false"
                      iterator="AdversePartyInfo.EditableAdverseGeneralLV"
                      removeConfirmMessage="DisplayKey.get(&quot;Web.Subrogation.Warning.RemovingParty&quot;)"
                      removeVisible="perm.System.editsubrodetails"/>
                  </Toolbar>
                </ListViewInput>
                <CheckBoxInput
                  available="subrogationSummary.SubrogateIndividualExposures ? not subrogationSummary.Subrogations.hasMatch(\ subrogation -&gt; subrogation.Status == TC_OPEN or subrogation.Status == TC_CLOSED) : subrogationSummary.Claim.Exposures.length &gt; 0 and subrogationSummary.Status != TC_CLOSED"
                  confirmMessage="DisplayKey.get(&quot;Web.Subrogation.Warning.ExposureDataLost&quot;)"
                  editable="true"
                  hideIfReadOnly="true"
                  id="SubrogateIndividualExposures"
                  labelAbove="true"
                  showConfirmMessage="subrogationSummary.SubrogateIndividualExposures"
                  value="subrogationSummary.SubrogateIndividualExposures"
                  valueLabel="DisplayKey.get(&quot;Web.Subrogation.SubrogateIndividualExposures&quot;)">
                  <PostOnChange/>
                </CheckBoxInput>
                <ListViewInput
                  boldLabel="true"
                  editable="true"
                  id="SubrogatedExposures"
                  label="DisplayKey.get(&quot;Web.Subrogation.ExposuresInSubrogation&quot;)"
                  labelAbove="true"
                  visible="subrogationSummary.SubrogateIndividualExposures">
                  <Toolbar>
                    <AddButton
                      hideIfReadOnly="true"
                      id="AddSubrogation"
                      iterator="SubrogationsLV"
                      label="DisplayKey.get(&quot;Web.Subrogation.Exposures.Add&quot;)"
                      visible="subrogationSummary.Subrogations.length &lt; claim.Exposures.length and perm.System.editsubrodetails"/>
                    <RemoveButton
                      flags="all Removable"
                      hideIfReadOnly="true"
                      id="RemoveSubrogation"
                      iterator="SubrogationsLV"
                      label="DisplayKey.get(&quot;Web.Subrogation.Remove&quot;)"
                      visible="perm.System.editsubrodetails"/>
                    <CheckedValuesToolbarButton
                      allCheckedRowsAction="AssignSubrogationPopup.push(new gw.api.subrogation.SubrogationAssignmentPopup(CheckedValues))"
                      available="perm.System.editsubrodetails"
                      id="AssignExposureLevelSubrogation"
                      iterator="SubrogationsLV"
                      label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.Assign.Title&quot;)"
                      visible="not CurrentLocation.InEditMode and subrogationSummary.EscalateSubro"/>
                  </Toolbar>
                  <ListViewPanel
                    id="SubrogationsLV"
                    stretch="true">
                    <RowIterator
                      checkBoxVisible="CurrentLocation.InEditMode or subrogationSummary.EscalateSubro"
                      editable="true"
                      elementName="subrogation"
                      hasCheckBoxes="true"
                      toCreateAndAdd="subrogationSummary.createNewSubrogation()"
                      toRemove="subrogationSummary.removeExposureSubrogation(subrogation)"
                      type="Subrogation"
                      value="subrogationSummary.Subrogations"
                      valueType="entity.Subrogation[]">
                      <ToolbarFlag
                        condition="subrogation.Status != TC_OPEN and subrogation.Status != TC_CLOSED"
                        name="Removable"/>
                      <Row>
                        <RangeCell
                          action="SubrogationDetail.drilldown(subrogation)"
                          available="subrogation.Exposure == null or not subrogation.New"
                          editable="subrogation.Exposure == null"
                          grow="true"
                          id="Exposure"
                          label="DisplayKey.get(&quot;Web.Subrogation.Exposure&quot;)"
                          required="true"
                          sortOrder="1"
                          value="subrogation.Exposure"
                          valueRange="subrogation.Exposure == null ? subrogationSummary.UnsubrogatedExposures : new Exposure[]{subrogation.Exposure}"
                          valueType="entity.Exposure">
                          <PostOnChange
                            deferUpdate="false"/>
                        </RangeCell>
                        <BooleanRadioCell
                          icon="&quot;completed&quot;"
                          iconType="svgFileName"
                          id="CustomizedLiability"
                          label="DisplayKey.get(&quot;Web.Subrogation.CustomizedLiability&quot;)"
                          showHeaderIcon="false"
                          value="subrogation.CustomizedLiability"
                          visible="not subrogationSummary.HasNoSubroAdversePartyOverrides"/>
                        <TypeKeyCell
                          editable="true"
                          id="Status"
                          label="DisplayKey.get(&quot;Web.Subrogation.Status&quot;)"
                          required="true"
                          value="subrogation.Status"
                          valueType="typekey.SubrogationStatus"
                          wrap="false">
                          <PostOnChange
                            deferUpdate="false"/>
                        </TypeKeyCell>
                        <TextCell
                          id="Owner"
                          label="DisplayKey.get(&quot;Web.Subrogation.Owner&quot;)"
                          value="subrogation.AssignedUser"
                          valueType="entity.User"
                          visible="subrogationSummary.EscalateSubro and subrogationSummary.SubrogateIndividualExposures"
                          wrap="false"/>
                        <DateCell
                          id="CloseDate"
                          label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.CloseDt&quot;)"
                          value="subrogation.CloseDate"
                          valueVisible="subrogation.Status == TC_CLOSED"/>
                        <TextCell
                          editable="subrogation.Status == TC_CLOSED and subrogation.isFieldChanged(entity.Subrogation#Status)"
                          grow="true"
                          id="CloseComment"
                          label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.CloseComment&quot;)"
                          value="subrogation.CloseComment"
                          valueVisible="subrogation.Status == TC_CLOSED"/>
                        <TypeKeyCell
                          editable="subrogation.Status == TC_CLOSED and subrogation.isFieldChanged(entity.Subrogation#Status)"
                          id="Outcome"
                          label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.Outcome&quot;)"
                          required="true"
                          value="subrogation.Outcome"
                          valueType="typekey.SubroClosedOutcome"
                          valueVisible="subrogation.Status == TC_CLOSED"/>
                      </Row>
                    </RowIterator>
                  </ListViewPanel>
                </ListViewInput>
                <ListViewInput
                  boldLabel="true"
                  def="EditableStatuteLV(claim)"
                  editable="true"
                  id="StatuteLimitations"
                  label="DisplayKey.get(&quot;NVV.Claim.Subro.StatuteLimitations&quot;)"
                  labelAbove="true">
                  <Toolbar>
                    <IteratorButtons
                      iterator="StatuteLimitations.EditableStatuteLV"/>
                  </Toolbar>
                </ListViewInput>
                <InputSet
                  visible="claim.getPartiesInMatters().length() &gt; 0 or claim.getSubroMatters().length &gt; 0">
                  <Label
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.Matters&quot;)"/>
                  <TextInput
                    id="SubroArbThoseInvolved"
                    label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.Arbitration.ThoseInvolved&quot;)"
                    value="claim.getPartiesInMatters()"/>
                  <ListViewInput
                    editable="false"
                    labelAbove="true">
                    <!-- label="DisplayKey.get(&quot;NVV.Claim.Subro.Matters&quot;)" -->
                    <Toolbar/>
                    <ListViewPanel
                      id="SubroMattersLV">
                      <RowIterator
                        editable="true"
                        elementName="Matter"
                        hideCheckBoxesIfReadOnly="true"
                        pageSize="5"
                        type="entity.Matter"
                        value="claim.getSubroMatters()"
                        valueType="entity.Matter[]">
                        <Row>
                          <TextCell
                            action="MatterDetailGroup.go(claim, Matter)"
                            id="Name"
                            label="DisplayKey.get(&quot;LV.Subro.Matters.Name&quot;)"
                            sortOrder="2"
                            value="Matter.Name"/>
                          <TypeKeyCell
                            id="TrialDetails_MatterType"
                            label="DisplayKey.get(&quot;LV.Subro.Matters.MatterType&quot;)"
                            required="false"
                            value="Matter.MatterType"
                            valueType="typekey.MatterType"/>
                          <DateCell
                            dateFormat="short"
                            id="TrialDetails_TrialDate"
                            label="DisplayKey.get(&quot;LV.Subro.Matters.TrialDate&quot;)"
                            required="false"
                            timeFormat="short"
                            value="Matter.TrialDateActivity.TargetDate"
                            wrapLabel="true"/>
                          <DateCell
                            id="Matter_CloseDate"
                            label="DisplayKey.get(&quot;LV.Subro.Matters.CloseDate&quot;)"
                            value="Matter.CloseDate"
                            wrapLabel="true"/>
                        </Row>
                      </RowIterator>
                    </ListViewPanel>
                  </ListViewInput>
                </InputSet>
              </InputColumn>
            </DetailViewPanel>
          </PanelColumn>
        </PanelRow>
      </Card>
      <Card
        hideIfEditable="true"
        id="SubrogationFinancialsCard"
        selectOnEnter="selectSubrogationFinancialsCard == true"
        title="DisplayKey.get(&quot;Web.Subrogation.SubrogationParties.ClaimFinancialsTab&quot;)">
        <PanelRef>
          <Toolbar>
            <ToolbarButton
              action="createRecoveryReserve(claim)"
              hideIfEditable="true"
              id="CreateRecoveryReserve"
              label="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.CalculateOSRecReserve&quot;)"
              tooltip="DisplayKey.get(&quot;NVV.Claim.Subrogation.Main.CalculateOSRecReserve.Tooltip&quot;)"
              visible="gw.api.system.CCConfigParameters.UseRecoveryReserves.Value and perm.Claim.createrecoveryreserve(claim)"/>
          </Toolbar>
          <Verbatim
            id="SubroAdversePartyFinancialsCardNote"
            label="DisplayKey.get(&quot;Subrogation.FinancialsPage.Alert&quot;)"
            labelStyleClass="alertBarCustom"/>
          <ListViewPanel
            id="SubrogationFinancialsLV">
            <Variable
              initialValue="gw.subrogation.financials.SubrogationFinancialsHelper.getSubroFinancialsRows(claim, null)"
              name="subroFinsResult"
              recalculateOnRefresh="true"
              type="gw.subrogation.financials.SubroFinsResult"/>
            <Row
              renderAsSmartHeader="true">
              <TextCell
                id="LabelTopHeader"/>
              <TextCell
                align="center"
                colspan="4"
                id="ClaimFinancialsHeader"
                value="DisplayKey.get(&quot;Web.Subrogation.Financials.Header.ClaimFinancials&quot;)"/>
              <TextCell
                align="center"
                colspan="4"
                id="SubrogationFinancialsHeader"
                value="DisplayKey.get(&quot;Web.Subrogation.Financials.Header.SubrogationFinancials&quot;)"/>
            </Row>
            <Row
              renderAsSmartHeader="true">
              <TextCell
                align="left"
                id="LabelBottomHeader"
                value="DisplayKey.get(&quot;Web.Subrogation.Financials.Header.ReserveLine&quot;)"/>
              <TextCell
                align="right"
                id="PaidHeader"
                value="DisplayKey.get(&quot;Web.Subrogation.Financials.Header.Paid&quot;)"/>
              <TextCell
                align="right"
                id="RecoveryHeader"
                value="DisplayKey.get(&quot;Web.Subrogation.Financials.Header.Recovered&quot;)"/>
              <TextCell
                align="right"
                id="NetPaidHeader"
                value="DisplayKey.get(&quot;Web.Subrogation.Financials.Header.NetPaid&quot;)"/>
              <TextCell
                align="right"
                id="DeductibleHeader"
                value="DisplayKey.get(&quot;Web.Subrogation.Financials.Header.Deductible&quot;)"/>
              <TextCell
                align="right"
                id="ExpectedRecoveryHeader"
                value="DisplayKey.get(&quot;Web.Subrogation.Financials.Header.ExpectedRecovery&quot;)"/>
              <TextCell
                align="right"
                id="RecoveredHeader"
                value="DisplayKey.get(&quot;Web.Subrogation.Financials.Header.SubroRecovered&quot;)"/>
              <TextCell
                align="right"
                id="PendingHeader"
                value="DisplayKey.get(&quot;Web.Subrogation.Financials.Header.Pending&quot;)"/>
              <TextCell
                align="right"
                id="AvailableRecoveryReservesHeader"
                value="if(gw.api.system.CCConfigParameters.UseRecoveryReserves.getValue()) { return DisplayKey.get(&quot;Web.Subrogation.Financials.Header.OpenRecoveryReserves&quot;)} else { return &quot;&quot; }"/>
            </Row>
            <RowIterator
              editable="false"
              elementName="fsRow"
              value="subroFinsResult.Nodes"
              valueType="java.util.List&lt;gw.subrogation.financials.AbstractSubroFinsNode&gt;">
              <Row
                useSubHeaderStyle="fsRow.Level == 1">
                <TextCell
                  id="Label"
                  value="fsRow.Label"/>
                <CurrencyCell
                  id="Paid"
                  value="fsRow.Calculations[gw.subrogation.financials.SubrogationCalculationsEnum.PAID]"/>
                <CurrencyCell
                  id="RecoveryAmount"
                  value="fsRow.Calculations[gw.subrogation.financials.SubrogationCalculationsEnum.RECOVERIES]"/>
                <CurrencyCell
                  id="NetPaidAmount"
                  value="fsRow.Calculations[gw.subrogation.financials.SubrogationCalculationsEnum.NET_PAID]"/>
                <CurrencyCell
                  id="DeductibleAmount"
                  value="fsRow.Calculations[gw.subrogation.financials.SubrogationCalculationsEnum.DEDUCTIBLE]"/>
                <CurrencyCell
                  id="ExpectedRecoveryAmount"
                  value="fsRow.Calculations[gw.subrogation.financials.SubrogationCalculationsEnum.EXPECTED_RECOVERY]"/>
                <CurrencyCell
                  id="SubroRecoveredAmount"
                  value="fsRow.Calculations[gw.subrogation.financials.SubrogationCalculationsEnum.SUBROGATION_RECOVERIES]"/>
                <CurrencyCell
                  id="PendingAmount"
                  value="fsRow.Calculations[gw.subrogation.financials.SubrogationCalculationsEnum.PENDING]"/>
                <CurrencyCell
                  id="AvailableRecoveryReserves"
                  value="fsRow.Calculations[gw.subrogation.financials.SubrogationCalculationsEnum.OPEN_RECOVERY_RESERVES]"/>
              </Row>
            </RowIterator>
            <Row
              useSubHeaderStyle="true"
              visible="subroFinsResult.Totals.size() &gt; 0">
              <TextCell
                id="TotalLabel"
                value="DisplayKey.get(&quot;Web.Subrogation.Financials.Total&quot;)"/>
              <CurrencyCell
                id="TotalPaid"
                value="subroFinsResult.Totals[gw.subrogation.financials.SubrogationCalculationsEnum.PAID]"/>
              <CurrencyCell
                id="TotalRecovered"
                value="subroFinsResult.Totals[gw.subrogation.financials.SubrogationCalculationsEnum.RECOVERIES]"/>
              <CurrencyCell
                id="TotalNetPaid"
                value="subroFinsResult.Totals[gw.subrogation.financials.SubrogationCalculationsEnum.NET_PAID]"/>
              <CurrencyCell
                id="TotalDeductible"
                value="subroFinsResult.Totals[gw.subrogation.financials.SubrogationCalculationsEnum.DEDUCTIBLE]"/>
              <CurrencyCell
                id="TotalExpectedRecovery"
                value="subroFinsResult.Totals[gw.subrogation.financials.SubrogationCalculationsEnum.EXPECTED_RECOVERY]"/>
              <CurrencyCell
                id="TotalSubroRecovered"
                value="subroFinsResult.Totals[gw.subrogation.financials.SubrogationCalculationsEnum.SUBROGATION_RECOVERIES]"/>
              <CurrencyCell
                id="TotalPending"
                value="subroFinsResult.Totals[gw.subrogation.financials.SubrogationCalculationsEnum.PENDING]"/>
              <CurrencyCell
                id="TotalAvailableRecoveryReserves"
                value="subroFinsResult.Totals[gw.subrogation.financials.SubrogationCalculationsEnum.OPEN_RECOVERY_RESERVES]"/>
            </Row>
          </ListViewPanel>
        </PanelRef>
        <PanelRef>
          <TitleBar
            title="DisplayKey.get(&quot;Web.Subrogation.Financials.SubroRecoveries&quot;)"/>
          <Toolbar/>
          <ListViewPanel
            id="SubrogationRecoveriesLV">
            <Variable
              initialValue="claim.SubroClaimCostRecoveries"
              name="recoveries"
              recalculateOnRefresh="true"
              type="java.util.List&lt;Recovery&gt;"/>
            <RowIterator
              editable="false"
              elementName="recovery"
              value="recoveries"
              valueType="java.util.List&lt;entity.Recovery&gt;">
              <Row>
                <DateCell
                  dateFormat="short"
                  id="CreateDate"
                  label="DisplayKey.get(&quot;Web.Subrogation.Financials.SubroRecoveries.CreateDate&quot;)"
                  value="recovery.CreateTime"/>
                <TextCell
                  id="ReserveLine"
                  label="DisplayKey.get(&quot;Web.Subrogation.Financials.SubroRecoveries.ReserveLine&quot;)"
                  value="recovery.ReserveLine"
                  valueType="entity.ReserveLine"/>
                <CurrencyCell
                  id="RecoveryAmount"
                  label="DisplayKey.get(&quot;Web.Subrogation.Financials.SubroRecoveries.RecoveryAmount&quot;)"
                  value="recovery.ReservingAmount"/>
                <TypeKeyCell
                  id="Status"
                  label="DisplayKey.get(&quot;Web.Subrogation.Financials.SubroRecoveries.Status&quot;)"
                  value="recovery.Status"
                  valueType="typekey.TransactionStatus"/>
              </Row>
            </RowIterator>
            <Row
              useSubHeaderStyle="true"
              visible="recoveries.size() &gt; 0 and !recoveries.hasMatch(\ rec -&gt; rec.ReserveLine.ReservingCurrency != recoveries[0].ReserveLine.ReservingCurrency )">
              <TextCell
                id="TotalFooter"
                value="DisplayKey.get(&quot;Web.Subrogation.Financials.Total&quot;)"/>
              <EmptyCell
                id="ReserveLineFooter"/>
              <CurrencyCell
                id="RecoveryAmountTotalFooter"
                value="recoveries.sumCurrencyAmount(\ rec -&gt; rec.ReservingAmount )"/>
              <EmptyCell
                id="StatusFooter"/>
            </Row>
          </ListViewPanel>
        </PanelRef>
        <DetailViewPanel>
          <InputColumn>
            <InputSetRef
              def="DeductibleInputSet(claim)"/>
          </InputColumn>
        </DetailViewPanel>
      </Card>
      <Card
        id="NotesTab"
        title="DisplayKey.get(&quot;Web.Subrogation.Tab.Notes&quot;)">
        <PanelRef
          def="WideNotesLV(claim.getSubroNotes(), true)">
          <Toolbar>
            <ToolbarButton
              action="NewNotePopup.push(claim, NoteTopicType.TC_SUBROGATION)"
              id="NewNoteButton"
              label="DisplayKey.get(&quot;Web.Subrogation.Notes.AddNote&quot;)"/>
            <CheckedValuesToolbarButton
              checkedRowAction="EditNotePopup.push(CheckedValue, false, true)"
              flags="one CanEdit"
              id="EditButton"
              iterator="WideNotesLV.NoteIterator"
              label="DisplayKey.get(&quot;Web.Subrogation.Notes.EditNote&quot;)"/>
            <CheckedValuesToolbarButton
              checkedRowAction="gw.api.note.NotesUtilBase.deleteNote(CheckedValue)"
              flags="all CanDelete"
              id="DeleteButton"
              iterator="WideNotesLV.NoteIterator"
              label="DisplayKey.get(&quot;Web.Subrogation.Notes.DeleteNote&quot;)"/>
            <CheckedValuesToolbarButton
              checkedRowAction="gw.api.print.PrintNoteAction.printNote(CheckedValue)"
              download="true"
              flags="one CanPrint"
              id="PrintButton"
              iterator="WideNotesLV.NoteIterator"
              label="DisplayKey.get(&quot;Web.Subrogation.Notes.PrintNote&quot;)"/>
          </Toolbar>
        </PanelRef>
      </Card>
      <Card
        id="DocumentsTab"
        title="DisplayKey.get(&quot;Web.Subrogation.Tab.Documents&quot;)">
        <PanelRef
          def="DocumentAlertPanelSet()"/>
        <PanelRef
          def="SubrogationDocumentsLV(subrogationSummary.RelatedDocuments)">
          <Toolbar>
            <ToolbarButton
              action="ClaimNewDocumentFromTemplateWorksheet.goInWorkspace(claim, subrogationSummary.DocumentInitForUI)"
              available="documentsActionsHelper.DocumentTemplateActionsAvailable"
              id="CreateFromTemplate"
              label="DisplayKey.get(&quot;Web.Subrogation.Documents.Create&quot;)"/>
            <ToolbarButton
              action="ClaimNewDocumentLinkedWorksheet.goInWorkspace(claim, subrogationSummary.DocumentInitForUI)"
              available="documentsActionsHelper.DocumentMetadataActionsAvailable and documentsActionsHelper.DocumentContentActionsAvailable"
              id="AttachDocument"
              label="DisplayKey.get(&quot;Web.Subrogation.Documents.Attach&quot;)"/>
            <PickerToolbarButton
              action="PickExistingDocumentPopup.push(subrogationSummary.Claim)"
              available="documentsActionsHelper.DocumentMetadataActionsAvailable"
              id="LinkDocument"
              label="DisplayKey.get(&quot;Web.Subrogation.Documents.Link&quot;)"
              onPick="subrogationSummary.linkDocumentForUI(PickedValue)"/>
            <ToolbarButton
              action="null"
              available="documentsActionsHelper.DocumentContentServerAvailable"
              id="RefreshAsyncContent"
              label="DisplayKey.get(&quot;Web.DocumentsLV.Button.AsynchronousRefresh&quot;)"
              tooltip="DisplayKey.get(&quot;Web.DocumentsLV.Button.AsynchronousRefresh.Tooltip&quot;)"
              visible="documentsActionsHelper.isShowAsynchronousRefreshAction(subrogationSummary.RelatedDocuments)"/>
          </Toolbar>
        </PanelRef>
      </Card>
    </CardViewPanel>
    <Code>    
    function createRecoveryReserve(aClaim : Claim) {
      CurrentLocation.startEditing()

      var success = false
      try {
        aClaim.AutoSetOpenRecoveryReserve()
        CurrentLocation.commit()
        success = true
      } finally {
        if (!success) {
          CurrentLocation.cancel()
        }
      }
    }</Code>
  </PanelSet>
</PCF>
